Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/BigDataCloud/BigDataCloudDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.Data.BigDataCloud\n\nimport io.ktor.client.HttpClient\nimport io.ktor.client.call.body\nimport io.ktor.client.engine.cio.CIO\nimport io.ktor.client.plugins.contentnegotiation.ContentNegotiation\nimport io.ktor.client.plugins.defaultRequest\nimport io.ktor.client.request.get\nimport io.ktor.serialization.kotlinx.json.json\nimport kotlinx.serialization.json.Json\nimport no.uio.ifi.in2000.prosjekt.Model.BigDataCloud\n\n\nclass BigDataCloudDataSource { //Denne brukes for å skrive inn koordinater, GeoNorge brukes for å skrive inn by\n    private val client = HttpClient(CIO){\n        defaultRequest {\n            url(\"https://api.bigdatacloud.net/data/reverse-geocode-client?\")\n        }\n        install(ContentNegotiation) {\n            json(Json {\n                ignoreUnknownKeys = true\n                prettyPrint = true\n                isLenient = true\n\n            })\n        }\n    }\n\n    suspend fun getPlaceFromCoordinates(lat : String, lon : String) : BigDataCloud? { //sted kan være navn på by eller en adresse\n        return try {\n            client.get(\"https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=$lat&longitude=$lon\")\n                .body()\n        } catch (e: Exception) {\n            println(\"Error during HTTP request for metAlerts: $e\")\n            return null\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/BigDataCloud/BigDataCloudDataSource.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/BigDataCloud/BigDataCloudDataSource.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/BigDataCloud/BigDataCloudDataSource.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/BigDataCloud/BigDataCloudDataSource.kt	
@@ -11,7 +11,8 @@
 import no.uio.ifi.in2000.prosjekt.Model.BigDataCloud
 
 
-class BigDataCloudDataSource { //Denne brukes for å skrive inn koordinater, GeoNorge brukes for å skrive inn by
+
+class BigDataCloudDataSource {
     private val client = HttpClient(CIO){
         defaultRequest {
             url("https://api.bigdatacloud.net/data/reverse-geocode-client?")
@@ -25,8 +26,10 @@
             })
         }
     }
-
-    suspend fun getPlaceFromCoordinates(lat : String, lon : String) : BigDataCloud? { //sted kan være navn på by eller en adresse
+    /*
+    place can be either a city or a country
+     */
+    suspend fun getPlaceFromCoordinates(lat : String, lon : String) : BigDataCloud? {
         return try {
             client.get("https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=$lat&longitude=$lon")
                 .body()
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/EnTur/EnTurDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.Data.EnTur\n\nimport androidx.compose.ui.text.toLowerCase\nimport io.ktor.client.HttpClient\nimport io.ktor.client.call.body\nimport io.ktor.client.engine.cio.CIO\nimport io.ktor.client.plugins.contentnegotiation.ContentNegotiation\nimport io.ktor.client.plugins.defaultRequest\nimport io.ktor.client.request.get\nimport io.ktor.client.request.header\nimport io.ktor.serialization.kotlinx.json.json\nimport kotlinx.serialization.json.Json\nimport no.uio.ifi.in2000.prosjekt.Model.EnTur\n\nclass EnTurDataSource {\n    private val client = HttpClient(CIO){\n        defaultRequest {\n            url(\"https://api.entur.io/geocoder/v1/autocomplete?\")\n            header(\"ET-Client-Name\", \"app-for-havvarsel.no\")\n        }\n        install(ContentNegotiation) {\n            json(Json {\n                ignoreUnknownKeys = true\n                prettyPrint = true\n                isLenient = true\n            })\n        }\n    }\n    //Får ut en liste \"features\" som er en liste med navn på steder, får også en variabel\n    //geometry som har en liste coordinates for stedet\n    suspend fun getEnTurAutoComplete( text : String, noOfResults : Int = 10) : EnTur?{ //\"2024-03-19T23:00:00.000+01:00\"\n\n        val newText = text.lowercase()\n            .replace(\" \", \"%20\")\n            .replace(\"ø\", \"oe\")\n            .replace(\"å\", \"aa\")\n            .replace(\"æ\", \"ae\")\n\n        return try {\n            client.get(\"https://api.entur.io/geocoder/v1/autocomplete?text=$newText&size=$noOfResults&lang=no\").body()\n        } catch (e: Exception) {\n            // Handle the exception (log, throw a custom exception, etc.)\n            println(\"Error during HTTP request for EnTur: $e\")\n            null\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/EnTur/EnTurDataSource.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/EnTur/EnTurDataSource.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/EnTur/EnTurDataSource.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/EnTur/EnTurDataSource.kt	
@@ -1,6 +1,5 @@
 package no.uio.ifi.in2000.prosjekt.Data.EnTur
 
-import androidx.compose.ui.text.toLowerCase
 import io.ktor.client.HttpClient
 import io.ktor.client.call.body
 import io.ktor.client.engine.cio.CIO
@@ -26,9 +25,13 @@
             })
         }
     }
-    //Får ut en liste "features" som er en liste med navn på steder, får også en variabel
-    //geometry som har en liste coordinates for stedet
-    suspend fun getEnTurAutoComplete( text : String, noOfResults : Int = 10) : EnTur?{ //"2024-03-19T23:00:00.000+01:00"
+
+    /*
+    Gets out a list of "features" which are lists of names of places, also a variable
+    Have to replace some norwegian letters with their english counterparts and replace spaces with %20
+    Have set the number of results to 10, this could be anything
+     */
+    suspend fun getEnTurAutoComplete( text : String, noOfResults : Int = 10) : EnTur?{ //"format: 2024-03-19T23:00:00.000+01:00"
 
         val newText = text.lowercase()
             .replace(" ", "%20")
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/HomeScreenViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.home\n\nimport android.Manifest\nimport android.app.Activity\nimport android.app.Application\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.os.Build\nimport android.util.Log\nimport androidx.annotation.RequiresApi\nimport androidx.core.app.ActivityCompat\nimport androidx.datastore.core.DataStore\nimport androidx.datastore.preferences.core.Preferences\nimport androidx.datastore.preferences.core.edit\nimport androidx.datastore.preferences.core.stringPreferencesKey\nimport androidx.datastore.preferences.preferencesDataStore\nimport androidx.lifecycle.AndroidViewModel\n\nimport androidx.lifecycle.viewModelScope\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\n\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.first\nimport kotlinx.coroutines.flow.map\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport kotlinx.coroutines.launch\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.modules.SerializersModule\nimport no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository\nimport no.uio.ifi.in2000.prosjekt.Data.EnTur.EnTurRepository\nimport no.uio.ifi.in2000.prosjekt.Data.GeoNorge.GeoNorgeRepository\nimport no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository\nimport no.uio.ifi.in2000.prosjekt.Data.WeatherForecast.LocationForecastRepository\nimport no.uio.ifi.in2000.prosjekt.Model.BigDataCloud\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.FeaturesEnTur\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\nimport no.uio.ifi.in2000.prosjekt.ui.Map.getLocationMap\nimport no.uio.ifi.in2000.prosjekt.ui.home.DataStoreManager.LOCATION_UI_STATE_KEY\nimport no.uio.ifi.in2000.prosjekt.ui.home.DataStoreManager.dataStore\nimport java.time.Instant\nimport java.time.ZoneId\nimport java.time.ZoneOffset\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\n\n\n\n\nobject DataStoreManager {\n    val LOCATION_UI_STATE_KEY = stringPreferencesKey(\"location_ui_state\")\n\n    val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = \"Cities\")\n}\n@Serializable\ndata class CombinedWeatherData(\n    val weatherData: WeatherData?,\n    val dataProjectionMain: DataProjectionMain?,\n    val bigDataCloud: BigDataCloud?,\n    val enTurLocationName: String? = null  // Legg til et felt for stedsnavnet fra EnTur API\n\n)\n@Serializable\ndata class LocationUIState(\n    //val locationDataMap: Map<String, WeatherData?> = emptyMap(),\n    //val seaTempratureMap: Map<String, Temperature?> = emptyMap(),\n    val combinedDataMap: Map<String, CombinedWeatherData> = emptyMap(),\n    val locationCombined : Pair<String, CombinedWeatherData?>? = null,\n    val suggestion: List<FeaturesEnTur>? = emptyList()\n)\nval json = Json {\n    serializersModule = SerializersModule {\n        // If you have custom serializers, you can include them here\n    }\n    ignoreUnknownKeys = true // Useful for backward compatibility\n    encodeDefaults = true\n}\nfun serializeLocationUIState(state: LocationUIState): String {\n    return json.encodeToString(LocationUIState.serializer(), state)\n}\n\nfun deserializeLocationUIState(serializedData: String): LocationUIState {\n    return json.decodeFromString(LocationUIState.serializer(), serializedData)\n}\nsuspend fun Context.saveLocationUIState(state: LocationUIState) {\n    val serializedState = serializeLocationUIState(state)\n    dataStore.edit { preferences ->\n        preferences[LOCATION_UI_STATE_KEY] = serializedState\n    }\n}\nsuspend fun Context.loadLocationUIState(): LocationUIState? {\n    // This assumes you have an extension function or a utility to read from DataStore and deserialize\n    val preferences = dataStore.data.first() // Use .first() to get the current value, be mindful of the thread it's called on\n    val serializedState = preferences[LOCATION_UI_STATE_KEY]\n    return if (serializedState != null) deserializeLocationUIState(serializedState) else null\n}\n\nval Context.locationUIStateFlow: Flow<LocationUIState?>\n    get() = dataStore.data\n        .map { preferences ->\n            val serializedState = preferences[LOCATION_UI_STATE_KEY] ?: return@map null\n            deserializeLocationUIState(serializedState)\n        }\n\n@RequiresApi(Build.VERSION_CODES.O)\nclass HomeScreenViewModel(application: Application): AndroidViewModel(application){\n    private val locationForecastrepository: LocationForecastRepository = LocationForecastRepository()\n    private val havvarselRepository: HavvarselRepository = HavvarselRepository()\n    private  val bigDataCloudDataRepository: BigDataCloudRepository = BigDataCloudRepository()\n    private  val geoNorgeRepository: GeoNorgeRepository = GeoNorgeRepository()\n    private val enTurRepository: EnTurRepository = EnTurRepository()\n    private val _isPopupVisible = MutableStateFlow(false)\n    val isPopupVisible: StateFlow<Boolean> = _isPopupVisible.asStateFlow()\n\n\n    private val _locationUIstate = MutableStateFlow(LocationUIState())\n    val locationUIState: StateFlow<LocationUIState> = _locationUIstate.asStateFlow()\n\n    init {\n        viewModelScope.launch {\n            val appContext = getApplication<Application>()\n            val storedState = appContext.loadLocationUIState()\n            if(storedState?.combinedDataMap == null) {\n                val locMap = hashMapOf<Pair<String, String>, String?>(\n                    Pair(\"59.911075\", \"10.748128\") to \"Oslo\",\n                    Pair(\"60.391789\", \"5.326067\") to \"Bergen\"\n                )\n                fetchWeatherData(locMap)\n            }\n            else{\n                getLocationViewModel(appContext) { location ->\n                    val lat = location.latitude.toString()\n                    val lon = location.longitude.toString()\n                    fetchLocationWeatherData(Pair(lat, lon))\n                }\n                val locationDataMap: Map<Pair<String, String>, String?> = storedState.combinedDataMap.map { (key, value) ->\n                    val coordinates = key.split(\",\").let {\n                        Pair(it[0].trim(), it[1].trim()) // Ensuring there is no extra whitespace\n                    }\n                    coordinates to value.enTurLocationName\n                }.toMap()\n                fetchWeatherData(locationDataMap)\n\n\n            }\n        }\n    }\n    fun toggleVisibility(){\n        _isPopupVisible.value = !_isPopupVisible.value\n    }\n    fun triggerSaveState(context: Context, state: LocationUIState) {\n        viewModelScope.launch {\n            context.saveLocationUIState(state)\n        }\n    }\n\n    fun fetchSuggestions(locationName: String){\n        viewModelScope.launch {\n            val suggestionsTemp = enTurRepository.getEnTurAPI(locationName)?.features\n            Log.d(\"Suggestions\", \"Fetched ${suggestionsTemp?.size} suggestions\")\n            //_suggestionsUIstate.value = suggestionsTemp\n            _locationUIstate.update {currenState ->\n                currenState.copy(suggestion = suggestionsTemp)\n            }\n\n        }\n    }\n\n    fun clearSuggestions(){\n        viewModelScope.launch {\n            _locationUIstate.update {currenState ->\n                currenState.copy(suggestion = emptyList())\n            }\n        }\n    }\n\n    private fun getLocationViewModel(\n        context: Context,\n\n        locationCallback: (Location) -> Unit // Callback function to receive location\n    ) {\n        val fusedLocationClient: FusedLocationProviderClient =\n            LocationServices.getFusedLocationProviderClient(context)\n        if ((ActivityCompat.checkSelfPermission(\n                context,\n                Manifest.permission.ACCESS_FINE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED ||\n                    ActivityCompat.checkSelfPermission(\n                        context,\n                        Manifest.permission.ACCESS_COARSE_LOCATION\n                    ) != PackageManager.PERMISSION_GRANTED)\n        ) {\n\n\n        } else {\n            fusedLocationClient.lastLocation\n                .addOnSuccessListener { location: Location? ->\n                    if (location != null) {\n                        locationCallback(location) // Call the callback with location\n                    }\n                }\n            return\n        }\n    }\n\n    private fun fetchWeatherData(locations: Map<Pair<String,String>, String?>){\n        locations.forEach{(location, name) ->\n            viewModelScope.launch {\n                val weatherData = locationForecastrepository.getLocationForecast(location.first, location.second, null)\n                val currentDateTime = Instant.now()\n                val norwegianTimeZone = ZoneId.of(\"Europe/Oslo\")\n                val norwegianDateTime = currentDateTime.atZone(norwegianTimeZone).toLocalDateTime()\n                val roundedDateTime = norwegianDateTime.withMinute(0).withSecond(0).withNano(0)\n                val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\")\n\n                val norwegianNowDateTime = roundedDateTime\n                val formattedNowDateTime = formatter.format(norwegianNowDateTime)\n                val norwegianPlusOneDateTime = roundedDateTime.plusHours(1)\n                val formattedPlusOneDateTime = formatter.format(norwegianPlusOneDateTime)\n\n                val seaTemperatureAndSalinity = havvarselRepository.getHavvarselDataProjection(listOf(\"temperature\", \"salinity\"),location.second,location.first,null,formattedPlusOneDateTime,formattedNowDateTime)\n                val bigDataCloudData = bigDataCloudDataRepository.getBigDataCloud(location.first, location.second)\n\n\n                _locationUIstate.update {currentState ->\n                    val updatedMap = currentState.combinedDataMap.toMutableMap()\n                    val locationKey = \"${location.first}, ${location.second}\"\n\n                    updatedMap[locationKey] = CombinedWeatherData(weatherData, seaTemperatureAndSalinity, bigDataCloudData, name)\n                    currentState.copy(combinedDataMap = updatedMap)\n                }\n            }\n        }\n    }\n    fun fetchLocationWeatherData(location: Pair<String,String>) {\n        viewModelScope.launch {\n            val weatherData = locationForecastrepository.getLocationForecast(\n                location.first,\n                location.second,\n                null\n            )\n            val nowWithOffset = ZonedDateTime.now(ZoneOffset.of(\"+01:00\"))\n            val oneHourLater = nowWithOffset.plusHours(1)\n            val formattedOneHourLater = oneHourLater.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)\n            val formattedNow = nowWithOffset.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)\n\n\n            val seaTemperatureAndSalinity = havvarselRepository.getHavvarselDataProjection(\n                listOf(\"temperature\", \"salinity\"),\n                location.second,\n                location.first,\n                null,\n                formattedOneHourLater,\n                formattedNow\n            )\n            val bigDataCloudData =\n                bigDataCloudDataRepository.getBigDataCloud(location.first, location.second)\n            _locationUIstate.update {currentState ->\n                val locationName = bigDataCloudDataRepository.getBigDataCloud(location.first, location.second)\n                val locationKey = \"${location.first}, ${location.second}\"\n\n                val myLoc = Pair(locationKey,CombinedWeatherData(weatherData, seaTemperatureAndSalinity, bigDataCloudData, locationName?.city))\n\n                currentState.copy(locationCombined = myLoc)\n\n            }\n        }\n    }\n    private fun addWeatherData(locationKey: String, weatherData: CombinedWeatherData){\n        _locationUIstate.update {currenState->\n            val updatedMap = currenState.combinedDataMap.toMutableMap().apply {\n                put(locationKey, weatherData)\n            }\n            currenState.copy(combinedDataMap = updatedMap)\n        }\n    }\n\n    fun addLocationByName(locationName: String, context: Context){\n        viewModelScope.launch {\n\n            val findSuggestion = _locationUIstate.value.suggestion?.find {\n                (it.properties.label == locationName)\n            }\n            val cordinates = findSuggestion?.geometry?.coordinates\n            val weatherData = locationForecastrepository.getLocationForecast(cordinates?.get(1).toString(), cordinates?.get(0).toString(), null)\n\n            val nowWithOffset = ZonedDateTime.now(ZoneOffset.of(\"+01:00\"))\n            val oneHourLater = nowWithOffset.plusHours(1)\n            val formattedOneHourLater = oneHourLater.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)\n            val formattedNow = nowWithOffset.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)\n\n            val seaTemperatureAndSalinity = havvarselRepository.getHavvarselDataProjection(listOf(\"temperature\", \"salinity\"),cordinates?.get(0).toString(),cordinates?.get(1).toString(),null,formattedOneHourLater,formattedNow)\n            val bigDataCloudData = bigDataCloudDataRepository.getBigDataCloud(cordinates?.get(1).toString(), cordinates?.get(0).toString())\n\n            addWeatherData(\"${cordinates?.get(1)}, ${cordinates?.get(0)}\", CombinedWeatherData(weatherData, seaTemperatureAndSalinity, bigDataCloudData, findSuggestion?.properties?.label))\n            triggerSaveState(context, locationUIState.value)\n        }\n    }\n    fun deleteLocation(locationCordinate: String){\n        _locationUIstate.update {currenState ->\n            val updatedMap = currenState.combinedDataMap.toMutableMap().apply {\n                remove(locationCordinate)\n            }\n            currenState.copy(combinedDataMap = updatedMap)\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/HomeScreenViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/HomeScreenViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/HomeScreenViewModel.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/HomeScreenViewModel.kt	
@@ -1,7 +1,6 @@
 package no.uio.ifi.in2000.prosjekt.ui.home
 
 import android.Manifest
-import android.app.Activity
 import android.app.Application
 import android.content.Context
 import android.content.pm.PackageManager
@@ -16,33 +15,28 @@
 import androidx.datastore.preferences.core.stringPreferencesKey
 import androidx.datastore.preferences.preferencesDataStore
 import androidx.lifecycle.AndroidViewModel
-
 import androidx.lifecycle.viewModelScope
 import com.google.android.gms.location.FusedLocationProviderClient
 import com.google.android.gms.location.LocationServices
+import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.asStateFlow
-import kotlinx.coroutines.flow.update
-
-import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.first
 import kotlinx.coroutines.flow.map
-import kotlinx.serialization.encodeToString
-import kotlinx.serialization.json.Json
+import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
 import kotlinx.serialization.Serializable
+import kotlinx.serialization.json.Json
 import kotlinx.serialization.modules.SerializersModule
 import no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository
 import no.uio.ifi.in2000.prosjekt.Data.EnTur.EnTurRepository
-import no.uio.ifi.in2000.prosjekt.Data.GeoNorge.GeoNorgeRepository
 import no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository
 import no.uio.ifi.in2000.prosjekt.Data.WeatherForecast.LocationForecastRepository
 import no.uio.ifi.in2000.prosjekt.Model.BigDataCloud
 import no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain
 import no.uio.ifi.in2000.prosjekt.Model.FeaturesEnTur
 import no.uio.ifi.in2000.prosjekt.Model.WeatherData
-import no.uio.ifi.in2000.prosjekt.ui.Map.getLocationMap
 import no.uio.ifi.in2000.prosjekt.ui.home.DataStoreManager.LOCATION_UI_STATE_KEY
 import no.uio.ifi.in2000.prosjekt.ui.home.DataStoreManager.dataStore
 import java.time.Instant
@@ -52,8 +46,6 @@
 import java.time.format.DateTimeFormatter
 
 
-
-
 object DataStoreManager {
     val LOCATION_UI_STATE_KEY = stringPreferencesKey("location_ui_state")
 
@@ -82,6 +74,10 @@
     ignoreUnknownKeys = true // Useful for backward compatibility
     encodeDefaults = true
 }
+/*
+I am serializing the data class into a JSON string for storing it in datastore
+ and then deserializing it back into the same data class.
+ */
 fun serializeLocationUIState(state: LocationUIState): String {
     return json.encodeToString(LocationUIState.serializer(), state)
 }
@@ -89,12 +85,18 @@
 fun deserializeLocationUIState(serializedData: String): LocationUIState {
     return json.decodeFromString(LocationUIState.serializer(), serializedData)
 }
+/*
+This extension function is used to save the location UI state to DataStore
+ */
 suspend fun Context.saveLocationUIState(state: LocationUIState) {
     val serializedState = serializeLocationUIState(state)
     dataStore.edit { preferences ->
         preferences[LOCATION_UI_STATE_KEY] = serializedState
     }
 }
+/*
+Loading the location UI state from DataStore
+ */
 suspend fun Context.loadLocationUIState(): LocationUIState? {
     // This assumes you have an extension function or a utility to read from DataStore and deserialize
     val preferences = dataStore.data.first() // Use .first() to get the current value, be mindful of the thread it's called on
@@ -102,19 +104,11 @@
     return if (serializedState != null) deserializeLocationUIState(serializedState) else null
 }
 
-val Context.locationUIStateFlow: Flow<LocationUIState?>
-    get() = dataStore.data
-        .map { preferences ->
-            val serializedState = preferences[LOCATION_UI_STATE_KEY] ?: return@map null
-            deserializeLocationUIState(serializedState)
-        }
-
 @RequiresApi(Build.VERSION_CODES.O)
 class HomeScreenViewModel(application: Application): AndroidViewModel(application){
     private val locationForecastrepository: LocationForecastRepository = LocationForecastRepository()
     private val havvarselRepository: HavvarselRepository = HavvarselRepository()
     private  val bigDataCloudDataRepository: BigDataCloudRepository = BigDataCloudRepository()
-    private  val geoNorgeRepository: GeoNorgeRepository = GeoNorgeRepository()
     private val enTurRepository: EnTurRepository = EnTurRepository()
     private val _isPopupVisible = MutableStateFlow(false)
     val isPopupVisible: StateFlow<Boolean> = _isPopupVisible.asStateFlow()
@@ -135,11 +129,18 @@
                 fetchWeatherData(locMap)
             }
             else{
+                /*
+                Checking if the user have allowed to use their location and if so calling the function
+                fetchLocationWeatherData and getting the updated location data
+                 */
                 getLocationViewModel(appContext) { location ->
                     val lat = location.latitude.toString()
                     val lon = location.longitude.toString()
                     fetchLocationWeatherData(Pair(lat, lon))
                 }
+                /*
+                Going through the stored data and updating all the data from the api
+                 */
                 val locationDataMap: Map<Pair<String, String>, String?> = storedState.combinedDataMap.map { (key, value) ->
                     val coordinates = key.split(",").let {
                         Pair(it[0].trim(), it[1].trim()) // Ensuring there is no extra whitespace
@@ -155,6 +156,8 @@
     fun toggleVisibility(){
         _isPopupVisible.value = !_isPopupVisible.value
     }
+
+
     fun triggerSaveState(context: Context, state: LocationUIState) {
         viewModelScope.launch {
             context.saveLocationUIState(state)
@@ -180,7 +183,10 @@
             }
         }
     }
-
+    /*
+    I want the if check to have an empty body here because i dont want to ask for location permissions every time
+    they open the app.
+     */
     private fun getLocationViewModel(
         context: Context,
 
@@ -203,6 +209,10 @@
             fusedLocationClient.lastLocation
                 .addOnSuccessListener { location: Location? ->
                     if (location != null) {
+                        /*
+                        using a callback here because it is an asyncrounous operation and we dont want to block the main thread
+                        If i would return here i will not get the data the same way
+                         */
                         locationCallback(location) // Call the callback with location
                     }
                 }
@@ -239,6 +249,9 @@
             }
         }
     }
+    /*
+    I am only fetching the city that you are in for your location.
+     */
     fun fetchLocationWeatherData(location: Pair<String,String>) {
         viewModelScope.launch {
             val weatherData = locationForecastrepository.getLocationForecast(
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.home\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.content.res.Resources\nimport android.location.Location\nimport android.os.Build\nimport android.util.Log\nimport androidx.annotation.RequiresApi\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.expandVertically\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.shrinkVertically\nimport androidx.compose.animation.slideInVertically\nimport androidx.compose.animation.slideOutVertically\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.gestures.detectHorizontalDragGestures\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\n\n\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.heightIn\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Delete\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.TextFieldDefaults\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.SideEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\n\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.graphics.toArgb\n\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.platform.LocalSoftwareKeyboardController\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.ImeAction\n\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.ui.window.PopupProperties\nimport androidx.core.app.ActivityCompat\nimport androidx.core.view.WindowCompat\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport kotlinx.coroutines.delay\nimport no.uio.ifi.in2000.prosjekt.R\nimport java.time.Instant\nimport java.time.LocalDateTime\nimport java.time.ZoneId\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\n\n\nimport kotlin.math.abs\nimport kotlin.math.round\nimport kotlin.math.roundToInt\n\n@Composable\nfun Logo(){\n    Column(\n        modifier = Modifier\n    ) {\n        Image(\n            painter = painterResource(id = R.drawable.logo3),\n            contentDescription = \"Logo\",\n            modifier = Modifier\n                .fillMaxWidth()\n                .fillMaxHeight(),\n\n            contentScale = ContentScale.FillWidth\n        )\n    }\n}\n@Composable\n@OptIn(ExperimentalComposeUiApi::class, ExperimentalFoundationApi::class,\n    ExperimentalMaterial3Api::class\n)\nfun HomeScreen(activity: Activity, navController: NavController, homeScreenViewModel: HomeScreenViewModel = viewModel()) {\n    val context = LocalContext.current\n    val keyboardController = LocalSoftwareKeyboardController.current\n    var text by remember { mutableStateOf(\"\") }\n    val weatherState = homeScreenViewModel.locationUIState.collectAsState()\n    var showSuggestions by remember { mutableStateOf(false) }\n\n\n\n    Scaffold(\n        bottomBar = { RunBottomBar(navController = navController)} // Setter bottomBar i Scaffold\n    ) { paddingValues ->\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(bottom = paddingValues.calculateBottomPadding()) // Gir plass for BottomBar\n        ) {\n            LazyColumn(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .background(Color(0xFF171729)),\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                item {\n                    Logo()\n                }\n                //item {Spacer(modifier = Modifier.height(30.dp))}\n                stickyHeader {\n                    Column(\n                        modifier = Modifier\n                            .fillMaxWidth()\n                            .background(Color(0xFF171729).copy(alpha = 0.9f)),\n                        horizontalAlignment = Alignment.CenterHorizontally\n                    ){\n                        TextField(\n                            value = text,\n                            onValueChange = { newValue ->\n                                text = newValue\n                                showSuggestions = newValue.isNotEmpty()\n                                if (newValue.isNotEmpty()) {\n                                    homeScreenViewModel.fetchSuggestions(newValue)\n                                }\n                            },\n                            trailingIcon = {\n                                Icon(\n                                    imageVector = Icons.Filled.LocationOn,\n                                    contentDescription = \"Location\",\n                                    modifier = Modifier.clickable {\n                                        getLocation(context, activity, homeScreenViewModel)\n                                    }\n                                )\n                            },\n                            placeholder = { Text(\"Skriv her\") },\n                            modifier = Modifier\n                                .fillMaxWidth(0.9f),\n                            shape = RoundedCornerShape(20.dp),\n                            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                            keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() }),\n                            colors = TextFieldDefaults.colors( // Få bort rar linje under søkebar\n                                focusedIndicatorColor = Color.Transparent,\n                                unfocusedIndicatorColor = Color.Transparent,\n                                disabledIndicatorColor = Color.Transparent\n                            )\n                        )\n                    }\n                }\n                item{\n                    Spacer(modifier = Modifier.height(8.dp))\n                }\n                item { Text(text = \"Legg til dine favorittsteder!\", color = Color.White)}\n                item{\n                    if(weatherState.value.locationCombined != null){\n                        WeatherBox(\n                            location = weatherState.value.locationCombined?.first!!,\n                            combinedWeatherData = weatherState.value.locationCombined?.second,\n                            navController = navController,true)\n                    }}\n                items(weatherState.value.combinedDataMap.entries.toList()) { (locationKey, weatherData) ->\n                    key(locationKey) {\n                        CustomSwipeToDeleteContainer(\n                            item = locationKey,\n                            onDelete = { location ->\n                                homeScreenViewModel.deleteLocation(location)\n                                homeScreenViewModel.triggerSaveState(context, homeScreenViewModel.locationUIState.value)\n                            },\n                            content = { location ->\n                                WeatherBox(\n                                    location = location,\n                                    combinedWeatherData = weatherData,\n                                    navController = navController,\n                                    false)\n                            }\n                        )\n                    }\n                }\n                item {\n                    addButton(homeScreenViewModel)\n                }\n            }\n            myPopup(homeScreenViewModel = homeScreenViewModel)\n\n            if (showSuggestions) {\n                Box(\n                    modifier = Modifier\n                        .matchParentSize()\n                        .background(Color(0xFF171729).copy(alpha = 1f))\n                        .clickable {\n                            showSuggestions = false\n                            text = \"\"\n                            keyboardController?.hide()\n                            homeScreenViewModel.clearSuggestions()\n                        }\n                ) {\n                    Column(\n                        modifier = Modifier\n                            .fillMaxWidth()\n                            .padding(top = 16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally\n                    ) {\n                        TextField(\n                            value = text,\n                            onValueChange = { newValue ->\n                                text = newValue\n                                showSuggestions = newValue.isNotEmpty()\n                                if (newValue.isNotEmpty()) {\n                                    homeScreenViewModel.fetchSuggestions(newValue)\n                                }\n                            },\n                            trailingIcon = {\n                                Icon(\n                                    imageVector = Icons.Filled.LocationOn,\n                                    contentDescription = \"Location\",\n                                    modifier = Modifier.clickable {\n                                        getLocation(context, activity, homeScreenViewModel)\n                                    }\n                                )\n                            },\n                            label = { Text(\"Skriv her\") },\n                            modifier = Modifier\n                                .fillMaxWidth(0.9f),\n                            shape = RoundedCornerShape(20.dp),\n                            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                            keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() }),\n                            colors = TextFieldDefaults.colors(\n                                focusedIndicatorColor = Color.Transparent,\n                                unfocusedIndicatorColor = Color.Transparent,\n                                disabledIndicatorColor = Color.Transparent\n                            )\n                        )\n                    }\n\n                    LazyColumn(\n                        modifier = Modifier\n                            .padding(top = 80.dp)\n                            .fillMaxWidth(0.8f)\n                            .background(Color(0xFFCFE3F3))\n                            .heightIn(max = 250.dp)\n                            .align(Alignment.TopCenter)\n                    ) {\n\n                        items(weatherState.value.suggestion ?: emptyList()) { suggestion ->\n                            Text(\n                                text = suggestion.properties.label,\n                                modifier = Modifier\n                                    .fillMaxWidth()\n                                    .clickable {\n                                        text = suggestion.properties.label\n                                        showSuggestions = false\n                                        homeScreenViewModel.clearSuggestions()\n                                        val coordinates = suggestion.geometry.coordinates\n                                        val coordinateString =\n                                            \"${coordinates[1]}, ${coordinates[0]}\"\n                                        navController.navigate(\"infoStederScreen/$coordinateString/$text\")\n                                    }\n                                    .padding(8.dp),\n                            )\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nprivate const val REQUEST_LOCATION_PERMISSION_CODE = 0\n\nfun getLocation(\n    context: Context,\n    activity: Activity,\n    homeScreenViewModel: HomeScreenViewModel) {\n    val fusedLocationClient: FusedLocationProviderClient =\n        LocationServices.getFusedLocationProviderClient(context)\n    if ((ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_FINE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED ||\n                ActivityCompat.checkSelfPermission(\n                    context,\n                    Manifest.permission.ACCESS_COARSE_LOCATION\n                ) != PackageManager.PERMISSION_GRANTED)\n    ) {\n        ActivityCompat.requestPermissions(\n            activity,\n            arrayOf(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ),\n            100\n        )\n    } else {\n        fusedLocationClient.lastLocation\n            .addOnSuccessListener { location: Location? ->\n                homeScreenViewModel.fetchLocationWeatherData(Pair(location?.latitude.toString(), location?.longitude.toString()), )\n            }\n        return\n    }\n}\n\n@Composable\n@ExperimentalMaterial3Api\nfun CustomSwipeToDismiss(\n    onSwiped: () -> Unit,\n    onDeleted: () -> Unit,\n    background: @Composable RowScope.() -> Unit,\n    dismissContent: @Composable RowScope.() -> Unit,\n    modifier: Modifier = Modifier,\n) {\n    var isSwiped by remember {\n        mutableStateOf(false)\n    }\n\n    var offsetX by remember { mutableFloatStateOf(0f) }\n    val animatedOffset by animateFloatAsState(targetValue = offsetX, label = \"\")\n    val screenWidth = LocalConfiguration.current.screenWidthDp\n    val screenWidthPx = with(LocalDensity.current) { screenWidth.dp.toPx() }\n\n    Box(\n        modifier.pointerInput(Unit) {\n\n            detectHorizontalDragGestures(\n                onHorizontalDrag = { change, dragAmount ->\n                    change.consume()\n\n                    // If the background is revealed, allow the user to swipe it back out to the right\n                    if (dragAmount > 0f) {\n                        if (isSwiped && offsetX < 0f) {\n                            if ((offsetX + dragAmount) > 0f) {\n                                offsetX = 0f\n                            } else {\n                                offsetX += dragAmount\n                            }\n                        }\n                        return@detectHorizontalDragGestures\n                    }\n\n                    // Store swipe offset from right to left\n                    offsetX += dragAmount\n                },\n                onDragEnd = {\n                    val absOffsetX = abs(offsetX) // compare using positive value\n\n                    // If the user has dragged the item more than half of the screen width, delete it\n                    if (absOffsetX >= screenWidthPx / 2 && absOffsetX < screenWidthPx) {\n                        offsetX = -(screenWidthPx)\n                        onDeleted()\n                    }\n\n                    // If the user has dragged the item more than a fifth of the screen width, swipe it to reveal background\n                    else if (absOffsetX >= screenWidthPx / 5 && absOffsetX < screenWidthPx / 2) {\n                        offsetX = -(60.dp.toPx())\n                        isSwiped = true\n                        onSwiped()\n                    } else {\n                        offsetX = 0f\n                    }\n                }\n            )\n        }\n    ) {\n        Row(\n            content = background, modifier = Modifier\n                .matchParentSize()\n                .clickable {\n                    if (isSwiped) {\n                        offsetX = -(screenWidthPx)\n                        onDeleted()\n                    }\n                }\n        )\n        Row(content = dismissContent,\n            modifier = Modifier.offset {\n                IntOffset(animatedOffset.roundToInt(), 0)\n            })\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun <T> CustomSwipeToDeleteContainer(\n    item: T, onDelete: (T) -> Unit, animationDuration: Int = 500, content: @Composable (T) -> Unit\n) {\n\n    var isRemoved by remember {\n        mutableStateOf(false)\n    }\n    var isActive by remember {\n        mutableStateOf(false)\n    }\n\n    LaunchedEffect(isRemoved) {\n        if (isRemoved) {\n            delay(animationDuration.toLong())\n            onDelete(item)\n        }\n    }\n\n    AnimatedVisibility(\n        visible = !isRemoved, exit = shrinkVertically(\n            animationSpec = tween(durationMillis = animationDuration), shrinkTowards = Alignment.Top\n        ) + fadeOut()\n    ) {\n        CustomSwipeToDismiss(\n            onSwiped = {\n                isActive = true\n            },\n            onDeleted = {\n                isRemoved = true\n            },\n            background = {\n                CustomDeleteBackground()\n            },\n            dismissContent = { content(item) },\n        )\n    }\n}\n@Composable\nfun CustomDeleteBackground(\n) {\n    Card(\n        modifier = Modifier\n            .padding(8.dp)\n            .fillMaxWidth(1f)\n            .height(80.dp), // Setter akkurat likt som WeatherBox, slik at den røde bakgrunnsfargen ikke er synlig når brukeren ikke swiper.\n        colors = CardDefaults.cardColors(Color.Red)\n    ) {\n        // Lager en Box for å plassere ikonet på høyre siden.\n        Box(\n            contentAlignment = Alignment.CenterEnd,\n            modifier = Modifier\n                .fillMaxSize() // Fyll hele Card\n        ) {\n            Icon(\n                imageVector = Icons.Default.Delete,\n                contentDescription = \"Slett\",\n                modifier = Modifier\n                    .padding(16.dp), // Padding inne i Box\n                tint = Color.White\n            )\n        }\n    }\n}\n\n@Composable\nfun WeatherBox(location: String,\n               combinedWeatherData: CombinedWeatherData?,\n               navController: NavController,\n               sjekkMinPosisjon:Boolean) {\n\n    val sted = combinedWeatherData?.bigDataCloud?.city\n    val placeName = combinedWeatherData?.enTurLocationName\n    val placeNameSplit = placeName?.split(\",\")\n    Box( modifier = Modifier\n        .fillMaxWidth(1f)\n        .background(Color(0xFF171729))\n    ){\n        Card(\n            modifier = Modifier\n                .padding(8.dp)\n                .fillMaxWidth(1f)\n                .heightIn(min = 80.dp)\n                .clickable {\n                    Log.d(\"Cordinates\", location)\n                    navController.navigate(\"infoStederScreen/${location}/${placeName}\")\n                },\n            colors = CardDefaults.cardColors(\n                containerColor = Color(0xFFCFE3F3).copy(alpha = 0.9f)\n            ),\n        ) {\n            Row(\n                modifier = Modifier\n                    .heightIn(min = 80.dp)\n                    .fillMaxWidth(),\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                decideWeatherIcon(icon = combinedWeatherData?.weatherData?.properties?.timeseries?.get(2)?.data?.next_1_hours?.summary?.get(\"symbol_code\") ?: \"\",\n                    size = 50,\n                    padding = 8)\n                Column(modifier = Modifier\n                    .weight(0.27f)\n                    .padding(10.dp)) {\n                    if (sjekkMinPosisjon && placeNameSplit != null ){\n                        Text(\n                            text = \"Min posisjon\",\n                            color = Color.Black,\n                            style = androidx.compose.ui.text.TextStyle(\n                                fontSize = 10.sp,\n                                fontWeight = FontWeight.Bold\n                            )\n                        )\n                    }else{\n                        if (placeNameSplit != null){\n                            Text(\n                                text = if(placeNameSplit.size > 1)\"\" + (placeNameSplit[1]) else \"Sted\",\n                                color = Color.Black,\n                                style = androidx.compose.ui.text.TextStyle(\n                                    fontSize = 10.sp,\n                                    fontWeight = FontWeight.Bold\n                                )\n                            )\n                        }\n                    }\n\n                    Text(\n                        text = placeNameSplit?.get(0) ?: \"\",\n                        color = Color.Black,\n                        style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                    )\n                }\n\n                val airTemperature = combinedWeatherData?.weatherData?.properties?.timeseries?.get(2)?.data?.instant?.details?.get(\"air_temperature\")\n                // Spacer(modifier = Modifier.weight(1f)) // Legger til horisontalt mellomrom\n                Column(modifier = Modifier\n                    .weight(0.21f),\n                    horizontalAlignment = Alignment.CenterHorizontally\n                ) {\n                    Text(\n                        text = \"Lufttemp:\",\n                        color = Color.Black,\n                        style = androidx.compose.ui.text.TextStyle(\n                            fontSize = 10.sp,\n                            fontWeight = FontWeight.Bold\n                        )\n                    )\n                    Text(\n                        text = \"${airTemperature}°C\",\n                        color = Color.Black,\n                        style = androidx.compose.ui.text.TextStyle(\n                            fontSize = 15.sp,\n                        )\n                    )\n                }\n                //Spacer(modifier = Modifier.weight(1f))\n                val seaTemperature = combinedWeatherData?.dataProjectionMain?.data?.get(0)?.data?.find{it.key == \"temperature\"}?.value\n                val doubleSeaTemperature = seaTemperature?.toDouble()\n                val roundSeaTemperature = doubleSeaTemperature?.let{ round(it)}\n                Column(modifier = Modifier\n                    .weight(0.21f),\n                    horizontalAlignment = Alignment.CenterHorizontally\n                ) {\n                    Text(\n                        text = \"Sjøtemp:\",\n                        color = Color.Black,\n                        style = androidx.compose.ui.text.TextStyle(\n                            fontSize = 10.sp,\n                            fontWeight = FontWeight.Bold\n                        )\n                    )\n                    Text(\n                        text = \"${roundSeaTemperature}°C\",\n                        color = Color.Black,\n                        style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                    )\n                }\n                // Spacer(modifier = Modifier.weight(1f))\n                val wind = combinedWeatherData?.weatherData?.properties?.timeseries?.get(2)?.data?.instant?.details?.get(\"wind_speed\")\n                val doubleWind = wind?.toDouble()\n                val roundWind = doubleWind?.let{ round(it)}\n                Column(modifier = Modifier\n                    .weight(0.21f),\n                    horizontalAlignment = Alignment.CenterHorizontally\n                ) {\n                    Text(\n                        text = \"Vind:\",\n                        color = Color.Black,\n                        style = androidx.compose.ui.text.TextStyle(\n                            fontSize = 10.sp,\n                            fontWeight = FontWeight.Bold\n                        ),\n\n                        )\n                    Text(\n                        text = \"${roundWind} m/s\",\n                        color = Color.Black,\n                        style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                    )\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun decideWeatherIcon(icon: String, size: Int, padding: Int){\n// Android studio discourages use of get R.drawable by string-name, so we choose to do it manually\n    val drawableResourceId = when (icon){\n        \"clearsky_day\" -> R.drawable.clearskyd\n        \"clearsky_night\" -> R.drawable.clearskyn\n        \"fair_day\" -> R.drawable.lightcloudd\n        \"fair_night\" -> R.drawable.lightcloudn\n        \"partlycloudy_day\" -> R.drawable.partlycloudyd\n        \"partlycloudy_night\" -> R.drawable.partlycloudyn\n        \"cloudy\" -> R.drawable.cloudy\n        \"rainshowers_day\" -> R.drawable.rainshowersd\n        \"rainshowers_night\" -> R.drawable.rainshowersn\n        \"rainshowersandthunder_day\" -> R.drawable.rainshowersandthunderd\n        \"rainshowersandthunder_night\" -> R.drawable.rainshowersandthundern\n        \"rain\" -> R.drawable.rain\n        \"heavyrain\" -> R.drawable.heavyrain\n        \"heavyrainandthunder\" -> R.drawable.heavyrainandthunder\n        \"fog\" -> R.drawable.fog\n        \"rainandthunder\" -> R.drawable.rainandthunder\n        \"lightrainshowersandthunder_day\" -> R.drawable.lightrainshowersandthunderd\n        \"lightrainshowersandthunder_night\" -> R.drawable.lightrainshowersandthundern\n        \"heavyrainshowersandthunder_day\" -> R.drawable.heavyrainshowersandthunderd\n        \"heavyrainshowersandthunder_night\" -> R.drawable.heavyrainshowersandthundern\n        \"lightrainandthunder\" -> R.drawable.lightrainandthunder\n        \"lightrainshowers_day\" -> R.drawable.lightrainshowersd\n        \"lightrainshowers_night\" -> R.drawable.lightrainshowersn\n        \"heavyrainshowers_day\" -> R.drawable.heavyrainshowersd\n        \"heavyrainshowers_night\" -> R.drawable.heavyrainshowersn\n        \"lightrain\" -> R.drawable.lightrain\n        else -> R.drawable.cloudy\n        // Set the rest to cloud since there are no more snow/sleet we dont include them, however they can be implemented in the future\n    }\n\n    Image(\n        painter = painterResource(drawableResourceId),\n        contentDescription = \"Thunderstorm Icon\",\n        modifier = Modifier\n            .size(size.dp) // Set the size of the image\n            .padding(padding.dp)\n    )\n}\n\n@Composable\nfun addButton(homeScreenViewModel: HomeScreenViewModel){\n    Card(\n        modifier = Modifier\n            .padding(8.dp)\n            .heightIn(min = 80.dp)\n            .fillMaxWidth(1f),\n        colors = CardDefaults.cardColors(\n            containerColor = Color(0xFFCFE3F3).copy(alpha = 0.9f)\n        )\n    ) {\n        Row(\n            modifier = Modifier\n                .heightIn(min = 80.dp)\n                .fillMaxWidth(),\n            horizontalArrangement = Arrangement.Center ,\n            verticalAlignment = Alignment.CenterVertically\n        ){\n            IconButton(\n                onClick = { homeScreenViewModel.toggleVisibility() }\n            )\n            {\n                Icon(\n                    imageVector = Icons.Filled.Add,\n                    contentDescription = \"Legg til\",\n                    modifier = Modifier.size(40.dp),\n                    tint = Color.Black\n                )\n\n            }\n        }\n    }\n}\n\n@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun myPopup(homeScreenViewModel: HomeScreenViewModel){\n    val context = LocalContext.current\n    val visible by homeScreenViewModel.isPopupVisible.collectAsState()\n    var newLocationName by remember{ mutableStateOf(\"\") }\n    val keyboardController = LocalSoftwareKeyboardController.current\n    val scrollState = rememberScrollState()\n    val locationUIState by homeScreenViewModel.locationUIState.collectAsState()\n\n    AnimatedVisibility(\n        visible = visible,\n        enter = slideInVertically(\n            initialOffsetY = { it },\n            animationSpec = tween(durationMillis = 300)\n        ) + fadeIn(animationSpec = tween(durationMillis = 300)),\n        exit = slideOutVertically(\n            targetOffsetY = { it },\n            animationSpec = tween(durationMillis = 300)\n        ) + fadeOut(animationSpec = tween(durationMillis = 300))\n    ) {\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n        ) {\n            Card (\n                shape = RectangleShape,\n                modifier = Modifier\n                    .align(Alignment.TopCenter)\n                    .fillMaxSize(),\n                colors = CardDefaults.cardColors(containerColor = Color(0xFF171729))\n            ){\n                Row(\n                    modifier = Modifier\n                ) {\n                    IconButton(\n                        onClick = {\n                            homeScreenViewModel.clearSuggestions()\n                            newLocationName = \"\"\n                            homeScreenViewModel.toggleVisibility()\n                        }\n                    )\n                    {\n                        Icon(\n                            imageVector = Icons.Filled.Clear,\n                            contentDescription = \"Tilbake\",\n                            modifier = Modifier.size(40.dp), // Juster størrelsen etter behov\n                            tint = Color.White // Juster fargen etter ønske\n                        )\n                    }\n                }\n                Row(\n                    horizontalArrangement = Arrangement.Center ,\n                    verticalAlignment = Alignment.CenterVertically,\n                    modifier = Modifier\n                        .fillMaxSize()\n                ){\n                    Column(\n                        modifier = Modifier\n                            .padding(top = 24.dp)\n                            .fillMaxSize(),\n                        horizontalAlignment = Alignment.CenterHorizontally,\n                    ) {\n                        TextField(\n                            value = newLocationName,\n                            onValueChange = {newLocationName = it\n                                homeScreenViewModel.fetchSuggestions(it)\n                                if (newLocationName.isNotEmpty()){\n                                    homeScreenViewModel.clearSuggestions()\n                                }\n\n                            },\n                            shape = RoundedCornerShape(20.dp),\n                            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                            keyboardActions = KeyboardActions(onDone = {\n                                if (newLocationName.isNotEmpty()){\n                                    keyboardController?.hide()\n                                }\n                            }\n                            ),\n                            modifier = Modifier\n                                .fillMaxWidth(0.9f),\n                            label = { Text(\"Legg til favorittsted!\")},\n                            colors = TextFieldDefaults.colors(\n                                focusedIndicatorColor = Color.Transparent,\n                                unfocusedIndicatorColor = Color.Transparent,\n                                disabledIndicatorColor = Color.Transparent\n                            )\n\n                        )\n                        Column(\n                            modifier = Modifier\n                                .verticalScroll(scrollState)\n                                .padding(3.dp)\n\n\n                        ) {\n                            locationUIState.suggestion?.forEach{suggestion->\n                                Text(\n                                    text = suggestion.properties.label,\n                                    modifier = Modifier\n                                        .background(Color(0xFFCFE3F3))\n                                        .fillMaxWidth(0.8f)\n                                        .clickable {\n                                            newLocationName = suggestion.properties.label\n                                            homeScreenViewModel.addLocationByName(\n                                                newLocationName, context\n                                            )\n                                            homeScreenViewModel.clearSuggestions()\n                                            homeScreenViewModel.toggleVisibility()\n                                            newLocationName = \"\"\n                                        }\n                                        .padding(8.dp)\n                                )\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt	
@@ -1,18 +1,15 @@
 package no.uio.ifi.in2000.prosjekt.ui.home
 
+
 import android.Manifest
 import android.app.Activity
 import android.content.Context
 import android.content.pm.PackageManager
-import android.content.res.Resources
 import android.location.Location
-import android.os.Build
 import android.util.Log
-import androidx.annotation.RequiresApi
 import androidx.compose.animation.AnimatedVisibility
 import androidx.compose.animation.core.animateFloatAsState
 import androidx.compose.animation.core.tween
-import androidx.compose.animation.expandVertically
 import androidx.compose.animation.fadeIn
 import androidx.compose.animation.fadeOut
 import androidx.compose.animation.shrinkVertically
@@ -26,8 +23,6 @@
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
-
-
 import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.RowScope
 import androidx.compose.foundation.layout.Spacer
@@ -39,7 +34,6 @@
 import androidx.compose.foundation.layout.offset
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
-import androidx.compose.foundation.layout.width
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.lazy.items
 import androidx.compose.foundation.rememberScrollState
@@ -52,7 +46,6 @@
 import androidx.compose.material.icons.filled.Clear
 import androidx.compose.material.icons.filled.Delete
 import androidx.compose.material.icons.filled.LocationOn
-import androidx.compose.material3.Button
 import androidx.compose.material3.Card
 import androidx.compose.material3.CardDefaults
 import androidx.compose.material3.ExperimentalMaterial3Api
@@ -62,29 +55,22 @@
 import androidx.compose.material3.Text
 import androidx.compose.material3.TextField
 import androidx.compose.material3.TextFieldDefaults
-import androidx.compose.material3.TopAppBar
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.LaunchedEffect
-import androidx.compose.runtime.SideEffect
 import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.key
 import androidx.compose.runtime.mutableFloatStateOf
-import androidx.compose.runtime.mutableIntStateOf
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
-
 import androidx.compose.runtime.setValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.ExperimentalComposeUiApi
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.graphics.RectangleShape
-import androidx.compose.ui.graphics.toArgb
-
 import androidx.compose.ui.input.pointer.pointerInput
 import androidx.compose.ui.layout.ContentScale
-import androidx.compose.ui.layout.onGloballyPositioned
 import androidx.compose.ui.platform.LocalConfiguration
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.platform.LocalDensity
@@ -92,27 +78,16 @@
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.input.ImeAction
-
 import androidx.compose.ui.unit.IntOffset
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
-import androidx.compose.ui.window.Popup
-import androidx.compose.ui.window.PopupProperties
 import androidx.core.app.ActivityCompat
-import androidx.core.view.WindowCompat
 import androidx.lifecycle.viewmodel.compose.viewModel
 import androidx.navigation.NavController
 import com.google.android.gms.location.FusedLocationProviderClient
 import com.google.android.gms.location.LocationServices
 import kotlinx.coroutines.delay
 import no.uio.ifi.in2000.prosjekt.R
-import java.time.Instant
-import java.time.LocalDateTime
-import java.time.ZoneId
-import java.time.ZonedDateTime
-import java.time.format.DateTimeFormatter
-
-
 import kotlin.math.abs
 import kotlin.math.round
 import kotlin.math.roundToInt
@@ -210,7 +185,7 @@
                 item{
                     if(weatherState.value.locationCombined != null){
                         WeatherBox(
-                            location = weatherState.value.locationCombined?.first!!,
+                            location = weatherState.value.locationCombined?.first ?: "",
                             combinedWeatherData = weatherState.value.locationCombined?.second,
                             navController = navController,true)
                     }}
@@ -499,7 +474,7 @@
 }
 
 @Composable
-fun WeatherBox(location: String,
+fun WeatherBox(location: String?,
                combinedWeatherData: CombinedWeatherData?,
                navController: NavController,
                sjekkMinPosisjon:Boolean) {
@@ -517,7 +492,6 @@
                 .fillMaxWidth(1f)
                 .heightIn(min = 80.dp)
                 .clickable {
-                    Log.d("Cordinates", location)
                     navController.navigate("infoStederScreen/${location}/${placeName}")
                 },
             colors = CardDefaults.cardColors(
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport co.yml.charts.axis.AxisData\nimport co.yml.charts.common.model.Point\nimport co.yml.charts.ui.linechart.LineChart\nimport co.yml.charts.ui.linechart.model.GridLines\nimport co.yml.charts.ui.linechart.model.IntersectionPoint\nimport co.yml.charts.ui.linechart.model.Line\nimport co.yml.charts.ui.linechart.model.LineChartData\nimport co.yml.charts.ui.linechart.model.LinePlotData\nimport co.yml.charts.ui.linechart.model.LineStyle\nimport co.yml.charts.ui.linechart.model.LineType\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPoint\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPopUp\nimport co.yml.charts.ui.linechart.model.ShadowUnderLine\n\n@Composable\nfun waterTempCard(infoStederOFViewModel: InfoStederOFViewModel, offsett: Int){\n    Card(modifier = Modifier.padding(10.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n        )) {\n        Column(\n            modifier = Modifier.fillMaxWidth() .background(MaterialTheme.colorScheme.surface),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Havtemperatur\",  // The text to display\n                style = MaterialTheme.typography.titleLarge,  // Example style, choose according to your design\n                modifier = Modifier  // Add some padding\n            )\n            waterTempChart(infoStederOFViewModel, offsett, \"sea_water_temperature\")  // Your existing chart composable\n        }\n    }\n}\n\n@Composable\nfun waterTempChart(infoStederOFViewModel: InfoStederOFViewModel, offsett: Int, variable: String){\n    val oceanForecastUiState by infoStederOFViewModel.oFUiState.collectAsState()\n    val isLoading by infoStederOFViewModel.isLoading.collectAsState()\n    val pointData = infoStederOFViewModel.linechartMaker(offsett, variable)\n\n    if(oceanForecastUiState.oceanForecastData?.properties?.timeseries?.isEmpty() == true){\n        return\n    }\n    val dateTimeString = oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(0+offsett)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = ((maxY - minY) / steps)\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->\n            when (offsett) {\n                0 -> when(infoStederOFViewModel.startHour) {\n                    22 ->if (i == 0)  \"    \" + \"%02d\".format(i+ 1) else \"%02d\".format(i+hour)\n                    23 -> if (i == 0)  \"    \" + \"%02d\".format(i) else \"%02d\".format(i+hour)\n                    else -> if (i == 0)  \"    \" + \"%02d\".format(i+hour) else \"%02d\".format(i+hour)\n                }\n                else -> if (i == 0) \"    \" + \"%02d\".format(i) else \"%02d\".format(i)\n            }\n        }\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(30.dp)\n        .axisOffset(0.dp)\n        .labelData {  i ->\n            \"%.1f°\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        alpha = 0.5f,\n                        color = Color(0xFF000000),\n                        lineType = LineType.Straight(isDotted = false)\n                    ),\n                    IntersectionPoint(\n                        MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),\n                    ShadowUnderLine(\n                        alpha = 0.5f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                Color(0xFFC4EAFF), // Light yellow\n                                Color(0xFF3B9AFF), // Vivid yellow\n                                Color(0xFF2663FF)  // Dark yellow\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),\n        isZoomAllowed = true\n    )\n    if(isLoading){\n        Box(modifier = Modifier\n            .fillMaxWidth()\n            .height(300.dp), contentAlignment = Alignment.Center) {\n            CircularProgressIndicator(modifier = Modifier)\n        }\n    } else {\n        LineChart(modifier = Modifier\n            .fillMaxWidth()\n            .height(300.dp),\n            lineChartData = lineChartData\n        )\n    }\n}\n\n@Composable\nfun landTempCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    Card(modifier = Modifier.padding(10.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n        )) {\n        Column(\n            modifier = Modifier.fillMaxWidth().background(MaterialTheme.colorScheme.surface),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Lufttemperatur\",  // The text to display\n                style = MaterialTheme.typography.titleLarge,  // Example style, choose according to your design\n                modifier = Modifier  // Add some padding\n            )\n            locationForecastTempChart(infostederLocationForecastVM, offsett, \"air_temperature\")  // Your existing chart composable\n        }\n    }\n}\n\n@Composable\nfun locationForecastTempChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int, variable: String){\n    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()\n    val pointData = infostederLocationForecastVM.linechartMaker(offsett, variable)\n    val isLoading by infostederLocationForecastVM.isLoading.collectAsState()\n\n    if(locationForecastUiState.weatherData?.properties?.timeseries?.isEmpty() == true){\n        return\n    }\n    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = ((maxY - minY) / steps).toInt()\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->\n            when (offsett) {\n                0 -> when(infostederLocationForecastVM.startHour) {\n                    22 ->if (i == 0)  \"    \" + \"%02d\".format(i+ 1) else \"%02d\".format(i+hour)\n                    23 -> if (i == 0)  \"    \" + \"%02d\".format(i) else \"%02d\".format(i+hour)\n                    else -> if (i == 0)  \"    \" + \"%02d\".format(i+hour) else \"%02d\".format(i+hour)\n                }\n                else -> if (i == 0) \"    \" + \"%02d\".format(i) else \"%02d\".format(i)\n            }\n        }\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(30.dp)\n        .axisOffset(0.dp)\n        .labelData {  i ->\n            \"%.1f°\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        alpha = 0.5f,\n                        color = Color(0xFF000000),\n                        lineType = LineType.Straight(isDotted = false)\n                    ),\n                    IntersectionPoint(\n                        MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),\n                    ShadowUnderLine(\n                        alpha = 0.5f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                Color(0xFFFFF9C4), // Light yellow\n                                Color(0xFFFFEB3B), // Vivid yellow\n                                Color(0xFFFFD726)  // Dark yellow\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),\n        isZoomAllowed = true\n    )\n    if(isLoading){\n        Box(modifier = Modifier\n            .fillMaxWidth()\n            .height(300.dp), contentAlignment = Alignment.Center) {\n            CircularProgressIndicator(modifier = Modifier)\n        }\n    } else {\n        LineChart(modifier = Modifier\n            .fillMaxWidth()\n            .height(300.dp),\n            lineChartData = lineChartData\n        )\n    }\n}\n\n@Composable\nfun windSpeedCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    Card(modifier = Modifier.padding(10.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n        )) {\n        Column(\n            modifier = Modifier.fillMaxWidth().background(MaterialTheme.colorScheme.surface),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Vind\",  // The text to display\n                style = MaterialTheme.typography.titleLarge,  // Example style, choose according to your design\n                modifier = Modifier  // Add some padding\n            )\n            locationForecastWindChart(infostederLocationForecastVM, offsett, \"wind_speed\")  // Your existing chart composable\n        }\n    }\n}\n@Composable\nfun locationForecastWindChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int, variable: String){\n    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()\n    val pointData = infostederLocationForecastVM.linechartMaker(offsett, variable)\n    val isLoaded by infostederLocationForecastVM.isLoading.collectAsState()\n\n    if(locationForecastUiState.weatherData?.properties?.timeseries?.isEmpty() == true){\n        return\n    }\n    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = ((maxY - minY) / steps)\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->\n            when (offsett) {\n                0 -> when(infostederLocationForecastVM.startHour) {\n                    22 ->if (i == 0)  \"    \" + \"%02d\".format(i+ 1) else \"%02d\".format(i+hour)\n                    23 -> if (i == 0)  \"    \" + \"%02d\".format(i) else \"%02d\".format(i+hour)\n                    else -> if (i == 0)  \"    \" + \"%02d\".format(i+hour) else \"%02d\".format(i+hour)\n                }\n                else -> if (i == 0) \"    \" + \"%02d\".format(i) else \"%02d\".format(i)\n            }\n        }\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(30.dp)\n        .axisOffset(0.dp)\n        .labelData {  i ->\n            \"%.1f m/s\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        alpha = 0.5f,\n                        color = Color(0xFF000000),\n                        lineType = LineType.Straight(isDotted = false)\n                    ),\n                    IntersectionPoint(\n                        MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),\n                    ShadowUnderLine(\n                        alpha = 0.5f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                Color(0xFFF5F5F5), // Light Gray (almost white)\n                                Color(0xFFE0E0E0), // Medium Gray\n                                Color(0xFFBDBDBD)  // Darker Gray\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),\n        isZoomAllowed = true\n    )\n    if(isLoaded){\n        Box(modifier = Modifier\n            .fillMaxWidth()\n            .height(300.dp), contentAlignment = Alignment.Center) {\n            CircularProgressIndicator(modifier = Modifier)\n        }\n    } else {\n        LineChart(modifier = Modifier\n            .fillMaxWidth()\n            .height(300.dp),\n            lineChartData = lineChartData\n        )\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt	
@@ -3,7 +3,6 @@
 import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
@@ -21,7 +20,6 @@
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.unit.dp
 import co.yml.charts.axis.AxisData
-import co.yml.charts.common.model.Point
 import co.yml.charts.ui.linechart.LineChart
 import co.yml.charts.ui.linechart.model.GridLines
 import co.yml.charts.ui.linechart.model.IntersectionPoint
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionManualScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.InstructionManual\n\nimport android.annotation.SuppressLint\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.foundation.lazy.grid.items\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Home\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.graphics.ColorFilter.Companion.tint\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavController\nimport com.mapbox.maps.extension.style.expressions.dsl.generated.image\nimport no.uio.ifi.in2000.prosjekt.R\nimport no.uio.ifi.in2000.prosjekt.ui.InfoScreen.InfoCard\n\n\n\ndata class InstructionIcons(\n    val list : List<InstructionUI> = listOf(\n        InstructionUI(\"0\", \"Hjemskjerm\", Icons.Filled.Home),\n        InstructionUI(\"1\", \"Kart\", Icons.Filled.LocationOn)\n    )\n)\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InstructionManualScreen(navController : NavController, instructionIcons: InstructionIcons = InstructionIcons()) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF191927)\n                ),\n                navigationIcon = {\n                    IconButton(\n                        onClick = { navController.popBackStack() }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color(0xFFBEDDF5)\n                        )\n                    }\n                },\n                title = {\n                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n                        Text(text = \"Hjelp\", color = Color(0xFFBEDDF5))\n                    }\n                },\n                actions = { // For å få teksten sentrert\n                    IconButton(\n                        onClick = {}\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color.Transparent\n                        )\n                        }\n                    }\n                )\n            }\n        )\n    { innerPadding ->\n        Column(\n            modifier = Modifier\n                .background(\n                    Color(0xFF171729)\n\n                )\n                .padding(top = 65.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        )\n        {\n            Spacer(modifier = Modifier.size(8.dp))\n\n            Icon(\n                imageVector = Icons.Filled.Info,\n                contentDescription = \"info\",\n                tint = Color(0xFFBEDDF5),\n                modifier = Modifier.size(100.dp)\n            )\n            Spacer(modifier = Modifier.size(8.dp))\n            Text(\n                \"Velkommen til Havblikk! Denne veiledningen vil hjelpe deg med å navigere gjennom appen og bruke dens funksjoner effektivt. Trykk på et av kortene under for å få mer informasjon om den skjermen.\",\n                textAlign = TextAlign.Center,\n                //style = MaterialTheme.typography.body1,\n                modifier = Modifier.padding(bottom = 16.dp),\n                color = Color(0xFFFFFFFF),\n                fontSize = 12.sp\n            )\n            LazyVerticalGrid(\n                modifier = Modifier.fillMaxSize(),\n                columns = GridCells.Fixed(1), // Use 2 columns instead of 4\n                horizontalArrangement = Arrangement.spacedBy(16.dp), // Space between columns\n                verticalArrangement = Arrangement.spacedBy(16.dp), // Space between rows\n                contentPadding = PaddingValues(16.dp), // Padding around the grid\n                content = {\n                    item {\n                        InstructionCard(navController, \"0\")\n\n                    }\n                    item{\n                        InstructionCard(navController, \"1\")\n                    }\n                    item{\n                        Text(\n                            \"Takk for at du bruker Havblikk. Vi håper denne veiledningen gjør din opplevelse med appen enklere og mer givende.\",\n                            textAlign = TextAlign.Center,\n                            //style = MaterialTheme.typography.body1,\n                            modifier = Modifier.padding(top = 16.dp),\n                            color = Color(0xFFFFFFFF),\n                            fontSize = 12.sp\n                        )\n                    }\n\n                }\n            )\n\n        }\n\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InstructionCard(navController : NavController, id: String, instructionUI: InstructionUI = InstructionIcons().list[id.toInt()]) {\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp), // Add padding to create space around the card\n        onClick = {\n            navController.navigate(\"InstructionCard/$id\")\n        }\n    ) {\n\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .size(75.dp)\n                .background(Color(0xFFBEDDF5))\n\n\n        )\n        {\n            Text(\n                text = instructionUI.name,\n                fontSize = 12.sp,\n                color = Color.Black,\n\n                fontFamily = FontFamily.SansSerif,\n                fontWeight = FontWeight.Bold\n                ,\n                modifier = Modifier\n                    .padding(8.dp)\n                    .align(Alignment.CenterHorizontally) // Padding inside the column for the text\n            )\n\n            Icon(\n                modifier = Modifier\n                    .align(Alignment.CenterHorizontally)\n                    .size(50.dp), imageVector = instructionUI.icon, contentDescription = \"Icon\")\n\n        }\n    }\n}\n\n\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@SuppressLint(\"UnusedMaterial3ScaffoldPaddingParameter\")\n@Composable\nfun MapUserManualScreen(navController: NavController) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFFBEDDF5)\n                ),\n                navigationIcon = {\n                    IconButton(\n                        onClick = { navController.popBackStack() }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color.Black\n                        )\n                    }\n                },\n                title = {\n                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n                        Text(text = \"Kartskjerm\", color = Color(0xFF191927))\n                    }\n                },\n                actions = { // For å få teksten sentrert\n                    IconButton(\n                        onClick = {}\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color.Transparent\n                        )\n                    }\n                }\n            )\n        },) { innerPadding->\n        LazyColumn(Modifier.padding(top = 65.dp),\n            verticalArrangement = Arrangement.spacedBy(10.dp),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            content = {\n                items(1){\n        Column(\n            modifier = Modifier.padding(16.dp),\n            verticalArrangement = Arrangement.spacedBy(10.dp),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center){\n                Text(\"Utforsk hvordan du bruker kartfunksjonene i appen.\",textAlign = TextAlign.Center, fontSize = 12.sp)\n            }\n            ManualStep(\n                title = \"Søke etter steder\",\n                description = \"Skriv inn i søkefeltet for å gå direkte til et sted på kartet.\",\n                imagePainter = painterResource(id = R.drawable.search),\n                fontWeight = FontWeight.Bold\n            )\n\n            ManualStep(\n                title = \"Gå til din posisjon\",\n                description = \"Trykk på posisjonsikonet for å sentrere kartet på din nåværende posisjon.\",\n                imagePainter = painterResource(id = R.drawable.mylocationgoogle),\n                fontWeight = FontWeight.Bold\n            )\n\n            ManualStep(\n                title = \"Se varsler\",\n                description = \"Trykk på varselikonet for å se alle aktive varsler langs kysten.\",\n                imagePainter = painterResource(id = R.drawable.warning),\n                fontWeight = FontWeight.Bold\n            )\n\n            ManualStep(\n                title = \"Utforske punkter\",\n                description = \"Trykk på et hvilket som helst punkt på kartet for å få mer informasjon om det. Detaljert informasjon inkluderer UV, værvarsel fremover i tid, og mer.\",\n                imagePainter = painterResource(id = R.drawable.marker),\n                fontWeight = FontWeight.Bold\n            )\n        }\n    }\n})\n    }\n}\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun HomeScreenManuals(navController: NavController){\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFFBEDDF5)\n                ),\n                navigationIcon = {\n                    IconButton(\n                        onClick = { navController.popBackStack() }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color.Black\n                        )\n                    }\n                },\n                title = {\n                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n                        Text(text = \"Hjemskjerm\", color = Color(0xFF191927))\n                    }\n                },\n                actions = { // For å få teksten sentrert\n                    IconButton(\n                        onClick = {}\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color.Transparent\n                        )\n                    }\n                }\n            )\n        },\n\n        ) { innerPadding ->\n        LazyColumn(Modifier.padding(top = 65.dp),\n            verticalArrangement = Arrangement.spacedBy(10.dp),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            content = {\n                items(1){\n\n            Column(\n            modifier = Modifier.padding(16.dp),\n            verticalArrangement = Arrangement.spacedBy(10.dp),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n                Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n                    Text(\"Utforsk hvordan du bruker hjemskjermfunksjonene i appen.\", textAlign = TextAlign.Center, fontSize = 12.sp)\n                }\n\n            ManualStep(\n                title = \"Legge til et nytt sted\",\n                description = \"Trykk på pluss-tegnet (+) som du finner på hovedskjermen under teksten 'Legg til dine favorittsteder!'. Deretter skriver du inn navnet på stedet du ønsker å legge til.\",\n                imagePainter = painterResource(id = R.drawable.add),\n                fontWeight = FontWeight.Bold\n            )\n\n            ManualStep(\n                title = \"Søke etter et sted\",\n                description = \"Bruk søkefeltet på toppen av hovedskjermen, skriv inn navnet på stedet du ønsker å finne.\",\n                imagePainter = painterResource(id = R.drawable.search),\n                fontWeight = FontWeight.Bold\n            )\n\n            ManualStep(\n                title = \"Administrere favorittsteder\",\n                description = \"Sveip kortet fra høyre til venstre for å vise en søppelbøtte-ikon. Du kan fortsette å dra for å slette eller trykke på ikonet for å bekrefte slettingen.\",\n                imagePainter = painterResource(id = R.drawable.trashcan),\n                fontWeight = FontWeight.Bold\n            )\n\n            ManualStep(\n                title = \"Posisjonsdeling\",\n                description = \"Hvis du har aktivert posisjonsdeling, vil du automatisk se en boks på skjermen som viser din nåværende posisjon. Etter du har gitt tillatelse vil du måtte trykke en gang til på posisjonsikonet for å få opp boksen på skjermen.\",\n                imagePainter = painterResource(id = R.drawable.marker),\n                fontWeight = FontWeight.Bold\n            )\n\n            Spacer(modifier = Modifier.size(16.dp))\n\n        }\n    }})\n    }\n\n}\n\n\n@Composable\nfun ManualStep(title: String, description: String, imagePainter: Painter, fontWeight : FontWeight = FontWeight.Normal) {\n    Card(\n        modifier = Modifier.fillMaxWidth(),\n        // elevation = 4.dp\n    ) {\n        Row(\n            modifier = Modifier.padding(16.dp),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Image(\n                painter = imagePainter,\n                contentDescription = title,\n                modifier = Modifier.size(40.dp)\n            )\n            Spacer(Modifier.width(16.dp))\n            Column {\n                Text(title, fontWeight = fontWeight, fontSize = 12.sp)\n                Text(description, fontSize = 12.sp)\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionManualScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionManualScreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionManualScreen.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionManualScreen.kt	
@@ -17,7 +17,6 @@
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.lazy.grid.GridCells
 import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
-import androidx.compose.foundation.lazy.grid.items
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.ArrowBack
 import androidx.compose.material.icons.filled.Home
@@ -35,8 +34,6 @@
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.graphics.ColorFilter
-import androidx.compose.ui.graphics.ColorFilter.Companion.tint
 import androidx.compose.ui.graphics.painter.Painter
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.font.FontFamily
@@ -45,10 +42,7 @@
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import androidx.navigation.NavController
-import com.mapbox.maps.extension.style.expressions.dsl.generated.image
 import no.uio.ifi.in2000.prosjekt.R
-import no.uio.ifi.in2000.prosjekt.ui.InfoScreen.InfoCard
-
 
 
 data class InstructionIcons(
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_07_05_2024,_12_04_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_07_05_2024,_12_04_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_07_05_2024,_12_04_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_07_05_2024,_12_04_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,2686 +0,0 @@
-Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.BorderStroke\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.IntrinsicSize\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.selection.toggleable\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Favorite\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.BottomAppBar\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Divider\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Switch\nimport androidx.compose.material3.SwitchDefaults\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Popup\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.rememberNavController\nimport co.yml.charts.axis.AxisData\nimport co.yml.charts.common.model.Point\nimport co.yml.charts.ui.linechart.LineChart\nimport co.yml.charts.ui.linechart.model.GridLines\nimport co.yml.charts.ui.linechart.model.IntersectionPoint\nimport co.yml.charts.ui.linechart.model.Line\nimport co.yml.charts.ui.linechart.model.LineChartData\nimport co.yml.charts.ui.linechart.model.LinePlotData\nimport co.yml.charts.ui.linechart.model.LineStyle\nimport co.yml.charts.ui.linechart.model.LineType\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPoint\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPopUp\nimport co.yml.charts.ui.linechart.model.ShadowUnderLine\nimport no.uio.ifi.in2000.prosjekt.Data.Ukedag\nimport no.uio.ifi.in2000.prosjekt.R\nimport no.uio.ifi.in2000.prosjekt.ui.Map.ExpandableCard\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MetAlersUiState\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MetAlertViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.Map.formatToNorwegianTime\nimport no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme\nimport java.util.Calendar\nimport java.util.Locale\nimport kotlin.math.pow\nimport kotlin.math.round\nimport kotlin.math.roundToInt\n\n@RequiresApi(Build.VERSION_CODES.O)\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalComposeUiApi::class)\n@Composable\nfun InfoStederScreen(coordinate: String, navController: NavController, infoStederScreenViewModel : InfoStederViewModel = InfoStederViewModel(coordinate),\n                   infoStederLFViewModel: InfoStederLFViewModel = InfoStederLFViewModel(coordinate), metAlertViewModel: MetAlertViewModel = viewModel()\n) {\n    val liste = coordinate.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    val infoSted by infoStederScreenViewModel.havvarselUIState.collectAsState()\n    val metAlert by metAlertViewModel.MAUiState.collectAsState()\n    val antallVarsler = metAlert.MetAlertsCoordinate?.features?.size\n\n    val iconTint = when {\n        antallVarsler == 0 || antallVarsler == null -> Color.Transparent\n        else -> Color.Yellow\n    }\n\n    metAlertViewModel.getNewDataCoords(lat,lon)\n    //val keyboardController = LocalSoftwareKeyboardController.current\n    var text by remember { mutableStateOf(\"\") } //cordinate = \"60.9612, 5.3221\"\n    var selectedOption by remember { mutableStateOf(\"I dag\") }\n    val correctHours = when (selectedOption) {\n        \"I dag\" -> listOf(6,12,18,24)\n        \"I morgen\" -> listOf(30,36,42,48)\n        else -> listOf(54,60,66,72)\n    }\n    var selectedOptionSwitch by remember { mutableStateOf(\"Tabell\") }\n    val offsett = when (selectedOption) {\n        \"I dag\" -> 0\n        \"I morgen\" -> 24\n        else -> 48\n    }\n    val calendar = Calendar.getInstance()\n    val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)\n    val toDagerFrem = Ukedag.entries[(dayOfWeek+1)%7]\n\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF1F3468),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                        Text(\"sted\", color = Color.White)\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color.White\n                        )\n                    }\n                },\n\n                actions = {\n                    IconButton(onClick = { metAlertViewModel.togglePopupVisibility() }) {\n                        Icon(\n                            painter = painterResource(id = R.drawable.warning), // Reference your drawable here\n                            contentDescription = \"Custom Icon\", // Provide an appropriate description\n                            tint = iconTint, // Set the tint color if needed,\n                            modifier = Modifier.size(30.dp)\n                        )\n                    }\n                }\n            )\n        },\n        bottomBar = {\n            BottomAppBar(\n                containerColor = Color(0xFFCFE3F3) // Matching the top bar color\n            ){\n                Row (\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .padding(horizontal = 2.dp),\n                    horizontalArrangement = Arrangement.SpaceBetween\n                ) {\n\n                    MultiToggleButton(currentSelection = selectedOptionSwitch, toggleStates = listOf(\"Tabell\", \"Graf\")) {newSelecter ->\n                        selectedOptionSwitch = newSelecter\n                    }\n                    MultiToggleButton(currentSelection = selectedOption, toggleStates = listOf(\"Idag\", \"I morgen\",\n                        toDagerFrem.name\n                    )) { newselectedOption ->\n                        selectedOption = newselectedOption\n                    }\n                }\n            }\n        }\n    ) { innerPadding ->\n        Column(Modifier.fillMaxSize()) {\n            if(antallVarsler != null && antallVarsler > 0){\n                metAlerts(metAlertViewModel = metAlertViewModel, antallVarsler = antallVarsler)\n            }\n            LazyColumn(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .background(Color(0xFF1F3468))\n                    .padding(innerPadding),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.spacedBy(20.dp),\n                contentPadding = PaddingValues(20.dp)\n            ) {\n                item {\n                    if(selectedOptionSwitch == \"Graf\"){\n                        waterTempCard(\n                            infoStederScreenViewModel = infoStederScreenViewModel,\n                            offsett = offsett)\n                    } else {\n                        ExpandableWeatherCard(infoStederScreenViewModel = infoStederScreenViewModel, nr = 1)\n                    }\n                }\n                item {\n                    if(selectedOptionSwitch == \"Graf\") {\n                        landTempCard(\n                            infostederLocationForecastVM = infoStederLFViewModel,\n                            offsett = offsett\n                        )\n                    } else {\n                        ExpandableWeatherCardLand(infoStederLFViewModel = infoStederLFViewModel, nr = 1, selectedOption)\n                    }\n                }\n                item {\n                    if(selectedOptionSwitch == \"Graf\") {\n                        windSpeedCard(\n                            infostederLocationForecastVM = infoStederLFViewModel,\n                            offsett = offsett\n                        )\n                    } else {\n\n                    }\n                }\n            }\n        }\n    }\n}\n@Composable\nfun myButton(dag : String, selectedOption: String, onSelectedOptionChanged: (String) -> Unit){\n    Button(onClick = {\n        onSelectedOptionChanged(dag)\n    },\n        shape = RectangleShape,\n        border = BorderStroke(1.dp, Color.White),\n        modifier = Modifier) {\n        Text(text = dag)\n    }\n}\n\n@Composable\nfun waterTempCard(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){\n    Card(modifier = Modifier) {\n        Column(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Sjø-temperatur\",  // The text to display\n                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design\n                modifier = Modifier.padding()  // Add some padding\n            )\n            waterTempChart(infoStederScreenViewModel = infoStederScreenViewModel, offsett)\n        }\n    }\n}\n\n@Composable\nfun landTempCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    Card(modifier = Modifier,\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n        )) {\n        Column(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Luft-temperatur\",  // The text to display\n                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design\n                modifier = Modifier  // Add some padding\n            )\n            locationForecastTempChart(infostederLocationForecastVM, offsett)  // Your existing chart composable\n        }\n    }\n}\n\n@Composable\nfun windSpeedCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    Card(modifier = Modifier,\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n        )) {\n        Column(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Vind\",  // The text to display\n                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design\n                modifier = Modifier  // Add some padding\n            )\n            locationForecastWindChart(infostederLocationForecastVM, offsett)  // Your existing chart composable\n        }\n    }\n}\n@Composable\nfun MyLazyRow(ukedag : Ukedag?, selectedOption : String, onSelectedOptionChanged: (String) -> Unit) {\n    LazyRow(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {\n        items(3) { index ->\n            val buttonText = when (index) {\n                0 -> \"I dag\"\n                1 -> \"I morgen\"\n                2 -> if(ukedag != null) {ukedag.name} else {\"Overmorgen\"}\n                else -> \"\"\n            }\n            myButton(dag = buttonText, selectedOption = selectedOption, onSelectedOptionChanged = onSelectedOptionChanged)\n        }\n    }\n}\n@Composable\nfun MultiToggleButton(\n    currentSelection: String,\n    toggleStates: List<String>,\n    onToggleChange: (String) -> Unit\n) {\n    val selectedTint = MaterialTheme.colorScheme.primary\n    val unselectedTint = Color.White\n\n    Row(modifier = Modifier\n        .height(IntrinsicSize.Min)\n        .border(BorderStroke(1.dp, Color.LightGray))) {\n        toggleStates.forEachIndexed { index, toggleState ->\n            val isSelected = currentSelection.lowercase() == toggleState.lowercase()\n            val backgroundTint = if (isSelected) selectedTint else unselectedTint\n            val textColor = if (isSelected) Color.White else Color.Unspecified\n\n            if (index != 0) {\n                Divider(\n                    color = Color.LightGray,\n                    modifier = Modifier\n                        .fillMaxHeight()\n                        .width(1.dp)\n                )\n            }\n\n            Row(\n                modifier = Modifier\n                    .background(backgroundTint)\n                    .padding(vertical = 6.dp, horizontal = 8.dp)\n                    .toggleable(\n                        value = isSelected,\n                        enabled = true,\n                        onValueChange = { selected ->\n                            if (selected) {\n                                onToggleChange(toggleState)\n                            }\n                        })\n            ) {\n                Text(toggleState.toCapital(), color = textColor, modifier = Modifier.padding(4.dp))\n            }\n        }\n    }\n}\n\nfun String.toCapital(): String {\n    return this.lowercase().replaceFirstChar { it.titlecase(Locale.getDefault())} }\n\n@Composable\nfun RectangleSwitch() {\n    var isChecked by remember { mutableStateOf(false) }\n    val buttonText = if (isChecked) \"ON\" else \"OFF\"\n    val buttonColor = if (isChecked) Color.Green else Color.Gray\n\n    Button(\n        onClick = { isChecked = !isChecked },\n        colors = ButtonDefaults.buttonColors(), // Set the background color based on the state\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp) // Customize padding\n    ) {\n        Text(text = buttonText, color = Color.White) // Text color is white for better contrast\n    }\n}\n\n\nfun avrund(value: Double, precision: Int): Double {\n    val scale = 10.0.pow(precision)\n    return round(value * scale) / scale\n}\n\nfun hentVerdiTemperature(infoSted: HavvarselUIState, index : Int) : Float{\n    val a = infoSted.temperatureProjection?.variables?.get(0)?.data?.get(index)?.value\n    val b = a?.toDouble()\n    val c = b?.let { avrund(it,1) }\n    return if (c != null) {\n        c.toFloat()\n    } else {\n        0f\n    }\n}\n\n@Composable\nfun waterTempChart(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){\n    val infoSted by infoStederScreenViewModel.havvarselUIState.collectAsState()\n    val pointData = listOf(\n        Point(0f, hentVerdiTemperature(infoSted, 0+offsett)),\n        Point(1f, hentVerdiTemperature(infoSted, 1+offsett)),\n        Point(2f, hentVerdiTemperature(infoSted, 2+offsett)),\n        Point(3f, hentVerdiTemperature(infoSted, 3+offsett)),\n        Point(4f, hentVerdiTemperature(infoSted, 4+offsett)),\n        Point(5f, hentVerdiTemperature(infoSted, 5+offsett)),\n        Point(6f, hentVerdiTemperature(infoSted, 6+offsett)),\n        Point(7f, hentVerdiTemperature(infoSted, 7+offsett)),\n        Point(8f, hentVerdiTemperature(infoSted, 8+offsett)),\n        Point(9f, hentVerdiTemperature(infoSted, 9+offsett)),\n        Point(10f, hentVerdiTemperature(infoSted, 10+offsett)),\n        Point(11f, hentVerdiTemperature(infoSted, 11+offsett)),\n        Point(12f, hentVerdiTemperature(infoSted, 12+offsett)),\n        Point(13f, hentVerdiTemperature(infoSted, 13+offsett)),\n        Point(14f, hentVerdiTemperature(infoSted, 14+offsett)),\n        Point(15f, hentVerdiTemperature(infoSted, 15+offsett)),\n        Point(16f, hentVerdiTemperature(infoSted, 16+offsett)),\n        Point(17f, hentVerdiTemperature(infoSted, 17+offsett)),\n        Point(18f, hentVerdiTemperature(infoSted, 18+offsett)),\n        Point(19f, hentVerdiTemperature(infoSted, 19+offsett)),\n        Point(20f, hentVerdiTemperature(infoSted, 20+offsett)),\n        Point(21f, hentVerdiTemperature(infoSted, 21+offsett)),\n        Point(22f, hentVerdiTemperature(infoSted, 22+offsett)),\n        Point(23f, hentVerdiTemperature(infoSted, 23+offsett))\n    )\n    val pointsData: List<Point> =\n        listOf(Point(0f, 20f), Point(1f, 22f), Point(2f, 23.1f), Point(3f, 22.8f), Point(4f, 25f),Point(5f, 24.3f),Point(6f, 24.5f),Point(7f, 25f),Point(8f, 27.2f))\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = (maxY - minY) / steps\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->\n            \"%02d\".format(i) }\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(20.dp)\n        .labelData {  i ->\n            \"%.1f°\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        color = MaterialTheme.colorScheme.tertiary,\n                        lineType = LineType.SmoothCurve(isDotted = false),\n\n                        ),\n                    IntersectionPoint(\n                        color = MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.tertiary),\n                    ShadowUnderLine(\n                        alpha = 0.9f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                MaterialTheme.colorScheme.inversePrimary,\n                                Color.Transparent\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        containerPaddingEnd = 40.dp,\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant)\n    )\n\n    LineChart(modifier = Modifier\n        .height(300.dp),\n        lineChartData = lineChartData\n    )\n}\n\n@Composable\nfun waterTempTable(){\n}\n@Composable\nfun ExpandableWeatherCard(infoStederScreenViewModel: InfoStederViewModel, nr : Int) {\n    val havarselUiState by infoStederScreenViewModel.havvarselUIState.collectAsState()\n    var expanded by remember { mutableStateOf (false) }\n    val first by remember {\n        mutableStateOf(\"00-06\")\n    }\n    val second by remember {\n        mutableStateOf(\"06-12\")\n    }\n    val third by remember {\n        mutableStateOf(\"12-18\")\n    }\n    val fourth by remember {\n        mutableStateOf(\"18-24\")\n    }\n//    val dateTimeString = \"\"\n//    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n//\n//    val pointData = when (offsett) {\n//        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,\"air_temperature\")) }\n//        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, \"air_temperature\")) }\n//    }\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n    val darkGrayGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFD1CECE), // Dark gray\n            Color(0xFFB6ACAC), // Darker gray\n            Color(0xFFFCF3F3)  // Very dark gray (almost black)\n        )\n    )\n    Card(\n        shape = RoundedCornerShape(8.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 12.dp,\n            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(darkGrayGradient)){\n            Column() {\n                Text(text = \"I dag\")\n                if(expanded){\n                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {\n                        Text(text = \"Tid\")\n                        Text(text = \"Temp.\")\n                        Text(text = \"Strøm\")\n                        Text(text = \"Salt\")\n                    }\n                }\n                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()){\n                    Column(modifier = Modifier\n                        .weight(1f)\n                        .padding(horizontal = 16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally) {\n                        Text(\n                            text = \"result\",\n                            style = MaterialTheme.typography.titleMedium,\n                            modifier = Modifier.padding(12.dp),\n                            textAlign = TextAlign.Center,\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\n                            text = \"Test\",\n                            style = MaterialTheme.typography.bodyMedium,\n                            modifier = Modifier.padding(8.dp),\n                            textAlign = TextAlign.Center\n                        )\n                    }\n                }\n                if (expanded) {\n                    Text(text = \"TESTETEST\")\n                }\n                Row(verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally\n                    modifier = Modifier.fillMaxWidth()) {\n                    Text(text = \"Time for time\")\n                    Image(painter = toggleIconPainter, contentDescription = \"Expand\", modifier = Modifier.size(30.dp), Alignment.CenterStart)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun locationForecastTempTable(){\n    Card {\n\n    }\n}\n\n@Composable\nfun ExpandableWeatherCardLand(infoStederLFViewModel: InfoStederLFViewModel, nr : Int, dag : String) {\n    val locationForecastUiState by infoStederLFViewModel.lFUiState.collectAsState()\n    var expanded by remember { mutableStateOf (false) }\n    val first = when (expanded) {\n        true -> \"00\"\n        else -> \"00-06\"\n    }\n    val second = when (expanded) {\n        true -> \"01\"\n        else -> \"06-12\"\n    }\n    val third = when (expanded) {\n        true -> \"02\"\n        else -> \"12-18\"\n    }\n    val fourth = when (expanded) {\n        true -> \"03\"\n        else -> \"18-24\"\n    }\n    val t1 = when (expanded) {\n        true -> 0\n        else -> 0\n    }\n    val t2 = when (expanded) {\n        true -> 1\n        else -> 6\n    }\n    val t3 = when (expanded) {\n        true -> 2\n        else -> 12\n    }\n    val t4 = when (expanded) {\n        true -> 3\n        else -> 18\n    }\n//    val dateTimeString = \"\"\n//    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n//    val pointData = when (nr) {\n//        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,\"air_temperature\")) }\n//        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, \"air_temperature\")) }\n//    }\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n    val darkGrayGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFFFFF),\n            Color(0xFFFFFFFF),\n            Color(0xFFFFFFFF)\n        )\n    )\n    Card(\n        shape = RoundedCornerShape(5.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 20.dp,\n            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(darkGrayGradient)){\n            Column() {\n                Text(text = dag,style = MaterialTheme.typography.titleLarge,)\n                if(expanded){\n                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {\n                        Text(text = \"Tid\")\n                        Text(text = \"Temp\")\n                        Text(text = \"Vind\")\n                        Text(text = \"hPa\")\n                    }\n                }\n                Column {\n                    lFCard(tid = first, lf = locationForecastUiState, nr = t1)\n                    lFCard(tid = second, lf = locationForecastUiState, nr = t2)\n                    lFCard(tid = third, lf = locationForecastUiState, nr = t3)\n                    lFCard(tid = fourth, lf = locationForecastUiState, nr = t4)\n                    if (expanded) {\n                        repeat(20) { index ->\n                            lFCard(tid = \"%02d\".format(index+4), lf = locationForecastUiState, nr = index+4)\n                        }\n                    }\n                }\n                Row(verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally\n                    modifier = Modifier.fillMaxWidth()) {\n                    Text(text = \"Time for time\")\n                    Image(painter = toggleIconPainter, contentDescription = \"Expand\", modifier = Modifier.size(30.dp), Alignment.CenterStart)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun lFCard(tid: String, lf : locationForecastUiState, nr: Int){\n    val pureBlackGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFF000000), // Pure black\n            Color(0xFF000000), // Pure black\n            Color(0xFF000000)  // Pure black\n        )\n    )\n    Card(\n        shape = RectangleShape,\n        border = BorderStroke(0.5.dp, pureBlackGradient),\n        modifier = Modifier.height(30.dp)\n    ) {\n        Row(modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceBetween)\n        {\n            Text(text = tid)\n            Text(text = lf.weatherData?.properties?.timeseries?.get(nr)?.data?.instant?.details?.get(\"air_temperature\").toString())\n            Text(text = lf.weatherData?.properties?.timeseries?.get(nr)?.data?.instant?.details?.get(\"wind_speed\").toString())\n            Text(text = lf.weatherData?.properties?.timeseries?.get(nr)?.data?.instant?.details?.get(\"air_pressure_at_sea_level\").toString())\n        }\n    }\n}\n\nfun determineSteps(diff: Float): Int {\n    return when {\n        diff in 0.1..3.0 -> 10 // This will convert 0.1 to 1 step, 0.2 to 2 steps, etc.\n//        diff in 1.1..2.0 -> ((diff * 10)-10).toInt()\n//        diff in 2.1..3.0 -> ((diff * 10)-20).toInt()\n        else -> diff.toInt()  // For values 1 and above, use the integer part as the step count\n    }\n}\n\n@Composable\nfun locationForecastTempChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()\n    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val pointData = when (offsett) {\n        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,\"air_temperature\")) }\n        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, \"air_temperature\")) }\n    }\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = ((maxY - minY) / steps).toInt()\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->  when (offsett) {\n            0 -> \"%02d\".format(i+hour)\n            else -> \"%02d\".format(i) }}\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(30.dp)\n        .axisOffset(0.dp)\n        .labelData {  i ->\n            \"%.1f°\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        alpha = 0.5f,\n                        color = Color(0xFF000000),\n                        lineType = LineType.Straight(isDotted = false)\n                    ),\n                    IntersectionPoint(\n                        MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),\n                    ShadowUnderLine(\n                        alpha = 0.5f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                Color(0xFFFFF9C4), // Light yellow\n                                Color(0xFFFFEB3B), // Vivid yellow\n                                Color(0xFFFFD726)  // Dark yellow\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),\n        isZoomAllowed = true\n    )\n\n    LineChart(modifier = Modifier\n        .fillMaxWidth()\n        .height(300.dp),\n        lineChartData = lineChartData\n    )\n}\n\n@Composable\nfun locationForecastWindChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()\n    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val pointData = when (offsett) {\n        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,\"wind_speed\")) }\n        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, \"wind_speed\")) }\n    }\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = ((maxY - minY) / steps)\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->  when (offsett) {\n            0 -> \"%02d\".format(i+hour)\n            else -> \"%02d\".format(i) }}\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(30.dp)\n        .axisOffset(0.dp)\n        .labelData {  i ->\n            \"%.1f m/s\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        alpha = 0.5f,\n                        color = Color(0xFF000000),\n                        lineType = LineType.Straight(isDotted = false)\n                    ),\n                    IntersectionPoint(\n                        MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),\n                    ShadowUnderLine(\n                        alpha = 0.5f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                Color(0xFFF5F5F5), // Light Gray (almost white)\n                                Color(0xFFE0E0E0), // Medium Gray\n                                Color(0xFFBDBDBD)  // Darker Gray\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),\n        isZoomAllowed = true\n    )\n\n    LineChart(modifier = Modifier\n        .fillMaxWidth()\n        .height(300.dp),\n        lineChartData = lineChartData\n    )\n}\n\n@Composable\nfun metAlerts(metAlertViewModel: MetAlertViewModel, antallVarsler : Int){\n    val metAlertState by metAlertViewModel.MAUiState.collectAsState()\n    val isPopupVisible by metAlertViewModel.isPopupVisible.collectAsState()\n    if(isPopupVisible){\n        Popup(\n            alignment = Alignment.TopCenter,\n            onDismissRequest = { metAlertViewModel.togglePopupVisibility() }, // Close popup when dismissed\n        ) {\n            Column(modifier = Modifier.fillMaxWidth()) {\n                Text(text = \"Ingen farevarsler funnet for sjøen!\")\n            }\n            LazyColumn(\n                modifier = Modifier\n                    .background(Color.Black.copy(alpha = 0.7f))\n                    .padding(16.dp)\n                    .fillMaxHeight(1f)\n                    .clickable { metAlertViewModel.togglePopupVisibility() }\n            ) {\n                items(antallVarsler){ metalertNr ->\n                    ExpandableCard2(metAlertState, metalertNr)\n                }\n            }\n            IconButton(\n                onClick = { metAlertViewModel.togglePopupVisibility() },\n                modifier = Modifier\n                    .size(30.dp)  // Set the size of the IconButton to be small\n            ) {\n                Icon(\n                    imageVector = Icons.Default.Clear,\n                    contentDescription = \"Close\",\n                    tint = Color.White\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun ExpandableCard2(metAlertState: MetAlersUiState, nr : Int) {\n    var expanded by remember { mutableStateOf (false) }\n    val inputString = (metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.title).toString()\n    val parts = inputString.split(\",\")\n    val result = parts.take(3).joinToString(\",\").trim()\n\n    val warning = painterResource(id = R.drawable.warning)\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n    val fareStart = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.timeinterval?.interval?.get(0)\n        ?.let { formatToNorwegianTime(it) }\n    val fareSlutt = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.timeinterval?.interval?.get(1)\n        ?.let { formatToNorwegianTime(it) }\n\n    val yellowGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFF9C4), // Light yellow\n            Color(0xFFFFEB3B), // Vivid yellow\n            Color(0xFFFFD726)  // Dark yellow\n        )\n    )\n    val redGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFCDD2), // Light red\n            Color(0xFFE57373), // Medium red\n            Color(0xFFD32F2F)  // Dark red\n        )\n    )\n    val orangeGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFE0B2), // Light orange\n            Color(0xFFFFB74D), // Medium orange\n            Color(0xFFFB8C00)  // Dark orange\n        )\n    )\n    val greenGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFA5D6A7), // Light green\n            Color(0xFF66BB6A), // Medium green\n            Color(0xFF2E7D32)  // Dark green\n        )\n    )\n    val matrixColor = when(\"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.riskMatrixColor}\") {\n        \"Red\" -> redGradient\n        \"Orange\" -> orangeGradient\n        \"Yellow\" -> yellowGradient\n        else -> greenGradient // Default color\n    }\n    Card(\n        shape = RoundedCornerShape(8.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n            pressedElevation = 8.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 8.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 8.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(matrixColor)){\n            Column() {\n                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()){\n                    Image(painter = warning, contentDescription = \"Warning\", modifier = Modifier.size(40.dp), Alignment.Center)\n                    Column(modifier = Modifier\n                        .weight(1f)\n                        .padding(horizontal = 16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally) {\n                        Text(\n                            text = result,\n                            style = MaterialTheme.typography.titleMedium,\n                            modifier = Modifier.padding(12.dp),\n                            textAlign = TextAlign.Center,\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\n                            text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.riskMatrixColor}\",\n                            style = MaterialTheme.typography.bodyMedium,\n                            modifier = Modifier.padding(8.dp),\n                            textAlign = TextAlign.Center\n                        )\n                    }\n                    Image(painter = toggleIconPainter, contentDescription = \"Expand\", modifier = Modifier.size(40.dp), Alignment.CenterStart)\n                }\n                if (expanded) {\n                    Text(\n                        text = \"Anbefalinger:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.instruction}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Beskrivelse:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.description}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Konsekvenser:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.consequences}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Område:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.area}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Tidsperiode:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"Fra $fareStart \\nTil $fareSlutt\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                }\n            }\n        }\n    }\n}\n\nfun hentVerdiLocationForecast(locForecast: locationForecastUiState, index : Int, param: String) : Float{\n    val a = locForecast.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(param)\n    val b = a?.let { avrund(it,1) }\n    return b?.roundToInt()?.toFloat() ?: 0f\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt
---- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt	(revision 045765b6bceb7e553ade4362819cee59ca38e121)
-+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt	(date 1715076224685)
-@@ -13,6 +13,7 @@
- import androidx.compose.foundation.layout.IntrinsicSize
- import androidx.compose.foundation.layout.PaddingValues
- import androidx.compose.foundation.layout.Row
-+import androidx.compose.foundation.layout.RowScope
- import androidx.compose.foundation.layout.Spacer
- import androidx.compose.foundation.layout.fillMaxHeight
- import androidx.compose.foundation.layout.fillMaxSize
-@@ -23,10 +24,12 @@
- import androidx.compose.foundation.layout.width
- import androidx.compose.foundation.lazy.LazyColumn
- import androidx.compose.foundation.lazy.LazyRow
-+import androidx.compose.foundation.lazy.itemsIndexed
- import androidx.compose.foundation.selection.toggleable
- import androidx.compose.foundation.shape.CircleShape
- import androidx.compose.foundation.shape.RoundedCornerShape
- import androidx.compose.material.icons.Icons
-+import androidx.compose.material.icons.filled.Add
- import androidx.compose.material.icons.filled.ArrowBack
- import androidx.compose.material.icons.filled.Clear
- import androidx.compose.material.icons.filled.Favorite
-@@ -39,6 +42,7 @@
- import androidx.compose.material3.BottomAppBar
- import androidx.compose.material3.Button
- import androidx.compose.material3.ButtonDefaults
-+import androidx.compose.material3.CircularProgressIndicator
- import androidx.compose.material3.Divider
- import androidx.compose.material3.MaterialTheme
- import androidx.compose.material3.Scaffold
-@@ -56,9 +60,12 @@
- import androidx.compose.ui.Alignment
- import androidx.compose.ui.ExperimentalComposeUiApi
- import androidx.compose.ui.Modifier
-+import androidx.compose.ui.draw.rotate
- import androidx.compose.ui.graphics.Brush
- import androidx.compose.ui.graphics.Color
- import androidx.compose.ui.graphics.RectangleShape
-+import androidx.compose.ui.layout.ContentScale
-+import androidx.compose.ui.platform.LocalContext
- import androidx.compose.ui.res.painterResource
- import androidx.compose.ui.text.font.FontWeight
- import androidx.compose.ui.text.style.TextAlign
-@@ -81,6 +88,8 @@
- import co.yml.charts.ui.linechart.model.SelectionHighlightPoint
- import co.yml.charts.ui.linechart.model.SelectionHighlightPopUp
- import co.yml.charts.ui.linechart.model.ShadowUnderLine
-+import coil.compose.AsyncImage
-+import coil.request.ImageRequest
- import no.uio.ifi.in2000.prosjekt.Data.Ukedag
- import no.uio.ifi.in2000.prosjekt.R
- import no.uio.ifi.in2000.prosjekt.ui.Map.ExpandableCard
-@@ -90,43 +99,60 @@
- import no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme
- import java.util.Calendar
- import java.util.Locale
-+import kotlin.math.ceil
- import kotlin.math.pow
- import kotlin.math.round
- import kotlin.math.roundToInt
- 
-+data class LfRow(val tid: String, val temp: String?, val vind: String?, val rotation: String?)
-+
- @RequiresApi(Build.VERSION_CODES.O)
- @OptIn(ExperimentalMaterial3Api::class, ExperimentalComposeUiApi::class)
- @Composable
- fun InfoStederScreen(coordinate: String, navController: NavController, infoStederScreenViewModel : InfoStederViewModel = InfoStederViewModel(coordinate),
--                   infoStederLFViewModel: InfoStederLFViewModel = InfoStederLFViewModel(coordinate), metAlertViewModel: MetAlertViewModel = viewModel()
-+                   infoStederLFViewModel: InfoStederLFViewModel = InfoStederLFViewModel(coordinate), metAlertViewModel: MetAlertViewModel = viewModel(),
-+                     infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate)
- ) {
-     val liste = coordinate.split(",")
-     val lat = liste[0].trim()
-     val lon = liste[1].trim()
--    val infoSted by infoStederScreenViewModel.havvarselUIState.collectAsState()
-     val metAlert by metAlertViewModel.MAUiState.collectAsState()
-     val antallVarsler = metAlert.MetAlertsCoordinate?.features?.size
--
-     val iconTint = when {
-         antallVarsler == 0 || antallVarsler == null -> Color.Transparent
-         else -> Color.Yellow
-     }
--
-     metAlertViewModel.getNewDataCoords(lat,lon)
--    //val keyboardController = LocalSoftwareKeyboardController.current
--    var text by remember { mutableStateOf("") } //cordinate = "60.9612, 5.3221"
-+//
-+//    val locFor by infoStederLFViewModel.lFUiState.collectAsState()
-+//    val dateTimeString = locFor.weatherData?.properties?.timeseries?.get(0)?.time
-+//    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
-+    val hour = infoStederLFViewModel.startHour
-     var selectedOption by remember { mutableStateOf("I dag") }
--    val correctHours = when (selectedOption) {
--        "I dag" -> listOf(6,12,18,24)
--        "I morgen" -> listOf(30,36,42,48)
--        else -> listOf(54,60,66,72)
--    }
-+
-     var selectedOptionSwitch by remember { mutableStateOf("Tabell") }
-     val offsett = when (selectedOption) {
-         "I dag" -> 0
--        "I morgen" -> 24
--        else -> 48
-+        "I morgen" -> if(hour == 22){
-+                26
-+            } else if (hour == 23) {
-+                25
-+            } else {
-+                24 - hour
-+            }
-+        else -> if(hour == 22){
-+                50
-+            } else if (hour == 23){
-+                49
-+            } else {
-+                48-hour
-+            }
-     }
-+//    val offsett = when (selectedOption) {
-+//        "I dag" -> 0
-+//        "I morgen" -> 24
-+//        else -> 48
-+//    }
-     val calendar = Calendar.getInstance()
-     val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)
-     val toDagerFrem = Ukedag.entries[(dayOfWeek+1)%7]
-@@ -179,7 +205,7 @@
-                     MultiToggleButton(currentSelection = selectedOptionSwitch, toggleStates = listOf("Tabell", "Graf")) {newSelecter ->
-                         selectedOptionSwitch = newSelecter
-                     }
--                    MultiToggleButton(currentSelection = selectedOption, toggleStates = listOf("Idag", "I morgen",
-+                    MultiToggleButton(currentSelection = selectedOption, toggleStates = listOf("I dag", "I morgen",
-                         toDagerFrem.name
-                     )) { newselectedOption ->
-                         selectedOption = newselectedOption
-@@ -188,18 +214,18 @@
-             }
-         }
-     ) { innerPadding ->
--        Column(Modifier.fillMaxSize()) {
-+        Column() {
-             if(antallVarsler != null && antallVarsler > 0){
-                 metAlerts(metAlertViewModel = metAlertViewModel, antallVarsler = antallVarsler)
-             }
-             LazyColumn(
-                 modifier = Modifier
-                     .fillMaxSize()
--                    .background(Color(0xFF1F3468))
--                    .padding(innerPadding),
-+                    .padding(innerPadding)
-+                    .padding(8.dp),
-                 horizontalAlignment = Alignment.CenterHorizontally,
--                verticalArrangement = Arrangement.spacedBy(20.dp),
--                contentPadding = PaddingValues(20.dp)
-+                verticalArrangement = Arrangement.spacedBy(30.dp),
-+                contentPadding = PaddingValues(10.dp)
-             ) {
-                 item {
-                     if(selectedOptionSwitch == "Graf"){
-@@ -207,7 +233,9 @@
-                             infoStederScreenViewModel = infoStederScreenViewModel,
-                             offsett = offsett)
-                     } else {
--                        ExpandableWeatherCard(infoStederScreenViewModel = infoStederScreenViewModel, nr = 1)
-+                        //ExpandableWeatherCardLand2(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, dag = selectedOption)
-+
-+                        ExpandableWeatherCardLand(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, selectedOption)
-                     }
-                 }
-                 item {
-@@ -217,7 +245,8 @@
-                             offsett = offsett
-                         )
-                     } else {
--                        ExpandableWeatherCardLand(infoStederLFViewModel = infoStederLFViewModel, nr = 1, selectedOption)
-+                        ExpandableWeatherCard(infoStederOFViewModel, nr = offsett, selectedOption)
-+                        //ExpandableWeatherCardSea2(infoStederOFViewModel = infoStederOFViewModel, nr = offsett, dag = selectedOption)
-                     }
-                 }
-                 item {
-@@ -227,7 +256,7 @@
-                             offsett = offsett
-                         )
-                     } else {
--
-+                        //ExpandableWeatherCardSea2(infoStederOFViewModel, offsett, selectedOption)
-                     }
-                 }
-             }
-@@ -246,88 +275,19 @@
-     }
- }
- 
--@Composable
--fun waterTempCard(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){
--    Card(modifier = Modifier) {
--        Column(
--            modifier = Modifier.fillMaxWidth(),
--            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally
--        ) {
--            Text(
--                "Sjø-temperatur",  // The text to display
--                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
--                modifier = Modifier.padding()  // Add some padding
--            )
--            waterTempChart(infoStederScreenViewModel = infoStederScreenViewModel, offsett)
--        }
--    }
--}
--
--@Composable
--fun landTempCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
--    Card(modifier = Modifier,
--        elevation = CardDefaults.cardElevation(
--            defaultElevation = 8.dp,
--        )) {
--        Column(
--            modifier = Modifier.fillMaxWidth(),
--            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally
--        ) {
--            Text(
--                "Luft-temperatur",  // The text to display
--                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
--                modifier = Modifier  // Add some padding
--            )
--            locationForecastTempChart(infostederLocationForecastVM, offsett)  // Your existing chart composable
--        }
--    }
--}
--
--@Composable
--fun windSpeedCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
--    Card(modifier = Modifier,
--        elevation = CardDefaults.cardElevation(
--            defaultElevation = 8.dp,
--        )) {
--        Column(
--            modifier = Modifier.fillMaxWidth(),
--            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally
--        ) {
--            Text(
--                "Vind",  // The text to display
--                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
--                modifier = Modifier  // Add some padding
--            )
--            locationForecastWindChart(infostederLocationForecastVM, offsett)  // Your existing chart composable
--        }
--    }
--}
--@Composable
--fun MyLazyRow(ukedag : Ukedag?, selectedOption : String, onSelectedOptionChanged: (String) -> Unit) {
--    LazyRow(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {
--        items(3) { index ->
--            val buttonText = when (index) {
--                0 -> "I dag"
--                1 -> "I morgen"
--                2 -> if(ukedag != null) {ukedag.name} else {"Overmorgen"}
--                else -> ""
--            }
--            myButton(dag = buttonText, selectedOption = selectedOption, onSelectedOptionChanged = onSelectedOptionChanged)
--        }
--    }
--}
- @Composable
- fun MultiToggleButton(
-     currentSelection: String,
-     toggleStates: List<String>,
-     onToggleChange: (String) -> Unit
- ) {
--    val selectedTint = MaterialTheme.colorScheme.primary
-+    val selectedTint = MaterialTheme.colorScheme.tertiary
-     val unselectedTint = Color.White
- 
-     Row(modifier = Modifier
-         .height(IntrinsicSize.Min)
--        .border(BorderStroke(1.dp, Color.LightGray))) {
-+        .border(BorderStroke(1.dp, Color.LightGray))
-+        ) {
-         toggleStates.forEachIndexed { index, toggleState ->
-             val isSelected = currentSelection.lowercase() == toggleState.lowercase()
-             val backgroundTint = if (isSelected) selectedTint else unselectedTint
-@@ -396,146 +356,87 @@
-     }
- }
- 
-+
- @Composable
--fun waterTempChart(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){
--    val infoSted by infoStederScreenViewModel.havvarselUIState.collectAsState()
--    val pointData = listOf(
--        Point(0f, hentVerdiTemperature(infoSted, 0+offsett)),
--        Point(1f, hentVerdiTemperature(infoSted, 1+offsett)),
--        Point(2f, hentVerdiTemperature(infoSted, 2+offsett)),
--        Point(3f, hentVerdiTemperature(infoSted, 3+offsett)),
--        Point(4f, hentVerdiTemperature(infoSted, 4+offsett)),
--        Point(5f, hentVerdiTemperature(infoSted, 5+offsett)),
--        Point(6f, hentVerdiTemperature(infoSted, 6+offsett)),
--        Point(7f, hentVerdiTemperature(infoSted, 7+offsett)),
--        Point(8f, hentVerdiTemperature(infoSted, 8+offsett)),
--        Point(9f, hentVerdiTemperature(infoSted, 9+offsett)),
--        Point(10f, hentVerdiTemperature(infoSted, 10+offsett)),
--        Point(11f, hentVerdiTemperature(infoSted, 11+offsett)),
--        Point(12f, hentVerdiTemperature(infoSted, 12+offsett)),
--        Point(13f, hentVerdiTemperature(infoSted, 13+offsett)),
--        Point(14f, hentVerdiTemperature(infoSted, 14+offsett)),
--        Point(15f, hentVerdiTemperature(infoSted, 15+offsett)),
--        Point(16f, hentVerdiTemperature(infoSted, 16+offsett)),
--        Point(17f, hentVerdiTemperature(infoSted, 17+offsett)),
--        Point(18f, hentVerdiTemperature(infoSted, 18+offsett)),
--        Point(19f, hentVerdiTemperature(infoSted, 19+offsett)),
--        Point(20f, hentVerdiTemperature(infoSted, 20+offsett)),
--        Point(21f, hentVerdiTemperature(infoSted, 21+offsett)),
--        Point(22f, hentVerdiTemperature(infoSted, 22+offsett)),
--        Point(23f, hentVerdiTemperature(infoSted, 23+offsett))
--    )
--    val pointsData: List<Point> =
--        listOf(Point(0f, 20f), Point(1f, 22f), Point(2f, 23.1f), Point(3f, 22.8f), Point(4f, 25f),Point(5f, 24.3f),Point(6f, 24.5f),Point(7f, 25f),Point(8f, 27.2f))
--
--    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
--    val minY = pointData.minByOrNull { it.y }?.y ?: 0f
--    val steps = determineSteps(maxY-minY)
--    val stepsize = (maxY - minY) / steps
--
--    val xAxisData = AxisData.Builder()
--        .axisStepSize(40.dp)
--        .backgroundColor(Color.Transparent)
--        .steps(pointData.size - 1)
--        .labelData { i ->
--            "%02d".format(i) }
--        .labelAndAxisLinePadding(10.dp)
--        .axisLineColor(MaterialTheme.colorScheme.tertiary)
--        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
--        .build()
--
--    val yAxisData = AxisData.Builder()
--        .steps(steps)
--        .backgroundColor(Color.Transparent)
--        .labelAndAxisLinePadding(20.dp)
--        .labelData {  i ->
--            "%.1f°".format(minY  + (i * stepsize))
--        }
--        .axisLineColor(MaterialTheme.colorScheme.tertiary)
--        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
--        .build()
--
--    val lineChartData = LineChartData(
--        linePlotData = LinePlotData(
--            lines = listOf(
--                Line(
--                    dataPoints = pointData,
--                    LineStyle(
--                        color = MaterialTheme.colorScheme.tertiary,
--                        lineType = LineType.SmoothCurve(isDotted = false),
--
--                        ),
--                    IntersectionPoint(
--                        color = MaterialTheme.colorScheme.tertiary
--                    ),
--                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.tertiary),
--                    ShadowUnderLine(
--                        alpha = 0.9f,
--                        brush = Brush.verticalGradient(
--                            colors = listOf(
--                                MaterialTheme.colorScheme.inversePrimary,
--                                Color.Transparent
--                            )
--                        )
--                    ),
--                    SelectionHighlightPopUp()
--                )
--            ),
--        ),
--        containerPaddingEnd = 40.dp,
--        backgroundColor = MaterialTheme.colorScheme.surface,
--        xAxisData = xAxisData,
--        yAxisData = yAxisData,
--        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant)
--    )
--
--    LineChart(modifier = Modifier
--        .height(300.dp),
--        lineChartData = lineChartData
--    )
--}
--
--@Composable
--fun waterTempTable(){
--}
--@Composable
--fun ExpandableWeatherCard(infoStederScreenViewModel: InfoStederViewModel, nr : Int) {
--    val havarselUiState by infoStederScreenViewModel.havvarselUIState.collectAsState()
-+fun ExpandableWeatherCard(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {
-+    val oFUiState by infoStederOFViewModel.oFUiState.collectAsState()
-+    val isLoading by infoStederOFViewModel.isLoading.collectAsState()
-     var expanded by remember { mutableStateOf (false) }
--    val first by remember {
--        mutableStateOf("00-06")
-+
-+    val dateTimeString = oFUiState.oceanForecastData?.properties?.timeseries?.get(0)?.time
-+    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
-+
-+    val first = when (expanded) {
-+        true -> "00"
-+        else -> "00-06"
-+    }
-+    val second = when (expanded) {
-+        true -> "01"
-+        else -> "06-12"
-+    }
-+    val third = when (expanded) {
-+        true -> "02"
-+        else -> "12-18"
-+    }
-+    val fourth = when (expanded) {
-+        true -> "03"
-+        else -> "18-24"
-     }
--    val second by remember {
--        mutableStateOf("06-12")
-+    val t1 = when (expanded) {
-+        true -> 0
-+        else -> 0
-     }
--    val third by remember {
--        mutableStateOf("12-18")
-+    val t2 = when (expanded) {
-+        true -> 1
-+        else -> 6
-     }
--    val fourth by remember {
--        mutableStateOf("18-24")
-+    val t3 = when (expanded) {
-+        true -> 2
-+        else -> 12
-     }
--//    val dateTimeString = ""
--//    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
--//
--//    val pointData = when (offsett) {
--//        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"air_temperature")) }
--//        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "air_temperature")) }
--//    }
-+    val t4 = when (expanded) {
-+        true -> 3
-+        else -> 18
-+    }
-+    val indexArray = arrayOf(t1, t2, t3, t4)
-+    val column1Weight = .2f
-+    val column2Weight = .3f
-+    val column3Weight = .25f
-+    val column4Weight = .25f
-+
-     val expandMoreIcon = painterResource(id = R.drawable.expand_more)
-     val expandLessIcon = painterResource(id = R.drawable.expand_less)
-     val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
- 
--    val darkGrayGradient = Brush.linearGradient(
--        colors = listOf(
--            Color(0xFFD1CECE), // Dark gray
--            Color(0xFFB6ACAC), // Darker gray
--            Color(0xFFFCF3F3)  // Very dark gray (almost black)
--        )
--    )
-+    val ofRowList = when (nr) {
-+        0 -> if(hour == 22){
-+            (0..23).map { index -> LfRow("%02d".format(index),
-+            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("sea_water_temperature").toString(),
-+            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("sea_water_speed").toString(),
-+            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
-+            } else if (hour == 23){
-+            (0..23).map { index -> LfRow("%02d".format(index),
-+                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("sea_water_temperature").toString(),
-+                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("sea_water_speed").toString(),
-+                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
-+            }
-+            else {
-+            (0..23-hour).map { index -> LfRow("%02d".format(hour+index),
-+                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("sea_water_temperature").toString(),
-+                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("sea_water_speed").toString(),
-+                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
-+            }
-+        else -> (0..23).map { index -> LfRow("%02d".format(index),
-+            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_temperature").toString(),
-+            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_speed").toString(),
-+            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
-+    }
-+    val a = ofRowList.size
-+    val res = ceil(a.toDouble() / 6).toInt()
-     Card(
--        shape = RoundedCornerShape(8.dp),
-+        shape = RoundedCornerShape(5.dp),
-         elevation = CardDefaults.cardElevation(
--            defaultElevation = 12.dp,
-+            defaultElevation = 20.dp,
-             pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed
-             focusedElevation = 12.dp, // Optional: custom elevation when the card is focused
-             hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over
-@@ -549,61 +450,183 @@
-     ) {
-         Box(modifier = Modifier
-             .fillMaxSize()
--            .background(darkGrayGradient)){
--            Column() {
--                Text(text = "I dag")
--                if(expanded){
--                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
--                        Text(text = "Tid")
--                        Text(text = "Temp.")
--                        Text(text = "Strøm")
--                        Text(text = "Salt")
--                    }
--                }
--                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()){
--                    Column(modifier = Modifier
--                        .weight(1f)
--                        .padding(horizontal = 16.dp),
--                        horizontalAlignment = Alignment.CenterHorizontally) {
--                        Text(
--                            text = "result",
--                            style = MaterialTheme.typography.titleMedium,
--                            modifier = Modifier.padding(12.dp),
--                            textAlign = TextAlign.Center,
--                            fontWeight = FontWeight.Bold
--                        )
--                        Text(
--                            text = "Test",
--                            style = MaterialTheme.typography.bodyMedium,
--                            modifier = Modifier.padding(8.dp),
--                            textAlign = TextAlign.Center
--                        )
--                    }
--                }
--                if (expanded) {
--                    Text(text = "TESTETEST")
--                }
--                Row(verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally
--                    modifier = Modifier.fillMaxWidth()) {
--                    Text(text = "Time for time")
--                    Image(painter = toggleIconPainter, contentDescription = "Expand", modifier = Modifier.size(30.dp), Alignment.CenterStart)
-+            ){
-+            if(isLoading){
-+                Box(modifier = Modifier.fillMaxSize()) {
-+                    CircularProgressIndicator(modifier = Modifier)
-+                }
-+            } else {
-+                Column() {
-+                    Text(
-+                        text = dag,
-+                        style = MaterialTheme.typography.titleLarge,
-+                        fontWeight = FontWeight.Black
-+                    )
-+                    Row(
-+                        Modifier
-+                            .fillMaxWidth()
-+                            .padding(8.dp),
-+                        horizontalArrangement = Arrangement.SpaceBetween
-+                    ) {
-+                        TableCell(
-+                            text = "Tid",
-+                            weight = column1Weight,
-+                            alignment = TextAlign.Left,
-+                            title = true
-+                        )
-+                        TableCell(text = "Temp", weight = column2Weight, title = true)
-+                        TableCell(text = "Strøm", weight = column3Weight, title = true)
-+                        TableCell(
-+                            text = "Retning",
-+                            weight = column4Weight,
-+                            alignment = TextAlign.Right,
-+                            title = true
-+                        )
-+                    }
-+                    Divider(color = Color.LightGray, modifier = Modifier
-+                        .fillMaxWidth()
-+                        .height(1.dp))
-+                    if(nr == 0){
-+                        for (i in 4-res..<res) {
-+                            Row(
-+                                Modifier.fillMaxWidth(),
-+                                horizontalArrangement = Arrangement.SpaceBetween
-+                            ){
-+                                TableCell(
-+                                    text = when (i) {
-+                                        0 -> first
-+                                        1 -> second
-+                                        2 -> third
-+                                        else -> fourth
-+                                    },
-+                                    weight = column1Weight,
-+                                    alignment = TextAlign.Left
-+                                )
-+                                ofRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }
-+                                ofRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight) }
-+                                ofRowList[indexArray[i]].rotation?.let {
-+                                    TableCellImage(text = it, weight = column4Weight)
-+                                }
-+                            }
-+                            Divider(
-+                                color = Color.LightGray,
-+                                modifier = Modifier
-+                                    .height(1.dp)
-+                                    .fillMaxHeight()
-+                                    .fillMaxWidth()
-+                            )
-+                        }
-+                        if (expanded) {
-+                            repeat(ofRowList.size - res) { index ->
-+                                Row(
-+                                    Modifier.fillMaxWidth(),
-+                                    horizontalArrangement = Arrangement.SpaceBetween
-+                                ){
-+                                    TableCell(
-+                                        text = ofRowList[index+res].tid,
-+                                        weight = column1Weight,
-+                                        alignment = TextAlign.Left
-+                                    )
-+                                    ofRowList[index+res].temp?.let { TableCell(text = it, weight = column2Weight) }
-+                                    ofRowList[index+res].vind?.let { StatusCell(text = it, weight = column3Weight) }
-+                                    ofRowList[index+res].rotation?.let {
-+                                        TableCellImage(text = it, weight = column4Weight)
-+                                    }
-+                                }
-+                                Divider(
-+                                    color = Color.LightGray,
-+                                    modifier = Modifier
-+                                        .height(1.dp)
-+                                        .fillMaxHeight()
-+                                        .fillMaxWidth()
-+                                )
-+                            }
-+                        }
-+                    } else {
-+                        for (i in 0..3) {
-+                            Row(
-+                                Modifier.fillMaxWidth(),
-+                                horizontalArrangement = Arrangement.SpaceBetween
-+                            ){
-+                                TableCell(
-+                                    text = when (i) {
-+                                        0 -> first
-+                                        1 -> second
-+                                        2 -> third
-+                                        else -> fourth
-+                                    },
-+                                    weight = column1Weight,
-+                                    alignment = TextAlign.Left
-+                                )
-+                                ofRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }
-+                                ofRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight) }
-+                                ofRowList[indexArray[i]].rotation?.let {
-+                                    TableCellImage(text = it, weight = column4Weight)
-+                                }
-+                            }
-+                            Divider(
-+                                color = Color.LightGray,
-+                                modifier = Modifier
-+                                    .height(1.dp)
-+                                    .fillMaxHeight()
-+                                    .fillMaxWidth()
-+                            )
-+                        }
-+                        if (expanded) {
-+                            repeat(20) { index ->
-+                                Row(
-+                                    Modifier.fillMaxWidth(),
-+                                    horizontalArrangement = Arrangement.SpaceBetween
-+                                ){
-+                                    TableCell(
-+                                        text = ofRowList[index+4].tid,
-+                                        weight = column1Weight,
-+                                        alignment = TextAlign.Left
-+                                    )
-+                                    ofRowList[index+4].temp?.let { TableCell(text = it, weight = column2Weight) }
-+                                    ofRowList[index+4].vind?.let { StatusCell(text = it, weight = column3Weight) }
-+                                    ofRowList[index+4].rotation?.let {
-+                                        TableCellImage(text = it, weight = column4Weight)
-+                                    }
-+                                }
-+                                Divider(
-+                                    color = Color.LightGray,
-+                                    modifier = Modifier
-+                                        .height(1.dp)
-+                                        .fillMaxHeight()
-+                                        .fillMaxWidth()
-+                                )
-+                            }
-+                        }
-+                    }
-+                    Row(
-+                        verticalAlignment = Alignment.CenterVertically,
-+                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally
-+                        modifier = Modifier.fillMaxWidth()
-+                    ) {
-+                        Text(text = "Time for time")
-+                        Image(
-+                            painter = toggleIconPainter,
-+                            contentDescription = "Expand",
-+                            modifier = Modifier.size(30.dp),
-+                            Alignment.CenterStart
-+                        )
-+                    }
-                 }
-             }
-         }
-     }
- }
- 
--@Composable
--fun locationForecastTempTable(){
--    Card {
--
--    }
--}
--
- @Composable
- fun ExpandableWeatherCardLand(infoStederLFViewModel: InfoStederLFViewModel, nr : Int, dag : String) {
--    val locationForecastUiState by infoStederLFViewModel.lFUiState.collectAsState()
-+    val lFUiState by infoStederLFViewModel.lFUiState.collectAsState()
-+    val isLoading by infoStederLFViewModel.isLoading.collectAsState()
-     var expanded by remember { mutableStateOf (false) }
-+
-+    val dateTimeString = lFUiState.weatherData?.properties?.timeseries?.get(0)?.time
-+    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
-+
-     val first = when (expanded) {
-         true -> "00"
-         else -> "00-06"
-@@ -636,24 +659,41 @@
-         true -> 3
-         else -> 18
-     }
--//    val dateTimeString = ""
--//    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
-+    val indexArray = arrayOf(t1, t2, t3, t4)
-+    val column1Weight = .2f
-+    val column2Weight = .3f
-+    val column3Weight = .25f
-+    val column4Weight = .25f
- 
--//    val pointData = when (nr) {
--//        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"air_temperature")) }
--//        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "air_temperature")) }
--//    }
-     val expandMoreIcon = painterResource(id = R.drawable.expand_more)
-     val expandLessIcon = painterResource(id = R.drawable.expand_less)
-     val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
- 
--    val darkGrayGradient = Brush.linearGradient(
--        colors = listOf(
--            Color(0xFFFFFFFF),
--            Color(0xFFFFFFFF),
--            Color(0xFFFFFFFF)
--        )
--    )
-+    val lfRowList = when (nr) {
-+        0 -> if(hour == 22){
-+            (0..23).map { index -> LfRow("%02d".format(index),
-+                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("air_temperature").toString(),
-+                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("wind_speed").toString(),
-+                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("wind_from_direction").toString()) }
-+        } else if (hour == 23){
-+            (0..23).map { index -> LfRow("%02d".format(index),
-+                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("air_temperature").toString(),
-+                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("wind_speed").toString(),
-+                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("wind_from_direction").toString()) }
-+        }
-+        else {
-+            (0..23-hour).map { index -> LfRow("%02d".format(hour+index),
-+                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("air_temperature").toString(),
-+                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("wind_speed").toString(),
-+                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("wind_from_direction").toString()) }
-+        }
-+        else -> (0..23).map { index -> LfRow("%02d".format(index),
-+            lFUiState.weatherData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("air_temperature").toString(),
-+            lFUiState.weatherData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("wind_speed").toString(),
-+            lFUiState.weatherData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("wind_from_direction").toString()) }
-+    }
-+    val a = lfRowList.size
-+    val res = ceil(a.toDouble() / 6).toInt()
-     Card(
-         shape = RoundedCornerShape(5.dp),
-         elevation = CardDefaults.cardElevation(
-@@ -671,38 +711,532 @@
-     ) {
-         Box(modifier = Modifier
-             .fillMaxSize()
--            .background(darkGrayGradient)){
--            Column() {
--                Text(text = dag,style = MaterialTheme.typography.titleLarge,)
--                if(expanded){
--                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
--                        Text(text = "Tid")
--                        Text(text = "Temp")
--                        Text(text = "Vind")
--                        Text(text = "hPa")
--                    }
--                }
--                Column {
--                    lFCard(tid = first, lf = locationForecastUiState, nr = t1)
--                    lFCard(tid = second, lf = locationForecastUiState, nr = t2)
--                    lFCard(tid = third, lf = locationForecastUiState, nr = t3)
--                    lFCard(tid = fourth, lf = locationForecastUiState, nr = t4)
--                    if (expanded) {
--                        repeat(20) { index ->
--                            lFCard(tid = "%02d".format(index+4), lf = locationForecastUiState, nr = index+4)
--                        }
--                    }
--                }
--                Row(verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally
--                    modifier = Modifier.fillMaxWidth()) {
--                    Text(text = "Time for time")
--                    Image(painter = toggleIconPainter, contentDescription = "Expand", modifier = Modifier.size(30.dp), Alignment.CenterStart)
-+        ){
-+            if(isLoading){
-+                Box(modifier = Modifier.fillMaxSize()) {
-+                    CircularProgressIndicator(modifier = Modifier)
-+                }
-+            } else {
-+                Column() {
-+                    Text(
-+                        text = dag,
-+                        style = MaterialTheme.typography.titleLarge,
-+                        fontWeight = FontWeight.Black
-+                    )
-+                    Row(
-+                        Modifier
-+                            .fillMaxWidth()
-+                            .padding(8.dp),
-+                        horizontalArrangement = Arrangement.SpaceBetween
-+                    ) {
-+                        TableCell(
-+                            text = "Tid",
-+                            weight = column1Weight,
-+                            alignment = TextAlign.Left,
-+                            title = true
-+                        )
-+                        TableCell(text = "Temp", weight = column2Weight, title = true)
-+                        TableCell(text = "Vind", weight = column3Weight, title = true)
-+                        TableCell(
-+                            text = "Retning",
-+                            weight = column4Weight,
-+                            alignment = TextAlign.Right,
-+                            title = true
-+                        )
-+                    }
-+                    Divider(color = Color.LightGray, modifier = Modifier
-+                        .fillMaxWidth()
-+                        .height(1.dp))
-+                    if(nr == 0){
-+                        for (i in 4-res..<res) {
-+                            Row(
-+                                Modifier.fillMaxWidth(),
-+                                horizontalArrangement = Arrangement.SpaceBetween
-+                            ){
-+                                TableCell(
-+                                    text = when (i) {
-+                                        0 -> first
-+                                        1 -> second
-+                                        2 -> third
-+                                        else -> fourth
-+                                    },
-+                                    weight = column1Weight,
-+                                    alignment = TextAlign.Left
-+                                )
-+                                lfRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }
-+                                lfRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight) }
-+                                lfRowList[indexArray[i]].rotation?.let {
-+                                    TableCellImage(text = it, weight = column4Weight)
-+                                }
-+                            }
-+                            Divider(
-+                                color = Color.LightGray,
-+                                modifier = Modifier
-+                                    .height(1.dp)
-+                                    .fillMaxHeight()
-+                                    .fillMaxWidth()
-+                            )
-+                        }
-+                        if (expanded) {
-+                            repeat(lfRowList.size - res) { index ->
-+                                Row(
-+                                    Modifier.fillMaxWidth(),
-+                                    horizontalArrangement = Arrangement.SpaceBetween
-+                                ){
-+                                    TableCell(
-+                                        text = lfRowList[index+res].tid,
-+                                        weight = column1Weight,
-+                                        alignment = TextAlign.Left
-+                                    )
-+                                    lfRowList[index+res].temp?.let { TableCell(text = it, weight = column2Weight) }
-+                                    lfRowList[index+res].vind?.let { StatusCell(text = it, weight = column3Weight) }
-+                                    lfRowList[index+res].rotation?.let {
-+                                        TableCellImage(text = it, weight = column4Weight)
-+                                    }
-+                                }
-+                                Divider(
-+                                    color = Color.LightGray,
-+                                    modifier = Modifier
-+                                        .height(1.dp)
-+                                        .fillMaxHeight()
-+                                        .fillMaxWidth()
-+                                )
-+                            }
-+                        }
-+                    } else {
-+                        for (i in 0..3) {
-+                            Row(
-+                                Modifier.fillMaxWidth(),
-+                                horizontalArrangement = Arrangement.SpaceBetween
-+                            ){
-+                                TableCell(
-+                                    text = when (i) {
-+                                        0 -> first
-+                                        1 -> second
-+                                        2 -> third
-+                                        else -> fourth
-+                                    },
-+                                    weight = column1Weight,
-+                                    alignment = TextAlign.Left
-+                                )
-+                                lfRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }
-+                                lfRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight) }
-+                                lfRowList[indexArray[i]].rotation?.let {
-+                                    TableCellImage(text = it, weight = column4Weight)
-+                                }
-+                            }
-+                            Divider(
-+                                color = Color.LightGray,
-+                                modifier = Modifier
-+                                    .height(1.dp)
-+                                    .fillMaxHeight()
-+                                    .fillMaxWidth()
-+                            )
-+                        }
-+                        if (expanded) {
-+                            repeat(20) { index ->
-+                                Row(
-+                                    Modifier.fillMaxWidth(),
-+                                    horizontalArrangement = Arrangement.SpaceBetween
-+                                ){
-+                                    TableCell(
-+                                        text = lfRowList[index+4].tid,
-+                                        weight = column1Weight,
-+                                        alignment = TextAlign.Left
-+                                    )
-+                                    lfRowList[index+4].temp?.let { TableCell(text = it, weight = column2Weight) }
-+                                    lfRowList[index+4].vind?.let { StatusCell(text = it, weight = column3Weight) }
-+                                    lfRowList[index+4].rotation?.let {
-+                                        TableCellImage(text = it, weight = column4Weight)
-+                                    }
-+                                }
-+                                Divider(
-+                                    color = Color.LightGray,
-+                                    modifier = Modifier
-+                                        .height(1.dp)
-+                                        .fillMaxHeight()
-+                                        .fillMaxWidth()
-+                                )
-+                            }
-+                        }
-+                    }
-+                    Row(
-+                        verticalAlignment = Alignment.CenterVertically,
-+                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally
-+                        modifier = Modifier.fillMaxWidth()
-+                    ) {
-+                        Text(text = "Time for time")
-+                        Image(
-+                            painter = toggleIconPainter,
-+                            contentDescription = "Expand",
-+                            modifier = Modifier.size(30.dp),
-+                            Alignment.CenterStart
-+                        )
-+                    }
-+                }
-+            }
-+        }
-+    }
-+}
-+
-+@OptIn(ExperimentalMaterial3Api::class)
-+@Composable
-+fun ExpandableWeatherCardLand2(infoStederLFViewModel: InfoStederLFViewModel, nr : Int, dag : String) {
-+    val locationForecastUiState by infoStederLFViewModel.lFUiState.collectAsState()
-+    val isLoading by infoStederLFViewModel.isLoading.collectAsState()
-+    var expanded by remember { mutableStateOf (false) }
-+
-+//    val lfRowList = when (nr) {
-+//        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"air_temperature")) }
-+//        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "air_temperature")) }
-+//    }
-+    val lfRowList =  (0..23).map { index -> LfRow("%02d".format(index),
-+        locationForecastUiState.weatherData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("air_temperature").toString(),
-+        locationForecastUiState.weatherData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("wind_speed").toString(),
-+        locationForecastUiState.weatherData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("wind_from_direction").toString()) }
-+    val column1Weight = .2f
-+    val column2Weight = .3f
-+    val column3Weight = .25f
-+    val column4Weight = .25f
-+
-+    val height = when (expanded) {
-+        true -> 600
-+        false -> 300
-+    }
-+    val first = "00-06"
-+    val second = "06-12"
-+    val third = "12-18"
-+    val fourth = "18-24"
-+
-+    val expandMoreIcon = painterResource(id = R.drawable.expand_more)
-+    val expandLessIcon = painterResource(id = R.drawable.expand_less)
-+    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
-+    Card(
-+        Modifier
-+            .background(Color.White)
-+            .height(height.dp)
-+            .clickable { expanded = !expanded },
-+        elevation = CardDefaults.cardElevation(
-+            defaultElevation = 12.dp
-+        )){
-+        if(isLoading){
-+            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){
-+                CircularProgressIndicator()
-+            }
-+        } else {
-+            Column {
-+                // Sticky header part outside the LazyColumn
-+                Row(
-+                    Modifier
-+                        .fillMaxWidth()
-+                        .padding(8.dp),
-+                    horizontalArrangement = Arrangement.SpaceBetween
-+                ) {
-+                    TableCell(
-+                        text = "Tid",
-+                        weight = column1Weight,
-+                        alignment = TextAlign.Left,
-+                        title = true
-+                    )
-+                    TableCell(text = "Temp", weight = column2Weight, title = true)
-+                    TableCell(text = "Vind", weight = column3Weight, title = true)
-+                    TableCell(
-+                        text = "Retning",
-+                        weight = column4Weight,
-+                        alignment = TextAlign.Right,
-+                        title = true
-+                    )
-+                }
-+                Divider(color = Color.LightGray, modifier = Modifier
-+                    .fillMaxWidth()
-+                    .height(1.dp))
-+            }
-+                LazyColumn(
-+                Modifier.padding(8.dp),
-+            ) {
-+                if(expanded){
-+                    itemsIndexed(lfRowList) { _, lf ->
-+                        Row(
-+                            Modifier.fillMaxWidth(),
-+                            horizontalArrangement = Arrangement.SpaceBetween
-+                        ) {
-+                            TableCell(
-+                                text = lf.tid,
-+                                weight = column1Weight,
-+                                alignment = TextAlign.Left
-+                            )
-+                            lf.temp?.let { TableCell(text = it, weight = column2Weight) }
-+                            lf.vind?.let { StatusCell(text = it, weight = column3Weight) }
-+                            lf.rotation?.let {
-+                                TableCellImage(text = it, weight = column4Weight)
-+                            }
-+                        }
-+                        Divider(
-+                            color = Color.LightGray,
-+                            modifier = Modifier
-+                                .height(1.dp)
-+                                .fillMaxHeight()
-+                                .fillMaxWidth()
-+                        )
-+                    }
-+                } else {
-+                    for (i in 0..3) {
-+                        item {
-+                            Row(
-+                                Modifier.fillMaxWidth(),
-+                                horizontalArrangement = Arrangement.SpaceBetween
-+                            ) {
-+                                TableCell(
-+                                    text = when (i) {
-+                                        0 -> first
-+                                        1 -> second
-+                                        2 -> third
-+                                        else -> fourth
-+                                    },
-+                                    weight = column1Weight,
-+                                    alignment = TextAlign.Left
-+                                )
-+                                lfRowList[i * 6].temp?.let {
-+                                    TableCell(
-+                                        text = it,
-+                                        weight = column2Weight
-+                                    )
-+                                }
-+                                lfRowList[i * 6].vind?.let {
-+                                    StatusCell(
-+                                        text = it,
-+                                        weight = column3Weight
-+                                    )
-+                                }
-+                                lfRowList[i * 6].rotation?.let {
-+                                    TableCellImage(text = it, weight = column4Weight)
-+                                }
-+                            }
-+                            if (i != 3) {
-+                                Divider(
-+                                    color = Color.LightGray,
-+                                    modifier = Modifier
-+                                        .height(1.dp)
-+                                        .fillMaxHeight()
-+                                        .fillMaxWidth()
-+                                )
-+                            }
-+                        }
-+                    }
-+                }
-+            }
-+        }
-+    }
-+}
-+
-+@Composable
-+fun ExpandableWeatherCardSea2(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {
-+    val oceanForecastUiState by infoStederOFViewModel.oFUiState.collectAsState()
-+    val isLoading by infoStederOFViewModel.isLoading.collectAsState()
-+    var expanded by remember { mutableStateOf (false) }
-+
-+//    val lfRowList = when (nr) {
-+//        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"air_temperature")) }
-+//        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "air_temperature")) }
-+//    }
-+    val ofRowList =  (0..23).map { index -> LfRow("%02d".format(index),
-+        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_temperature").toString(),
-+        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_speed").toString(),
-+        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
-+
-+    val column1Weight = .2f
-+    val column2Weight = .3f
-+    val column3Weight = .25f
-+    val column4Weight = .25f
-+
-+    val first = "00-06"
-+    val second = "06-12"
-+    val third = "12-18"
-+    val fourth = "18-24"
-+    val height = when (expanded) {
-+        true -> 600
-+        false -> 300
-+    }
-+
-+    val expandMoreIcon = painterResource(id = R.drawable.expand_more)
-+    val expandLessIcon = painterResource(id = R.drawable.expand_less)
-+    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
-+    Card(
-+        Modifier
-+            .background(Color.White)
-+            .height(height.dp)
-+            .clickable { expanded = !expanded },
-+        elevation = CardDefaults.cardElevation(
-+            defaultElevation = 12.dp
-+        )){
-+        if(isLoading){
-+            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){
-+                CircularProgressIndicator()
-+            }
-+        } else {
-+            Column {
-+                // Sticky header part outside the LazyColumn
-+                Row(
-+                    Modifier
-+                        .fillMaxWidth()
-+                        .padding(8.dp),
-+                    horizontalArrangement = Arrangement.SpaceBetween
-+                ) {
-+                    TableCell(
-+                        text = "Tid",
-+                        weight = column1Weight,
-+                        alignment = TextAlign.Left,
-+                        title = true
-+                    )
-+                    TableCell(text = "Temp", weight = column2Weight, title = true)
-+                    TableCell(text = "Vind", weight = column3Weight, title = true)
-+                    TableCell(
-+                        text = "Retning",
-+                        weight = column4Weight,
-+                        alignment = TextAlign.Right,
-+                        title = true
-+                    )
-+                }
-+                Divider(color = Color.LightGray, modifier = Modifier
-+                    .fillMaxWidth()
-+                    .height(1.dp))
-+            }
-+            LazyColumn(
-+                Modifier.padding(8.dp),
-+            ) {
-+                if(expanded){
-+                    itemsIndexed(ofRowList) { _, lf ->
-+                        Row(
-+                            Modifier.fillMaxWidth(),
-+                            horizontalArrangement = Arrangement.SpaceBetween
-+                        ) {
-+                            TableCell(
-+                                text = lf.tid,
-+                                weight = column1Weight,
-+                                alignment = TextAlign.Left
-+                            )
-+                            lf.temp?.let { TableCell(text = it, weight = column2Weight) }
-+                            lf.vind?.let { StatusCell(text = it, weight = column3Weight) }
-+                            lf.rotation?.let {
-+                                TableCellImage(text = it, weight = column4Weight)
-+                            }
-+                        }
-+                        Divider(
-+                            color = Color.LightGray,
-+                            modifier = Modifier
-+                                .height(1.dp)
-+                                .fillMaxHeight()
-+                                .fillMaxWidth()
-+                        )
-+                    }
-+                } else {
-+                    for (i in 0..3) {
-+                        item {
-+                            Row(
-+                                Modifier.fillMaxWidth(),
-+                                horizontalArrangement = Arrangement.SpaceBetween
-+                            ) {
-+                                TableCell(
-+                                    text = when (i) {
-+                                        0 -> first
-+                                        1 -> second
-+                                        2 -> third
-+                                        else -> fourth
-+                                    },
-+                                    weight = column1Weight,
-+                                    alignment = TextAlign.Left
-+                                )
-+                                ofRowList[i * 6].temp?.let {
-+                                    TableCell(
-+                                        text = it,
-+                                        weight = column2Weight
-+                                    )
-+                                }
-+                                ofRowList[i * 6].vind?.let {
-+                                    StatusCell(
-+                                        text = it,
-+                                        weight = column3Weight
-+                                    )
-+                                }
-+                                ofRowList[i * 6].rotation?.let {
-+                                    TableCellImage(text = it, weight = column4Weight)
-+                                }
-+                            }
-+                            if (i != 3) {
-+                                Divider(
-+                                    color = Color.LightGray,
-+                                    modifier = Modifier
-+                                        .height(1.dp)
-+                                        .fillMaxHeight()
-+                                        .fillMaxWidth()
-+                                )
-+                            }
-+                        }
-+                    }
-                 }
-             }
-         }
-     }
- }
- 
-+@Composable
-+fun RowScope.TableCell(
-+    text: String,
-+    weight: Float,
-+    alignment: TextAlign = TextAlign.Center,
-+    title: Boolean = false
-+) {
-+    Text(
-+        text = text,
-+        Modifier
-+            .weight(weight)
-+            .padding(10.dp),
-+        fontWeight = if (title) FontWeight.Bold else FontWeight.Normal,
-+        textAlign = alignment,
-+    )
-+}
-+
-+@Composable
-+fun RowScope.TableCellImage(
-+    text: String,
-+    weight: Float,
-+) {
-+    val painter = painterResource(id = R.drawable.arrow_south)
-+    Image(painter = painter, contentDescription = "Direction", Modifier
-+        .weight(weight)
-+        .padding(10.dp)
-+        .rotate(text.toFloat()), alignment = Alignment.Center)
-+}
-+
-+@Composable
-+fun RowScope.StatusCell(
-+    text: String,
-+    weight: Float,
-+    alignment: TextAlign = TextAlign.Center,
-+) {
-+
-+    val color = when (text) {
-+        "Pending" -> Color(0xfff8deb5)
-+        "Paid" -> Color(0xffadf7a4)
-+        else -> Color(0xffffcccf)
-+    }
-+    val textColor = when (text) {
-+        "Pending" -> Color(0xffde7a1d)
-+        "Paid" -> Color(0xff00ad0e)
-+        else -> Color(0xffca1e17)
-+    }
-+
-+    Text(
-+        text = text,
-+        Modifier
-+            .weight(weight)
-+            .padding(12.dp)
-+            .background(color, shape = RoundedCornerShape(50.dp)),
-+        textAlign = alignment,
-+        color = textColor
-+    )
-+}
-+
- @Composable
- fun lFCard(tid: String, lf : locationForecastUiState, nr: Int){
-     val pureBlackGradient = Brush.linearGradient(
-@@ -713,12 +1247,13 @@
-         )
-     )
-     Card(
--        shape = RectangleShape,
-+        shape = RoundedCornerShape(5.dp),
-         border = BorderStroke(0.5.dp, pureBlackGradient),
--        modifier = Modifier.height(30.dp)
-+        modifier = Modifier.height(40.dp),
-     ) {
--        Row(modifier = Modifier.fillMaxWidth(),
--            horizontalArrangement = Arrangement.SpaceBetween)
-+        Row(modifier = Modifier.fillMaxSize(),
-+            verticalAlignment = Alignment.CenterVertically,
-+            horizontalArrangement = Arrangement.SpaceEvenly)
-         {
-             Text(text = tid)
-             Text(text = lf.weatherData?.properties?.timeseries?.get(nr)?.data?.instant?.details?.get("air_temperature").toString())
-@@ -728,6 +1263,32 @@
-     }
- }
- 
-+@Composable
-+fun oFCard(tid: String, of : oceanForecastUiState, nr: Int){
-+    val pureBlackGradient = Brush.linearGradient(
-+        colors = listOf(
-+            Color(0xFF000000), // Pure black
-+            Color(0xFF000000), // Pure black
-+            Color(0xFF000000)  // Pure black
-+        )
-+    )
-+    Card(
-+        shape = RoundedCornerShape(5.dp),
-+        border = BorderStroke(0.5.dp, pureBlackGradient),
-+        modifier = Modifier.height(40.dp),
-+    ) {
-+        Row(modifier = Modifier.fillMaxSize(),
-+            verticalAlignment = Alignment.CenterVertically,
-+            horizontalArrangement = Arrangement.SpaceEvenly)
-+        {
-+            Text(text = tid)
-+            Text(text = of.oceanForecastData?.properties?.timeseries?.get(nr)?.data?.instant?.details?.get("sea_water_temperature").toString())
-+            Text(text = of.oceanForecastData?.properties?.timeseries?.get(nr)?.data?.instant?.details?.get("sea_water_speed").toString())
-+            Text(text = of.oceanForecastData?.properties?.timeseries?.get(nr)?.data?.instant?.details?.get("sea_surface_wave_height").toString())
-+        }
-+    }
-+}
-+
- fun determineSteps(diff: Float): Int {
-     return when {
-         diff in 0.1..3.0 -> 10 // This will convert 0.1 to 1 step, 0.2 to 2 steps, etc.
-@@ -737,169 +1298,8 @@
-     }
- }
- 
--@Composable
--fun locationForecastTempChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
--    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()
--    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time
--    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
--
--    val pointData = when (offsett) {
--        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"air_temperature")) }
--        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "air_temperature")) }
--    }
--
--    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
--    val minY = pointData.minByOrNull { it.y }?.y ?: 0f
--    val steps = determineSteps(maxY-minY)
--    val stepsize = ((maxY - minY) / steps).toInt()
--
--    val xAxisData = AxisData.Builder()
--        .axisStepSize(40.dp)
--        .backgroundColor(Color.Transparent)
--        .steps(pointData.size - 1)
--        .labelData { i ->  when (offsett) {
--            0 -> "%02d".format(i+hour)
--            else -> "%02d".format(i) }}
--        .labelAndAxisLinePadding(10.dp)
--        .axisLineColor(MaterialTheme.colorScheme.tertiary)
--        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
--        .build()
--
--    val yAxisData = AxisData.Builder()
--        .steps(steps)
--        .backgroundColor(Color.Transparent)
--        .labelAndAxisLinePadding(30.dp)
--        .axisOffset(0.dp)
--        .labelData {  i ->
--            "%.1f°".format(minY  + (i * stepsize))
--        }
--        .axisLineColor(MaterialTheme.colorScheme.tertiary)
--        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
--        .build()
--
--    val lineChartData = LineChartData(
--        linePlotData = LinePlotData(
--            lines = listOf(
--                Line(
--                    dataPoints = pointData,
--                    LineStyle(
--                        alpha = 0.5f,
--                        color = Color(0xFF000000),
--                        lineType = LineType.Straight(isDotted = false)
--                    ),
--                    IntersectionPoint(
--                        MaterialTheme.colorScheme.tertiary
--                    ),
--                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),
--                    ShadowUnderLine(
--                        alpha = 0.5f,
--                        brush = Brush.verticalGradient(
--                            colors = listOf(
--                                Color(0xFFFFF9C4), // Light yellow
--                                Color(0xFFFFEB3B), // Vivid yellow
--                                Color(0xFFFFD726)  // Dark yellow
--                            )
--                        )
--                    ),
--                    SelectionHighlightPopUp()
--                )
--            ),
--        ),
--        backgroundColor = MaterialTheme.colorScheme.surface,
--        xAxisData = xAxisData,
--        yAxisData = yAxisData,
--        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),
--        isZoomAllowed = true
--    )
--
--    LineChart(modifier = Modifier
--        .fillMaxWidth()
--        .height(300.dp),
--        lineChartData = lineChartData
--    )
--}
--
--@Composable
--fun locationForecastWindChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
--    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()
--    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time
--    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
--
--    val pointData = when (offsett) {
--        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"wind_speed")) }
--        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "wind_speed")) }
--    }
--
--    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
--    val minY = pointData.minByOrNull { it.y }?.y ?: 0f
--    val steps = determineSteps(maxY-minY)
--    val stepsize = ((maxY - minY) / steps)
--
--    val xAxisData = AxisData.Builder()
--        .axisStepSize(40.dp)
--        .backgroundColor(Color.Transparent)
--        .steps(pointData.size - 1)
--        .labelData { i ->  when (offsett) {
--            0 -> "%02d".format(i+hour)
--            else -> "%02d".format(i) }}
--        .labelAndAxisLinePadding(10.dp)
--        .axisLineColor(MaterialTheme.colorScheme.tertiary)
--        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
--        .build()
--
--    val yAxisData = AxisData.Builder()
--        .steps(steps)
--        .backgroundColor(Color.Transparent)
--        .labelAndAxisLinePadding(30.dp)
--        .axisOffset(0.dp)
--        .labelData {  i ->
--            "%.1f m/s".format(minY  + (i * stepsize))
--        }
--        .axisLineColor(MaterialTheme.colorScheme.tertiary)
--        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
--        .build()
--
--    val lineChartData = LineChartData(
--        linePlotData = LinePlotData(
--            lines = listOf(
--                Line(
--                    dataPoints = pointData,
--                    LineStyle(
--                        alpha = 0.5f,
--                        color = Color(0xFF000000),
--                        lineType = LineType.Straight(isDotted = false)
--                    ),
--                    IntersectionPoint(
--                        MaterialTheme.colorScheme.tertiary
--                    ),
--                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),
--                    ShadowUnderLine(
--                        alpha = 0.5f,
--                        brush = Brush.verticalGradient(
--                            colors = listOf(
--                                Color(0xFFF5F5F5), // Light Gray (almost white)
--                                Color(0xFFE0E0E0), // Medium Gray
--                                Color(0xFFBDBDBD)  // Darker Gray
--                            )
--                        )
--                    ),
--                    SelectionHighlightPopUp()
--                )
--            ),
--        ),
--        backgroundColor = MaterialTheme.colorScheme.surface,
--        xAxisData = xAxisData,
--        yAxisData = yAxisData,
--        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),
--        isZoomAllowed = true
--    )
--
--    LineChart(modifier = Modifier
--        .fillMaxWidth()
--        .height(300.dp),
--        lineChartData = lineChartData
--    )
--}
-+
-+
- 
- @Composable
- fun metAlerts(metAlertViewModel: MetAlertViewModel, antallVarsler : Int){
-@@ -950,7 +1350,7 @@
-     val expandMoreIcon = painterResource(id = R.drawable.expand_more)
-     val expandLessIcon = painterResource(id = R.drawable.expand_less)
-     val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
--
-+    val imageUri = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.resources?.firstOrNull { it.mimeType?.startsWith("image/png") == true }?.uri
-     val fareStart = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.timeinterval?.interval?.get(0)
-         ?.let { formatToNorwegianTime(it) }
-     val fareSlutt = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.timeinterval?.interval?.get(1)
-@@ -1087,6 +1487,19 @@
-                         style = MaterialTheme.typography.bodyMedium,
-                         modifier = Modifier.padding(8.dp)
-                     )
-+                    if(imageUri != null){
-+                        AsyncImage(
-+                            model = ImageRequest.Builder(LocalContext.current)
-+                                .data(imageUri)
-+                                .crossfade(true)
-+                                .build(),
-+                            contentDescription = "Loaded Image",
-+                            modifier = Modifier
-+                                .fillMaxWidth()
-+                                .clickable { },
-+                            contentScale = ContentScale.Crop
-+                        )
-+                    }
-                 }
-             }
-         }
-Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package no.uio.ifi.in2000.prosjekt.ui.InfoScreen\n\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.foundation.lazy.grid.items\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults.topAppBarColors\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Color.Companion.White\nimport androidx.compose.ui.graphics.Shadow\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavController\nimport coil.compose.AsyncImage\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport coil.request.ImageRequest\nimport no.uio.ifi.in2000.prosjekt.Model.InfoObjects\nimport no.uio.ifi.in2000.prosjekt.ui.CommonUIUtils.InfoUIState\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InfoScreen(\n    navController: NavController,\n    infoList : InfoUIState = InfoUIState()\n) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = topAppBarColors(\n                    containerColor = Color(0xFFBEDDF5)\n                ),\n                navigationIcon = {\n                    IconButton(\n                        onClick = { navController.popBackStack() }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color.Black\n                        )\n                    }\n                },\n                title = { Text(text = \"Lær!\") })\n        },\n\n        ) { innerPadding ->\n\n        Column(\n            modifier = Modifier\n                .background(\n                    Color(0xFF1F3468)\n\n                ).padding(top = 65.dp))\n        {\n            LazyVerticalGrid(\n                modifier = Modifier.fillMaxSize(),\n                columns = GridCells.Fixed(1), // Use 2 columns instead of 4\n                horizontalArrangement = Arrangement.spacedBy(16.dp), // Space between columns\n                verticalArrangement = Arrangement.spacedBy(16.dp), // Space between rows\n                contentPadding = PaddingValues(16.dp), // Padding around the grid\n                content = {\n                    items(infoList.listOfInfo) { infodata ->\n                        InfoCard(infodata, infodata.id, navController)\n                    }\n                }\n            )\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InfoCard(info: InfoObjects, id: String, navController: NavController) {\n    Card(\n        modifier = Modifier\n            //.fillMaxWidth()\n            .padding(10.dp), // Add padding to create space around the card\n        onClick = {\n            navController.navigate(\"InfoCard/$id\")\n        }\n    ) {\n\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .size(75.dp)\n                .background(Color(0xFFBEDDF5))\n\n\n        )\n        {\n            Text(\n                text = info.name,\n                fontSize = 12.sp,\n                color = White,\n                style = TextStyle(\n                    shadow = Shadow(\n                        color = Color.Black,\n                        blurRadius = 20f,\n                        offset = Offset(0f, 0f)\n                    ),\n                    fontFamily = FontFamily.SansSerif,\n                    fontWeight = FontWeight.Bold\n                ),\n                modifier = Modifier.padding(8.dp).align(Alignment.CenterHorizontally) // Padding inside the column for the text\n            )\n            val painter = painterResource(id = info.icon)\n            Image(modifier = Modifier.align(Alignment.CenterHorizontally).size(50.dp), painter = painter, contentDescription = \"Temperature\")\n\n        }\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt
---- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt	(revision 045765b6bceb7e553ade4362819cee59ca38e121)
-+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt	(date 1715071769941)
-@@ -37,6 +37,7 @@
- import androidx.compose.ui.graphics.Brush
- import androidx.compose.ui.graphics.Color
- import androidx.compose.ui.graphics.Color.Companion.White
-+import androidx.compose.ui.graphics.ColorFilter
- import androidx.compose.ui.graphics.Shadow
- import androidx.compose.ui.layout.ContentScale
- import androidx.compose.ui.platform.LocalContext
-@@ -52,6 +53,7 @@
- import androidx.compose.ui.text.font.FontWeight
- import coil.request.ImageRequest
- import no.uio.ifi.in2000.prosjekt.Model.InfoObjects
-+import no.uio.ifi.in2000.prosjekt.R
- import no.uio.ifi.in2000.prosjekt.ui.CommonUIUtils.InfoUIState
- 
- 
-@@ -88,8 +90,21 @@
-                 .background(
-                     Color(0xFF1F3468)
- 
--                ).padding(top = 65.dp))
-+                )
-+                .padding(top = 65.dp),
-+            verticalArrangement = Arrangement.Center,
-+            horizontalAlignment = Alignment.CenterHorizontally
-+        )
-         {
-+            val img = painterResource(id = R.drawable.learn)
-+            Image(
-+                painter = img,
-+                contentDescription = "learningHat",
-+                colorFilter = ColorFilter.tint((Color(0xFFBEDDF5)
-+                        )
-+                ),
-+                modifier = Modifier.size(100.dp)
-+                )
-             LazyVerticalGrid(
-                 modifier = Modifier.fillMaxSize(),
-                 columns = GridCells.Fixed(1), // Use 2 columns instead of 4
-@@ -140,10 +155,14 @@
-                     fontFamily = FontFamily.SansSerif,
-                     fontWeight = FontWeight.Bold
-                 ),
--                modifier = Modifier.padding(8.dp).align(Alignment.CenterHorizontally) // Padding inside the column for the text
-+                modifier = Modifier
-+                    .padding(8.dp)
-+                    .align(Alignment.CenterHorizontally) // Padding inside the column for the text
-             )
-             val painter = painterResource(id = info.icon)
--            Image(modifier = Modifier.align(Alignment.CenterHorizontally).size(50.dp), painter = painter, contentDescription = "Temperature")
-+            Image(modifier = Modifier
-+                .align(Alignment.CenterHorizontally)
-+                .size(50.dp), painter = painter, contentDescription = "Temperature")
- 
-         }
-     }
-Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.os.Build\nimport android.util.Log\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Home\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.Star\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.BottomAppBar\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.OutlinedTextFieldDefaults\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.TextFieldColors\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.clearCompositionErrors\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.focus.focusRequester\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalSoftwareKeyboardController\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Popup\nimport androidx.core.app.ActivityCompat\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport com.mapbox.geojson.Point\nimport com.mapbox.maps.MapboxExperimental\nimport com.mapbox.maps.ViewAnnotationAnchor\nimport com.mapbox.maps.dsl.cameraOptions\nimport com.mapbox.maps.extension.compose.MapboxMap\nimport com.mapbox.maps.extension.compose.animation.viewport.rememberMapViewportState\nimport com.mapbox.maps.extension.compose.annotation.ViewAnnotation\nimport com.mapbox.maps.extension.compose.annotation.generated.CircleAnnotation\nimport com.mapbox.maps.plugin.compass.generated.CompassSettings\nimport com.mapbox.maps.viewannotation.annotationAnchors\nimport com.mapbox.maps.viewannotation.geometry\nimport com.mapbox.maps.viewannotation.viewAnnotationOptions\nimport no.uio.ifi.in2000.prosjekt.R\nimport java.time.ZoneId\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\nimport kotlin.math.roundToInt\n\n\nval pk = \"pk.eyJ1IjoiY3BicmFuZGEiLCJhIjoiY2x1aTZkNTZnMDE1bzJqbXZ6NDdhc2lraCJ9.oJDEC855zszNVymnAHxKgQ\"\n\nval sk = \"sk.eyJ1IjoiY3BicmFuZGEiLCJhIjoiY2x1aTc4Z2p4MDFnaTJqbXlpdDF2NDVkYSJ9.hJmaf_tc7gS8J2aTwHYPKw\"\n\n@RequiresApi(Build.VERSION_CODES.O)\n@OptIn(MapboxExperimental::class, ExperimentalMaterial3Api::class)\n@Composable\nfun MapScreen(activity: Activity, navController: NavController, mapScreenViewModel: MapScreenViewModel = viewModel(),\n              mapViewModel: MapViewModel = viewModel(),\n              metAlertViewModel: MetAlertViewModel = viewModel(),\n              enturViewModel: EnTurViewModel = viewModel()) {\n\n    val mViewportState = rememberMapViewportState()\n    var showViewAnnotation by remember {\n        mutableStateOf(false)\n    }\n    val dataState by mapScreenViewModel.HVUIState.collectAsState()\n    var visible by remember {\n        mutableStateOf(true)\n    }\n    var showSearch by remember { mutableStateOf(false) }\n\n    var point by remember {mutableStateOf(Point.fromLngLat(10.0, 59.0))}\n    val context = LocalContext.current.applicationContext // Context til skjerm\n\n    val fusedLocationClient : FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)\n    val sharedPreferences = context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE) // User preferences\n    val isLocationPermissionGranted = sharedPreferences.getBoolean(\"location_permission_enabled\", false)\n    var lat = \"59.0\"\n    var lon = \"11.0\"\n    Scaffold(\n        topBar = {\n            TopAppBar(\n\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF1F3468),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                        Text(\"Logo\", color = Color.White)\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color.White\n                        )\n                    }\n                },\n                actions = {\n                    IconButton(onClick = { enturViewModel.toggleVisibility() }) {\n                        Icon(\n                            Icons.Default.Search,\n                            contentDescription = \"Search\",\n                            tint = Color.White\n                        )\n                    }\n                }\n            )\n        },\n        bottomBar = {\n            BottomAppBar(\n                containerColor = Color(0xFF1F3468) // Matching the top bar color\n            ) {\n                Row(\n                    horizontalArrangement = Arrangement.SpaceEvenly,\n                    modifier = Modifier.fillMaxWidth()\n                ) {\n                    IconButton(onClick = { /*TODO*/ }) {\n                        Icon(\n                            imageVector = Icons.Default.Star, // Change icons as needed\n                            contentDescription = \"Temp\",\n                            tint = Color.White\n                        )\n                    }\n                    IconButton(onClick = {metAlertViewModel.togglePopupVisibility() }) {\n                        Icon(\n                            imageVector = Icons.Default.Warning, // Change icons as needed\n                            contentDescription = \"MetAlerts\",\n                            tint = Color.White\n                        )\n                    }\n                    IconButton(onClick = {\n                        if(ActivityCompat.checkSelfPermission(\n                                context,\n                                Manifest.permission.ACCESS_FINE_LOCATION\n                            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n                                context,\n                                Manifest.permission.ACCESS_COARSE_LOCATION\n                            ) != PackageManager.PERMISSION_GRANTED) {\n                                ActivityCompat.requestPermissions(\n                                    activity,\n                                    arrayOf<String>(\n                                        Manifest.permission.ACCESS_FINE_LOCATION,\n                                        Manifest.permission.ACCESS_COARSE_LOCATION\n                                    ),\n                                    100\n                                )\n                            }\n                        else {\n                            fusedLocationClient.lastLocation\n                                .addOnSuccessListener { location: Location? ->\n                                    if (location != null) {\n                                        mViewportState.setCameraOptions{\n                                            center(Point.fromLngLat(\n                                                location.longitude,\n                                                location.latitude\n                                            ))\n                                        }\n                                    } else {\n                                        mViewportState.setCameraOptions{\n                                            center(mapViewModel.mapCenter)\n                                        }\n                                    }\n                                }\n                            }\n                    }) {\n                    Icon(\n                        imageVector = Icons.Default.LocationOn, // Change icons as needed\n                        contentDescription = \"GoToMyLocation\",\n                        tint = Color.White\n                    )\n                    }\n                }\n            }\n        },\n    ) { innerPadding ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(innerPadding),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            metAlerts(metAlertViewModel = metAlertViewModel)\n            searchBar(enturViewModel = enturViewModel)\n            MapboxMap(\n                modifier = Modifier\n                    .weight(1f)\n                    .fillMaxSize(),\n                mapViewportState = mViewportState.apply {\n                    setCameraOptions {\n                        zoom(8.0)\n                        center(mapViewModel.mapCenter)\n                        if(ActivityCompat.checkSelfPermission( // Hvis !permission så gå til standard point\n                                context,\n                                Manifest.permission.ACCESS_FINE_LOCATION\n                            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n                                context,\n                                Manifest.permission.ACCESS_COARSE_LOCATION\n                            ) != PackageManager.PERMISSION_GRANTED) {\n                            ActivityCompat.requestPermissions(\n                                activity,\n                                arrayOf<String>(\n                                    Manifest.permission.ACCESS_FINE_LOCATION,\n                                    Manifest.permission.ACCESS_COARSE_LOCATION\n                                ),\n                                100\n                            )\n                            center(mapViewModel.mapCenter)\n                        }\n                        else { // Hvis permission gå til brukers lokasjon\n                            fusedLocationClient.lastLocation\n                                .addOnSuccessListener { location: Location? ->\n                                if (location != null) {\n                                    center(\n                                        Point.fromLngLat(\n                                            location.longitude,\n                                            location.latitude\n                                        )\n                                    )\n                                } else {\n                                    center(mapViewModel.mapCenter)\n                                }\n                            }\n                        }\n                        pitch(20.0)\n                        bearing(0.0)\n                    }\n                },\n                onMapClickListener = { clickedPoint ->\n                    // Extracting clicked coordinates\n                    lat = clickedPoint.latitude().toString()\n                    lon = clickedPoint.longitude().toString()\n                    mViewportState.setCameraOptions {\n                        //zoom(mViewportState.cameraState.zoom*1.5) // Adjust the zoom level as needed\n                        center(clickedPoint)\n                        pitch(0.0)\n                        bearing(0.0)\n                    }\n                    mapScreenViewModel.getNewData(lat,lon)\n                    point = Point.fromLngLat(clickedPoint.longitude(),clickedPoint.latitude())\n                    showViewAnnotation = true\n                    visible = true\n                    // Do something with the clicked coordinates\n                    Log.i(\"MapClick\", \"Clicked coordinates: $lat, $lon\")\n                    //Log.i(\"MapClick\", \"Place: ${dataState.bigDataCloud?.city}\")\n                    true\n                },\n            ){\n                if (showViewAnnotation) {\n                    if(visible){\n                        CircleAnnotation(point = point)\n                    }\n                    ViewAnnotation(\n                        options = viewAnnotationOptions {\n                            geometry(point)\n                            annotationAnchors(\n                                {\n                                    anchor(ViewAnnotationAnchor.BOTTOM_LEFT)\n                                    offsetY(50.0)\n                                }\n                            )\n                            allowOverlap(false)\n                            visible(visible)\n                        },\n                        ) {\n                        Card(\n                            shape = RoundedCornerShape(15.dp),\n                            modifier = Modifier\n                                .fillMaxHeight(0.2f)\n                                .fillMaxWidth(0.5f)\n                        )\n                        {\n                            Box {\n                                Column(\n                                    verticalArrangement = Arrangement.SpaceEvenly,\n                                    horizontalAlignment = Alignment.Start,\n                                    modifier = Modifier\n                                        .background(Color.White)\n                                        .padding(16.dp)\n                                        .fillMaxSize()\n                                ) {\n                                    Row(\n                                        horizontalArrangement = Arrangement.SpaceBetween,\n                                        modifier = Modifier.fillMaxWidth()\n                                    ) {\n                                        Row(verticalAlignment = Alignment.CenterVertically,\n                                            horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n                                            val painter = painterResource(id = R.drawable.thermometer)\n                                            Image(painter = painter, contentDescription = \"Temperature\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n                                            Column(horizontalAlignment = Alignment.Start) {\n                                                Text(text = \"Sjø-temp\", fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"temperature\" }?.value?.toDouble()?.roundToInt()} °C\")\n                                            }\n                                        }\n                                        Row(verticalAlignment = Alignment.CenterVertically,\n                                            horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n                                            val painter = painterResource(id = R.drawable.wind)\n                                            Image(painter = painter, contentDescription = \"Wind\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n\n                                            Column(horizontalAlignment = Alignment.Start) {\n                                                Text(text = \"Vind\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"wind_length\" }?.value?.toDouble()?.roundToInt()} m/s\")\n                                            }\n                                        }\n                                    }\n                                    Row(\n                                        horizontalArrangement = Arrangement.SpaceBetween,\n                                        modifier = Modifier.fillMaxWidth()\n                                    ) {\n                                        Row(verticalAlignment = Alignment.CenterVertically,\n                                            horizontalArrangement = Arrangement.spacedBy(8.dp),\n                                        ) {\n                                            val painter = painterResource(id = R.drawable.waves)\n                                            Image(painter = painter, contentDescription = \"Current\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n                                            Column(horizontalAlignment = Alignment.Start) {\n                                                Text(text = \"Strøm\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                Text(text = \"${String.format(\"%.1f\", dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"current_length\" }?.value?.toDouble())} m/s\")\n                                            }\n                                        }\n                                        Row(verticalAlignment = Alignment.CenterVertically,\n                                            horizontalArrangement = Arrangement.spacedBy(8.dp)){\n                                            val painter = painterResource(id = R.drawable.salinity)\n                                            Image(painter = painter, contentDescription = \"Salinity\", modifier = Modifier.size(18.dp))\n                                            Column(horizontalAlignment = Alignment.Start) {\n                                                Text(text = \"Salt\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"salinity\" }?.value?.toDouble()?.roundToInt()} ‰\", textAlign = TextAlign.Center)\n                                            }\n                                        }\n                                    }\n                                }\n                                IconButton(\n                                    onClick = {visible = false},\n                                    modifier = Modifier\n                                        .size(24.dp)  // Set the size of the IconButton to be small\n                                        .align(Alignment.TopStart)  // Align the button to the top-left corner of the Box\n                                ) {\n                                    Icon(\n                                        imageVector = Icons.Default.Clear,\n                                        contentDescription = \"Close\",\n                                        tint = Color.DarkGray\n                                    )\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun metAlerts(metAlertViewModel: MetAlertViewModel){\n    val metAlertState by metAlertViewModel.MAUiState.collectAsState()\n    val isPopupVisible by metAlertViewModel.isPopupVisible.collectAsState()\n    val antallVarsler = metAlertState.MetAlerts?.features?.size\n\n    if(isPopupVisible){\n        Popup(\n            alignment = Alignment.TopCenter,\n            onDismissRequest = { metAlertViewModel.togglePopupVisibility() }, // Close popup when dismissed\n        ) {\n            if(antallVarsler != null){\n                if(antallVarsler == 0){\n                    Column(modifier = Modifier.fillMaxWidth()) {\n                        Text(text = \"Ingen farevarsler funnet for sjøen!\")\n                    }\n                } else {\n                    LazyColumn(\n                        modifier = Modifier\n                            .background(Color.Black.copy(alpha = 0.7f))\n                            .padding(16.dp)\n                            .fillMaxHeight(0.82f)\n                            .clickable { metAlertViewModel.togglePopupVisibility() }\n                    ) {\n                        items(antallVarsler){ metalertNr ->\n                            ExpandableCard(metAlertState, metalertNr)\n                        }\n                    }\n                }\n            }\n            IconButton(\n                onClick = { metAlertViewModel.togglePopupVisibility() },\n                modifier = Modifier\n                    .size(30.dp)  // Set the size of the IconButton to be small\n            ) {\n                Icon(\n                    imageVector = Icons.Default.Clear,\n                    contentDescription = \"Close\",\n                    tint = Color.White\n                )\n            }\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun ExpandableCard(metAlertState: MetAlersUiState, nr : Int) {\n    var expanded by remember { mutableStateOf (false) }\n    val inputString = (metAlertState.MetAlerts?.features?.get(nr)?.properties?.title).toString()\n    val parts = inputString.split(\",\")\n    val result = parts.take(3).joinToString(\",\").trim()\n\n    val warning = painterResource(id = R.drawable.warning)\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n    val fareStart = metAlertState.MetAlerts?.features?.get(nr)?.timeinterval?.interval?.get(0)\n        ?.let { formatToNorwegianTime(it) }\n    val fareSlutt = metAlertState.MetAlerts?.features?.get(nr)?.timeinterval?.interval?.get(1)\n        ?.let { formatToNorwegianTime(it) }\n\n    val yellowGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFF9C4), // Light yellow\n            Color(0xFFFFEB3B), // Vivid yellow\n            Color(0xFFFFD726)  // Dark yellow\n        )\n    )\n    val redGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFCDD2), // Light red\n            Color(0xFFE57373), // Medium red\n            Color(0xFFD32F2F)  // Dark red\n        )\n    )\n    val orangeGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFE0B2), // Light orange\n            Color(0xFFFFB74D), // Medium orange\n            Color(0xFFFB8C00)  // Dark orange\n        )\n    )\n    val greenGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFA5D6A7), // Light green\n            Color(0xFF66BB6A), // Medium green\n            Color(0xFF2E7D32)  // Dark green\n        )\n    )\n    val matrixColor = when(\"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.riskMatrixColor}\") {\n        \"Red\" -> redGradient\n        \"Orange\" -> orangeGradient\n        \"Yellow\" -> yellowGradient\n        else -> greenGradient // Default color\n    }\n    Card(\n        shape = RoundedCornerShape(8.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n            pressedElevation = 8.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 8.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 8.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(matrixColor)){\n            Column() {\n                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()){\n                    Image(painter = warning, contentDescription = \"Warning\", modifier = Modifier.size(40.dp), Alignment.Center)\n                    Column(modifier = Modifier\n                        .weight(1f)\n                        .padding(horizontal = 16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally) {\n                        Text(\n                            text = result,\n                            style = MaterialTheme.typography.titleMedium,\n                            modifier = Modifier.padding(12.dp),\n                            textAlign = TextAlign.Center,\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\n                            text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.riskMatrixColor}\",\n                            style = MaterialTheme.typography.bodyMedium,\n                            modifier = Modifier.padding(8.dp),\n                            textAlign = TextAlign.Center\n                        )\n                    }\n                    Image(painter = toggleIconPainter, contentDescription = \"Expand\", modifier = Modifier.size(40.dp), Alignment.CenterStart)\n                }\n                if (expanded) {\n                    Text(\n                        text = \"Anbefalinger:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.instruction}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Beskrivelse:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.description}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Konsekvenser:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.consequences}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Område:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.area}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Tidsperiode:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"Fra $fareStart \\nTil $fareSlutt\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                }\n            }\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\nfun formatToNorwegianTime(isoDateTime: String): String { // Gjør dato-format til lesbart format\n    val zonedDateTime = ZonedDateTime.parse(isoDateTime)\n\n    val osloZone = zonedDateTime.withZoneSameInstant(ZoneId.of(\"Europe/Oslo\"))\n\n    val formatter = DateTimeFormatter.ofPattern(\"dd.MM.yyyy 'kl.' HH:mm\")\n\n    return osloZone.format(formatter)\n}\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun MinPopup2(mapScreenViewModel: MapScreenViewModel){\n    val dataState by mapScreenViewModel.HVUIState.collectAsState()\n    val isPopupVisible by mapScreenViewModel.isPopupVisible.collectAsState()\n    if(isPopupVisible){\n        Popup(\n            onDismissRequest = {     } // Close popup when dismissed\n        ) {\n            Card(\n                shape = RoundedCornerShape(15.dp),\n                modifier = Modifier\n                    .fillMaxHeight(0.15f)\n                    .fillMaxWidth(0.7f)\n            ) {\n                Column(\n                    verticalArrangement = Arrangement.SpaceEvenly,\n                    horizontalAlignment = Alignment.Start,\n                    modifier = Modifier\n                        .background(Color.LightGray)\n                        .padding(16.dp)\n                        .fillMaxSize()\n                ){\n                    Row(\n                        horizontalArrangement = Arrangement.SpaceBetween,\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Row(verticalAlignment = Alignment.CenterVertically) {\n                            val painter = painterResource(id = R.drawable.icons8_thermometer_100)\n                            Image(painter = painter, contentDescription = \"Temperature\", modifier = Modifier.size(24.dp), alignment = Alignment.CenterStart)\n                            Column(horizontalAlignment = Alignment.Start) {\n                                Text(text = \"Sjø-temp\", fontFamily = FontFamily.Serif)\n                                Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"temperature\" }?.value?.toDouble()?.roundToInt()} °C\")\n                            }\n                        }\n                        Row(verticalAlignment = Alignment.CenterVertically) {\n                            val painter = painterResource(id = R.drawable.icons8_wind_100)\n                            Image(painter = painter, contentDescription = \"Wind\", modifier = Modifier.size(24.dp))\n\n                            Column(horizontalAlignment = Alignment.Start) {\n                                Text(text = \"Vindstyrke\",fontFamily = FontFamily.Serif)\n                                Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"wind_length\" }?.value?.toDouble()?.roundToInt()} m/s\")\n                            }\n                        }\n                    }\n                    Row(\n                        horizontalArrangement = Arrangement.SpaceBetween,\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Row(verticalAlignment = Alignment.CenterVertically) {\n                            val painter = painterResource(id = R.drawable.icons8_wave_100)\n                            Image(painter = painter, contentDescription = \"Current\", modifier = Modifier.size(24.dp), Alignment.CenterEnd)\n                            Column(horizontalAlignment = Alignment.Start) {\n                                Text(text = \"Strøm\",fontFamily = FontFamily.Serif)\n                                Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"current_length\" }?.value?.toDouble()?.roundToInt()} m/s\")\n                            }\n                        }\n                        Row(verticalAlignment = Alignment.CenterVertically){\n                            val painter = painterResource(id = R.drawable.icons8_salt_shaker_90)\n                            Image(painter = painter, contentDescription = \"Salinity\", modifier = Modifier.size(24.dp))\n                            Column(horizontalAlignment = Alignment.Start) {\n                                Text(text = \"Saltinnhold\",fontFamily = FontFamily.Serif)\n                                Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"salinity\" }?.value?.toDouble()?.roundToInt()} ‰\", textAlign = TextAlign.Center)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun searchBar(enturViewModel : EnTurViewModel){\n    val isVisible by enturViewModel.isPopupVisible.collectAsState()\n    val keyboardController = LocalSoftwareKeyboardController.current\n    var text by remember { mutableStateOf(\"\") }\n    if(isVisible){\n        Popup(\n            alignment = Alignment.TopCenter,\n            onDismissRequest = { enturViewModel.toggleVisibility() },\n        ) {\n            Box(modifier = Modifier\n                .fillMaxSize()\n                .background(Color.Black.copy(alpha = 0.7f))\n                .clip(RoundedCornerShape(40.dp))\n            ) {\n                Column(modifier = Modifier\n                    .align(Alignment.Center)\n                    .fillMaxSize(0.7f)\n                    .background(Color.White)\n                    //.clip(RoundedCornerShape(30.dp))\n                ) {\n                    OutlinedTextField(\n                        value = text,\n                        onValueChange = {text = it},\n                        modifier = Modifier.\n                        fillMaxWidth(),\n                        placeholder = { Text(text = \"Søk\") },\n                        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                        keyboardActions = KeyboardActions(\n                            onDone = {keyboardController?.hide()}\n                        ),\n                        colors = OutlinedTextFieldDefaults.colors(Color.White)\n                    )\n                    Button(onClick = { enturViewModel.toggleVisibility() }) {\n                        Text(text = \"Lukk\")\n                    }\n                }\n            }\n        }\n    }\n}\n\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt
---- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt	(revision 045765b6bceb7e553ade4362819cee59ca38e121)
-+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt	(date 1715076224683)
-@@ -38,6 +38,7 @@
- import androidx.compose.material3.Button
- import androidx.compose.material3.Card
- import androidx.compose.material3.CardDefaults
-+import androidx.compose.material3.CircularProgressIndicator
- import androidx.compose.material3.ExperimentalMaterial3Api
- import androidx.compose.material3.Icon
- import androidx.compose.material3.IconButton
-@@ -66,6 +67,7 @@
- import androidx.compose.ui.focus.focusRequester
- import androidx.compose.ui.graphics.Brush
- import androidx.compose.ui.graphics.Color
-+import androidx.compose.ui.layout.ContentScale
- import androidx.compose.ui.platform.LocalContext
- import androidx.compose.ui.platform.LocalSoftwareKeyboardController
- import androidx.compose.ui.res.painterResource
-@@ -79,6 +81,8 @@
- import androidx.core.app.ActivityCompat
- import androidx.lifecycle.viewmodel.compose.viewModel
- import androidx.navigation.NavController
-+import coil.compose.AsyncImage
-+import coil.request.ImageRequest
- import com.google.android.gms.location.FusedLocationProviderClient
- import com.google.android.gms.location.LocationServices
- import com.mapbox.geojson.Point
-@@ -121,7 +125,7 @@
-         mutableStateOf(true)
-     }
-     var showSearch by remember { mutableStateOf(false) }
--
-+    val isLoading by mapScreenViewModel.isPopupVisible.collectAsState()
-     var point by remember {mutableStateOf(Point.fromLngLat(10.0, 59.0))}
-     val context = LocalContext.current.applicationContext // Context til skjerm
- 
-@@ -132,8 +136,7 @@
-     var lon = "11.0"
-     Scaffold(
-         topBar = {
--            TopAppBar(
--
-+            TopAppBar(modifier = Modifier,
-                 colors = TopAppBarDefaults.topAppBarColors(
-                     containerColor = Color(0xFF1F3468),
-                     titleContentColor = Color.Black,
-@@ -164,20 +167,13 @@
-             )
-         },
-         bottomBar = {
--            BottomAppBar(
-+            BottomAppBar(modifier = Modifier,
-                 containerColor = Color(0xFF1F3468) // Matching the top bar color
-             ) {
-                 Row(
-                     horizontalArrangement = Arrangement.SpaceEvenly,
-                     modifier = Modifier.fillMaxWidth()
-                 ) {
--                    IconButton(onClick = { /*TODO*/ }) {
--                        Icon(
--                            imageVector = Icons.Default.Star, // Change icons as needed
--                            contentDescription = "Temp",
--                            tint = Color.White
--                        )
--                    }
-                     IconButton(onClick = {metAlertViewModel.togglePopupVisibility() }) {
-                         Icon(
-                             imageVector = Icons.Default.Warning, // Change icons as needed
-@@ -304,7 +300,7 @@
-             ){
-                 if (showViewAnnotation) {
-                     if(visible){
--                        CircleAnnotation(point = point)
-+                        CircleAnnotation(point = point, circleBlur = 1.0)
-                     }
-                     ViewAnnotation(
-                         options = viewAnnotationOptions {
-@@ -335,51 +331,57 @@
-                                         .padding(16.dp)
-                                         .fillMaxSize()
-                                 ) {
--                                    Row(
--                                        horizontalArrangement = Arrangement.SpaceBetween,
--                                        modifier = Modifier.fillMaxWidth()
--                                    ) {
--                                        Row(verticalAlignment = Alignment.CenterVertically,
--                                            horizontalArrangement = Arrangement.spacedBy(8.dp)) {
--                                            val painter = painterResource(id = R.drawable.thermometer)
--                                            Image(painter = painter, contentDescription = "Temperature", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
--                                            Column(horizontalAlignment = Alignment.Start) {
--                                                Text(text = "Sjø-temp", fontFamily = FontFamily.Serif, fontSize = 12.sp)
--                                                Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "temperature" }?.value?.toDouble()?.roundToInt()} °C")
--                                            }
--                                        }
--                                        Row(verticalAlignment = Alignment.CenterVertically,
--                                            horizontalArrangement = Arrangement.spacedBy(8.dp)) {
--                                            val painter = painterResource(id = R.drawable.wind)
--                                            Image(painter = painter, contentDescription = "Wind", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
-+                                    if(isLoading){
-+                                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
-+                                            CircularProgressIndicator(modifier = Modifier)
-+                                        }
-+                                    } else {
-+                                        Row(
-+                                            horizontalArrangement = Arrangement.SpaceBetween,
-+                                            modifier = Modifier.fillMaxWidth()
-+                                        ) {
-+                                            Row(verticalAlignment = Alignment.CenterVertically,
-+                                                horizontalArrangement = Arrangement.spacedBy(8.dp)) {
-+                                                val painter = painterResource(id = R.drawable.thermometer)
-+                                                Image(painter = painter, contentDescription = "Temperature", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
-+                                                Column(horizontalAlignment = Alignment.Start) {
-+                                                    Text(text = "Sjø-temp", fontFamily = FontFamily.Serif, fontSize = 12.sp)
-+                                                    Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "temperature" }?.value?.toDouble()?.roundToInt()} °C")
-+                                                }
-+                                            }
-+                                            Row(verticalAlignment = Alignment.CenterVertically,
-+                                                horizontalArrangement = Arrangement.spacedBy(8.dp)) {
-+                                                val painter = painterResource(id = R.drawable.wind)
-+                                                Image(painter = painter, contentDescription = "Wind", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
- 
--                                            Column(horizontalAlignment = Alignment.Start) {
--                                                Text(text = "Vind",fontFamily = FontFamily.Serif, fontSize = 12.sp)
--                                                Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "wind_length" }?.value?.toDouble()?.roundToInt()} m/s")
--                                            }
--                                        }
--                                    }
--                                    Row(
--                                        horizontalArrangement = Arrangement.SpaceBetween,
--                                        modifier = Modifier.fillMaxWidth()
--                                    ) {
--                                        Row(verticalAlignment = Alignment.CenterVertically,
--                                            horizontalArrangement = Arrangement.spacedBy(8.dp),
--                                        ) {
--                                            val painter = painterResource(id = R.drawable.waves)
--                                            Image(painter = painter, contentDescription = "Current", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
--                                            Column(horizontalAlignment = Alignment.Start) {
--                                                Text(text = "Strøm",fontFamily = FontFamily.Serif, fontSize = 12.sp)
--                                                Text(text = "${String.format("%.1f", dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "current_length" }?.value?.toDouble())} m/s")
--                                            }
--                                        }
--                                        Row(verticalAlignment = Alignment.CenterVertically,
--                                            horizontalArrangement = Arrangement.spacedBy(8.dp)){
--                                            val painter = painterResource(id = R.drawable.salinity)
--                                            Image(painter = painter, contentDescription = "Salinity", modifier = Modifier.size(18.dp))
--                                            Column(horizontalAlignment = Alignment.Start) {
--                                                Text(text = "Salt",fontFamily = FontFamily.Serif, fontSize = 12.sp)
--                                                Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "salinity" }?.value?.toDouble()?.roundToInt()} ‰", textAlign = TextAlign.Center)
-+                                                Column(horizontalAlignment = Alignment.Start) {
-+                                                    Text(text = "Vind",fontFamily = FontFamily.Serif, fontSize = 12.sp)
-+                                                    Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "wind_length" }?.value?.toDouble()?.roundToInt()} m/s")
-+                                                }
-+                                            }
-+                                        }
-+                                        Row(
-+                                            horizontalArrangement = Arrangement.SpaceBetween,
-+                                            modifier = Modifier.fillMaxWidth()
-+                                        ) {
-+                                            Row(verticalAlignment = Alignment.CenterVertically,
-+                                                horizontalArrangement = Arrangement.spacedBy(8.dp),
-+                                            ) {
-+                                                val painter = painterResource(id = R.drawable.waves)
-+                                                Image(painter = painter, contentDescription = "Current", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
-+                                                Column(horizontalAlignment = Alignment.Start) {
-+                                                    Text(text = "Strøm",fontFamily = FontFamily.Serif, fontSize = 12.sp)
-+                                                    Text(text = "${String.format("%.1f", dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "current_length" }?.value?.toDouble())} m/s")
-+                                                }
-+                                            }
-+                                            Row(verticalAlignment = Alignment.CenterVertically,
-+                                                horizontalArrangement = Arrangement.spacedBy(8.dp)){
-+                                                val painter = painterResource(id = R.drawable.salinity)
-+                                                Image(painter = painter, contentDescription = "Salinity", modifier = Modifier.size(18.dp))
-+                                                Column(horizontalAlignment = Alignment.Start) {
-+                                                    Text(text = "Salt",fontFamily = FontFamily.Serif, fontSize = 12.sp)
-+                                                    Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "salinity" }?.value?.toDouble()?.roundToInt()} ‰", textAlign = TextAlign.Center)
-+                                                }
-                                             }
-                                         }
-                                     }
-@@ -419,15 +421,17 @@
-         ) {
-             if(antallVarsler != null){
-                 if(antallVarsler == 0){
--                    Column(modifier = Modifier.fillMaxWidth()) {
--                        Text(text = "Ingen farevarsler funnet for sjøen!")
-+                    Box(modifier = Modifier.fillMaxHeight(0.83f)
-+                        .background(Color.Black.copy(alpha = 0.7f))
-+                        .fillMaxWidth(), contentAlignment = Alignment.Center) {
-+                        Text(text = "Ingen farevarsler funnet for sjøen!", color = Color.White, textAlign = TextAlign.Center, fontWeight = FontWeight.Black)
-                     }
-                 } else {
-                     LazyColumn(
-                         modifier = Modifier
-                             .background(Color.Black.copy(alpha = 0.7f))
-                             .padding(16.dp)
--                            .fillMaxHeight(0.82f)
-+                            .fillMaxHeight(0.8f)
-                             .clickable { metAlertViewModel.togglePopupVisibility() }
-                     ) {
-                         items(antallVarsler){ metalertNr ->
-@@ -439,7 +443,7 @@
-             IconButton(
-                 onClick = { metAlertViewModel.togglePopupVisibility() },
-                 modifier = Modifier
--                    .size(30.dp)  // Set the size of the IconButton to be small
-+                    .size(35.dp)  // Set the size of the IconButton to be small
-             ) {
-                 Icon(
-                     imageVector = Icons.Default.Clear,
-@@ -463,6 +467,7 @@
-     val expandMoreIcon = painterResource(id = R.drawable.expand_more)
-     val expandLessIcon = painterResource(id = R.drawable.expand_less)
-     val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
-+    val imageUri = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.resources?.firstOrNull { it.mimeType?.startsWith("image/png") == true }?.uri
- 
-     val fareStart = metAlertState.MetAlerts?.features?.get(nr)?.timeinterval?.interval?.get(0)
-         ?.let { formatToNorwegianTime(it) }
-@@ -600,6 +605,19 @@
-                         style = MaterialTheme.typography.bodyMedium,
-                         modifier = Modifier.padding(8.dp)
-                     )
-+                    if(imageUri != null){
-+                        AsyncImage(
-+                            model = ImageRequest.Builder(LocalContext.current)
-+                                .data(imageUri)
-+                                .crossfade(true)
-+                                .build(),
-+                            contentDescription = "Loaded Image",
-+                            modifier = Modifier
-+                                .fillMaxWidth()
-+                                .clickable { },
-+                            contentScale = ContentScale.Crop
-+                        )
-+                    }
-                 }
-             }
-         }
-@@ -616,77 +634,6 @@
- 
-     return osloZone.format(formatter)
- }
--@RequiresApi(Build.VERSION_CODES.O)
--@Composable
--fun MinPopup2(mapScreenViewModel: MapScreenViewModel){
--    val dataState by mapScreenViewModel.HVUIState.collectAsState()
--    val isPopupVisible by mapScreenViewModel.isPopupVisible.collectAsState()
--    if(isPopupVisible){
--        Popup(
--            onDismissRequest = {     } // Close popup when dismissed
--        ) {
--            Card(
--                shape = RoundedCornerShape(15.dp),
--                modifier = Modifier
--                    .fillMaxHeight(0.15f)
--                    .fillMaxWidth(0.7f)
--            ) {
--                Column(
--                    verticalArrangement = Arrangement.SpaceEvenly,
--                    horizontalAlignment = Alignment.Start,
--                    modifier = Modifier
--                        .background(Color.LightGray)
--                        .padding(16.dp)
--                        .fillMaxSize()
--                ){
--                    Row(
--                        horizontalArrangement = Arrangement.SpaceBetween,
--                        modifier = Modifier.fillMaxWidth()
--                    ) {
--                        Row(verticalAlignment = Alignment.CenterVertically) {
--                            val painter = painterResource(id = R.drawable.icons8_thermometer_100)
--                            Image(painter = painter, contentDescription = "Temperature", modifier = Modifier.size(24.dp), alignment = Alignment.CenterStart)
--                            Column(horizontalAlignment = Alignment.Start) {
--                                Text(text = "Sjø-temp", fontFamily = FontFamily.Serif)
--                                Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "temperature" }?.value?.toDouble()?.roundToInt()} °C")
--                            }
--                        }
--                        Row(verticalAlignment = Alignment.CenterVertically) {
--                            val painter = painterResource(id = R.drawable.icons8_wind_100)
--                            Image(painter = painter, contentDescription = "Wind", modifier = Modifier.size(24.dp))
--
--                            Column(horizontalAlignment = Alignment.Start) {
--                                Text(text = "Vindstyrke",fontFamily = FontFamily.Serif)
--                                Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "wind_length" }?.value?.toDouble()?.roundToInt()} m/s")
--                            }
--                        }
--                    }
--                    Row(
--                        horizontalArrangement = Arrangement.SpaceBetween,
--                        modifier = Modifier.fillMaxWidth()
--                    ) {
--                        Row(verticalAlignment = Alignment.CenterVertically) {
--                            val painter = painterResource(id = R.drawable.icons8_wave_100)
--                            Image(painter = painter, contentDescription = "Current", modifier = Modifier.size(24.dp), Alignment.CenterEnd)
--                            Column(horizontalAlignment = Alignment.Start) {
--                                Text(text = "Strøm",fontFamily = FontFamily.Serif)
--                                Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "current_length" }?.value?.toDouble()?.roundToInt()} m/s")
--                            }
--                        }
--                        Row(verticalAlignment = Alignment.CenterVertically){
--                            val painter = painterResource(id = R.drawable.icons8_salt_shaker_90)
--                            Image(painter = painter, contentDescription = "Salinity", modifier = Modifier.size(24.dp))
--                            Column(horizontalAlignment = Alignment.Start) {
--                                Text(text = "Saltinnhold",fontFamily = FontFamily.Serif)
--                                Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "salinity" }?.value?.toDouble()?.roundToInt()} ‰", textAlign = TextAlign.Center)
--                            }
--                        }
--                    }
--                }
--            }
--        }
--    }
--}
- 
- @OptIn(ExperimentalComposeUiApi::class)
- @Composable
-Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.WeatherForecast.LocationForecastRepository\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\n\ndata class locationForecastUiState(\n    val weatherData: WeatherData? = WeatherData()\n)\nclass InfoStederLFViewModel(coords: String): ViewModel() {\n    val liste = coords.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    private val locationForecastRepo = LocationForecastRepository()\n\n    private val _lFUiState = MutableStateFlow(locationForecastUiState())\n    val lFUiState: StateFlow<locationForecastUiState> = _lFUiState.asStateFlow()\n\n    init {\n        getNewData(lat,lon)\n    }\n\n    fun getNewData(lat : String, lon : String){\n        viewModelScope.launch {\n            _lFUiState.update {\n                it.copy(\n                    weatherData = locationForecastRepo.getLocationForecast(lat,lon)\n                )\n            }\n        }\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt
---- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt	(revision 045765b6bceb7e553ade4362819cee59ca38e121)
-+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt	(date 1715076224684)
-@@ -14,6 +14,8 @@
-     val weatherData: WeatherData? = WeatherData()
- )
- class InfoStederLFViewModel(coords: String): ViewModel() {
-+    private val _isLoading = MutableStateFlow(false)
-+    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
-     val liste = coords.split(",")
-     val lat = liste[0].trim()
-     val lon = liste[1].trim()
-@@ -21,18 +23,28 @@
- 
-     private val _lFUiState = MutableStateFlow(locationForecastUiState())
-     val lFUiState: StateFlow<locationForecastUiState> = _lFUiState.asStateFlow()
--
-+    var startHour = 0
-     init {
-         getNewData(lat,lon)
-     }
- 
-     fun getNewData(lat : String, lon : String){
-+        toggleLoading()
-         viewModelScope.launch {
-             _lFUiState.update {
-                 it.copy(
-                     weatherData = locationForecastRepo.getLocationForecast(lat,lon)
-                 )
-             }
-+            setStartHour()
-+            toggleLoading()
-         }
-     }
-+    fun toggleLoading() {
-+        _isLoading.value = !_isLoading.value
-+    }
-+
-+    fun setStartHour(){
-+        startHour = (_lFUiState.value.weatherData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0
-+    }
- }
-\ No newline at end of file
-Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt
-new file mode 100644
---- /dev/null	(date 1715076224684)
-+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt	(date 1715076224684)
-@@ -0,0 +1,354 @@
-+package no.uio.ifi.in2000.prosjekt.ui.infoSteder
-+
-+import androidx.compose.foundation.layout.Column
-+import androidx.compose.foundation.layout.fillMaxWidth
-+import androidx.compose.foundation.layout.height
-+import androidx.compose.foundation.layout.padding
-+import androidx.compose.material3.Card
-+import androidx.compose.material3.CardDefaults
-+import androidx.compose.material3.MaterialTheme
-+import androidx.compose.material3.Text
-+import androidx.compose.runtime.Composable
-+import androidx.compose.runtime.collectAsState
-+import androidx.compose.runtime.getValue
-+import androidx.compose.ui.Alignment
-+import androidx.compose.ui.Modifier
-+import androidx.compose.ui.graphics.Brush
-+import androidx.compose.ui.graphics.Color
-+import androidx.compose.ui.unit.dp
-+import co.yml.charts.axis.AxisData
-+import co.yml.charts.common.model.Point
-+import co.yml.charts.ui.linechart.LineChart
-+import co.yml.charts.ui.linechart.model.GridLines
-+import co.yml.charts.ui.linechart.model.IntersectionPoint
-+import co.yml.charts.ui.linechart.model.Line
-+import co.yml.charts.ui.linechart.model.LineChartData
-+import co.yml.charts.ui.linechart.model.LinePlotData
-+import co.yml.charts.ui.linechart.model.LineStyle
-+import co.yml.charts.ui.linechart.model.LineType
-+import co.yml.charts.ui.linechart.model.SelectionHighlightPoint
-+import co.yml.charts.ui.linechart.model.SelectionHighlightPopUp
-+import co.yml.charts.ui.linechart.model.ShadowUnderLine
-+
-+@Composable
-+fun waterTempCard(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){
-+    Card(modifier = Modifier) {
-+        Column(
-+            modifier = Modifier.fillMaxWidth(),
-+            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally
-+        ) {
-+            Text(
-+                "Sjø-temperatur",  // The text to display
-+                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
-+                modifier = Modifier.padding()  // Add some padding
-+            )
-+            waterTempChart(infoStederScreenViewModel = infoStederScreenViewModel, offsett)
-+        }
-+    }
-+}
-+
-+@Composable
-+fun waterTempChart(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){
-+    val infoSted by infoStederScreenViewModel.havvarselUIState.collectAsState()
-+    val pointData = listOf(
-+        Point(0f, hentVerdiTemperature(infoSted, 0+offsett)),
-+        Point(1f, hentVerdiTemperature(infoSted, 1+offsett)),
-+        Point(2f, hentVerdiTemperature(infoSted, 2+offsett)),
-+        Point(3f, hentVerdiTemperature(infoSted, 3+offsett)),
-+        Point(4f, hentVerdiTemperature(infoSted, 4+offsett)),
-+        Point(5f, hentVerdiTemperature(infoSted, 5+offsett)),
-+        Point(6f, hentVerdiTemperature(infoSted, 6+offsett)),
-+        Point(7f, hentVerdiTemperature(infoSted, 7+offsett)),
-+        Point(8f, hentVerdiTemperature(infoSted, 8+offsett)),
-+        Point(9f, hentVerdiTemperature(infoSted, 9+offsett)),
-+        Point(10f, hentVerdiTemperature(infoSted, 10+offsett)),
-+        Point(11f, hentVerdiTemperature(infoSted, 11+offsett)),
-+        Point(12f, hentVerdiTemperature(infoSted, 12+offsett)),
-+        Point(13f, hentVerdiTemperature(infoSted, 13+offsett)),
-+        Point(14f, hentVerdiTemperature(infoSted, 14+offsett)),
-+        Point(15f, hentVerdiTemperature(infoSted, 15+offsett)),
-+        Point(16f, hentVerdiTemperature(infoSted, 16+offsett)),
-+        Point(17f, hentVerdiTemperature(infoSted, 17+offsett)),
-+        Point(18f, hentVerdiTemperature(infoSted, 18+offsett)),
-+        Point(19f, hentVerdiTemperature(infoSted, 19+offsett)),
-+        Point(20f, hentVerdiTemperature(infoSted, 20+offsett)),
-+        Point(21f, hentVerdiTemperature(infoSted, 21+offsett)),
-+        Point(22f, hentVerdiTemperature(infoSted, 22+offsett)),
-+        Point(23f, hentVerdiTemperature(infoSted, 23+offsett))
-+    )
-+
-+    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
-+    val minY = pointData.minByOrNull { it.y }?.y ?: 0f
-+    val steps = determineSteps(maxY-minY)
-+    val stepsize = (maxY - minY) / steps
-+
-+    val xAxisData = AxisData.Builder()
-+        .axisStepSize(40.dp)
-+        .backgroundColor(Color.Transparent)
-+        .steps(pointData.size - 1)
-+        .labelData { i ->
-+            if (i == 0) "    " + "%02d".format(i) else "%02d".format(i)}
-+        .labelAndAxisLinePadding(10.dp)
-+        .axisLineColor(MaterialTheme.colorScheme.tertiary)
-+        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
-+        .build()
-+
-+    val yAxisData = AxisData.Builder()
-+        .steps(steps)
-+        .backgroundColor(Color.Transparent)
-+        .labelAndAxisLinePadding(20.dp)
-+        .labelData {  i ->
-+            "%.1f°".format(minY  + (i * stepsize))
-+        }
-+        .axisLineColor(MaterialTheme.colorScheme.tertiary)
-+        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
-+        .build()
-+
-+    val lineChartData = LineChartData(
-+        linePlotData = LinePlotData(
-+            lines = listOf(
-+                Line(
-+                    dataPoints = pointData,
-+                    LineStyle(
-+                        color = MaterialTheme.colorScheme.tertiary,
-+                        lineType = LineType.SmoothCurve(isDotted = false),
-+
-+                        ),
-+                    IntersectionPoint(
-+                        color = MaterialTheme.colorScheme.tertiary
-+                    ),
-+                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.tertiary),
-+                    ShadowUnderLine(
-+                        alpha = 0.9f,
-+                        brush = Brush.verticalGradient(
-+                            colors = listOf(
-+                                MaterialTheme.colorScheme.inversePrimary,
-+                                Color.Transparent
-+                            )
-+                        )
-+                    ),
-+                    SelectionHighlightPopUp()
-+                )
-+            ),
-+        ),
-+        containerPaddingEnd = 40.dp,
-+        backgroundColor = MaterialTheme.colorScheme.surface,
-+        xAxisData = xAxisData,
-+        yAxisData = yAxisData,
-+        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant)
-+    )
-+
-+    LineChart(modifier = Modifier
-+        .height(300.dp),
-+        lineChartData = lineChartData
-+    )
-+}
-+
-+@Composable
-+fun landTempCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
-+    Card(modifier = Modifier,
-+        elevation = CardDefaults.cardElevation(
-+            defaultElevation = 8.dp,
-+        )) {
-+        Column(
-+            modifier = Modifier.fillMaxWidth(),
-+            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally
-+        ) {
-+            Text(
-+                "Luft-temperatur",  // The text to display
-+                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
-+                modifier = Modifier  // Add some padding
-+            )
-+            locationForecastTempChart(infostederLocationForecastVM, offsett)  // Your existing chart composable
-+        }
-+    }
-+}
-+
-+@Composable
-+fun locationForecastTempChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
-+    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()
-+    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time
-+    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
-+
-+    val pointData = when (offsett) {
-+        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"air_temperature")) }
-+        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "air_temperature")) }
-+    }
-+
-+    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
-+    val minY = pointData.minByOrNull { it.y }?.y ?: 0f
-+    val steps = determineSteps(maxY-minY)
-+    val stepsize = ((maxY - minY) / steps).toInt()
-+
-+    val xAxisData = AxisData.Builder()
-+        .axisStepSize(40.dp)
-+        .backgroundColor(Color.Transparent)
-+        .steps(pointData.size - 1)
-+        .labelData { i ->
-+            when (offsett) {
-+                0 -> if (i == 0)  "    " + "%02d".format(i+hour) else "%02d".format(i+hour)
-+                else -> if (i == 0) "    " + "%02d".format(i) else "%02d".format(i)
-+            }
-+        }
-+        .labelAndAxisLinePadding(10.dp)
-+        .axisLineColor(MaterialTheme.colorScheme.tertiary)
-+        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
-+        .build()
-+
-+    val yAxisData = AxisData.Builder()
-+        .steps(steps)
-+        .backgroundColor(Color.Transparent)
-+        .labelAndAxisLinePadding(30.dp)
-+        .axisOffset(0.dp)
-+        .labelData {  i ->
-+            "%.1f°".format(minY  + (i * stepsize))
-+        }
-+        .axisLineColor(MaterialTheme.colorScheme.tertiary)
-+        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
-+        .build()
-+
-+    val lineChartData = LineChartData(
-+        linePlotData = LinePlotData(
-+            lines = listOf(
-+                Line(
-+                    dataPoints = pointData,
-+                    LineStyle(
-+                        alpha = 0.5f,
-+                        color = Color(0xFF000000),
-+                        lineType = LineType.Straight(isDotted = false)
-+                    ),
-+                    IntersectionPoint(
-+                        MaterialTheme.colorScheme.tertiary
-+                    ),
-+                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),
-+                    ShadowUnderLine(
-+                        alpha = 0.5f,
-+                        brush = Brush.verticalGradient(
-+                            colors = listOf(
-+                                Color(0xFFFFF9C4), // Light yellow
-+                                Color(0xFFFFEB3B), // Vivid yellow
-+                                Color(0xFFFFD726)  // Dark yellow
-+                            )
-+                        )
-+                    ),
-+                    SelectionHighlightPopUp()
-+                )
-+            ),
-+        ),
-+        backgroundColor = MaterialTheme.colorScheme.surface,
-+        xAxisData = xAxisData,
-+        yAxisData = yAxisData,
-+        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),
-+        isZoomAllowed = true
-+    )
-+
-+    LineChart(modifier = Modifier
-+        .fillMaxWidth()
-+        .height(300.dp),
-+        lineChartData = lineChartData
-+    )
-+}
-+
-+@Composable
-+fun windSpeedCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
-+    Card(modifier = Modifier,
-+        elevation = CardDefaults.cardElevation(
-+            defaultElevation = 8.dp,
-+        )) {
-+        Column(
-+            modifier = Modifier.fillMaxWidth(),
-+            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally
-+        ) {
-+            Text(
-+                "Vind",  // The text to display
-+                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
-+                modifier = Modifier  // Add some padding
-+            )
-+            locationForecastWindChart(infostederLocationForecastVM, offsett)  // Your existing chart composable
-+        }
-+    }
-+}
-+@Composable
-+fun locationForecastWindChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
-+    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()
-+    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time
-+    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
-+
-+    val pointData = when (offsett) {
-+        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"wind_speed")) }
-+        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "wind_speed")) }
-+    }
-+
-+    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
-+    val minY = pointData.minByOrNull { it.y }?.y ?: 0f
-+    val steps = determineSteps(maxY-minY)
-+    val stepsize = ((maxY - minY) / steps)
-+
-+    val xAxisData = AxisData.Builder()
-+        .axisStepSize(40.dp)
-+        .backgroundColor(Color.Transparent)
-+        .steps(pointData.size - 1)
-+        .labelData { i ->
-+            when (offsett) {
-+                0 -> if (i == 0)  "    " + "%02d".format(i+hour) else "%02d".format(i+hour)
-+                else -> if (i == 0) "    " + "%02d".format(i) else "%02d".format(i)
-+            }
-+        }
-+        .labelAndAxisLinePadding(10.dp)
-+        .axisLineColor(MaterialTheme.colorScheme.tertiary)
-+        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
-+        .build()
-+
-+    val yAxisData = AxisData.Builder()
-+        .steps(steps)
-+        .backgroundColor(Color.Transparent)
-+        .labelAndAxisLinePadding(30.dp)
-+        .axisOffset(0.dp)
-+        .labelData {  i ->
-+            "%.1f m/s".format(minY  + (i * stepsize))
-+        }
-+        .axisLineColor(MaterialTheme.colorScheme.tertiary)
-+        .axisLabelColor(MaterialTheme.colorScheme.tertiary)
-+        .build()
-+
-+    val lineChartData = LineChartData(
-+        linePlotData = LinePlotData(
-+            lines = listOf(
-+                Line(
-+                    dataPoints = pointData,
-+                    LineStyle(
-+                        alpha = 0.5f,
-+                        color = Color(0xFF000000),
-+                        lineType = LineType.Straight(isDotted = false)
-+                    ),
-+                    IntersectionPoint(
-+                        MaterialTheme.colorScheme.tertiary
-+                    ),
-+                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),
-+                    ShadowUnderLine(
-+                        alpha = 0.5f,
-+                        brush = Brush.verticalGradient(
-+                            colors = listOf(
-+                                Color(0xFFF5F5F5), // Light Gray (almost white)
-+                                Color(0xFFE0E0E0), // Medium Gray
-+                                Color(0xFFBDBDBD)  // Darker Gray
-+                            )
-+                        )
-+                    ),
-+                    SelectionHighlightPopUp()
-+                )
-+            ),
-+        ),
-+        backgroundColor = MaterialTheme.colorScheme.surface,
-+        xAxisData = xAxisData,
-+        yAxisData = yAxisData,
-+        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),
-+        isZoomAllowed = true
-+    )
-+
-+    LineChart(modifier = Modifier
-+        .fillMaxWidth()
-+        .height(300.dp),
-+        lineChartData = lineChartData
-+    )
-+}
-\ No newline at end of file
-Index: app/src/main/res/drawable-anydpi/arrow_south.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/drawable-anydpi/arrow_south.xml b/app/src/main/res/drawable-anydpi/arrow_south.xml
-new file mode 100644
---- /dev/null	(date 1715076224685)
-+++ b/app/src/main/res/drawable-anydpi/arrow_south.xml	(date 1715076224685)
-@@ -0,0 +1,11 @@
-+<vector xmlns:android="http://schemas.android.com/apk/res/android"
-+    android:width="24dp"
-+    android:height="24dp"
-+    android:viewportWidth="960"
-+    android:viewportHeight="960"
-+    android:tint="#333333"
-+    android:alpha="0.6">
-+  <path
-+      android:fillColor="@android:color/white"
-+      android:pathData="M480,840L226.15,586.15L249.49,562.82L463.08,776.85L463.08,119.23L496.92,119.23L496.92,776.08L710.51,561.97L733.85,586.15L480,840Z"/>
-+</vector>
-Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt
-new file mode 100644
---- /dev/null	(date 1715076224684)
-+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt	(date 1715076224684)
-@@ -0,0 +1,47 @@
-+package no.uio.ifi.in2000.prosjekt.ui.infoSteder
-+
-+import androidx.lifecycle.ViewModel
-+import androidx.lifecycle.viewModelScope
-+import kotlinx.coroutines.flow.MutableStateFlow
-+import kotlinx.coroutines.flow.StateFlow
-+import kotlinx.coroutines.flow.asStateFlow
-+import kotlinx.coroutines.flow.update
-+import kotlinx.coroutines.launch
-+import no.uio.ifi.in2000.prosjekt.Data.OceanForecast.OceanForecastRepository
-+import no.uio.ifi.in2000.prosjekt.Model.OceanForecastData
-+
-+data class oceanForecastUiState(
-+    val oceanForecastData: OceanForecastData? = OceanForecastData()
-+)
-+
-+class InfoStederOFViewModel(coords: String): ViewModel(){
-+    private val _isLoading = MutableStateFlow(false)
-+    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
-+    val liste = coords.split(",")
-+    val lat = liste[0].trim()
-+    val lon = liste[1].trim()
-+
-+    private val oceanForecastRepo = OceanForecastRepository()
-+
-+    private val _oFUiState = MutableStateFlow(oceanForecastUiState())
-+    val oFUiState: StateFlow<oceanForecastUiState> = _oFUiState.asStateFlow()
-+    init {
-+        getOceanData(lat, lon)
-+    }
-+
-+    fun getOceanData(lat : String, lon : String){
-+        toggleLoading()
-+        viewModelScope.launch {
-+            _oFUiState.update {
-+                it.copy(
-+                    oceanForecastData = oceanForecastRepo.getOceanForecast(lat,lon)
-+                )
-+            }
-+            toggleLoading()
-+        }
-+    }
-+
-+    fun toggleLoading() {
-+        _isLoading.value = !_isLoading.value
-+    }
-+}
-\ No newline at end of file
-Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository\nimport no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository\nimport no.uio.ifi.in2000.prosjekt.Model.BigDataCloud\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.WindCurrentProjection\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.HavvarselUIState\nimport java.time.LocalDate\n\ndata class DataUIState(\n    val dataProjectionMain: DataProjectionMain? = DataProjectionMain(),\n    val bigDataCloud: BigDataCloud? = BigDataCloud(),\n)\n@RequiresApi(Build.VERSION_CODES.O)\nclass MapScreenViewModel: ViewModel() {\n    private val _isPopupVisible = MutableStateFlow(false)\n    val isPopupVisible: StateFlow<Boolean> = _isPopupVisible.asStateFlow()\n\n    private val havvarselRepository: HavvarselRepository = HavvarselRepository()\n    private val bigDataCloudDataRepository: BigDataCloudRepository = BigDataCloudRepository()\n\n    private val _HVUIState = MutableStateFlow(DataUIState())\n\n    val HVUIState: StateFlow<DataUIState> = _HVUIState.asStateFlow()\n\n    private val yesterdaysDate = LocalDate.now().minusDays(1).toString() // Eks-output = 2024-03-20\n    private val tomorrow = LocalDate.now().plusDays(1).toString()\n    init {\n\n    }\n    fun getNewData(lat : String, lon : String){\n        viewModelScope.launch {\n            _HVUIState.update {\n                it.copy(\n                    dataProjectionMain = havvarselRepository.getHavvarselDataProjection(listOf(\"temperature\", \"salinity\",\"Uwind\",\"Vwind\",\"wind_direction\",\"wind_length\",\"wind_northwards\",\"wind_eastwards\",\"w\",\"current_direction\",\"current_length\",\"tke\",\"u_eastward\",\"v_northward\"), lon, lat, \"0\", tomorrow, yesterdaysDate),\n                    bigDataCloud = bigDataCloudDataRepository.getBigDataCloud(lat, lon),\n                )\n            }\n            togglePopupVisibility()\n        }\n    }\n    fun togglePopupVisibility() {\n        _isPopupVisible.value = !_isPopupVisible.value\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt
---- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt	(revision 045765b6bceb7e553ade4362819cee59ca38e121)
-+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt	(date 1715076224683)
-@@ -39,6 +39,7 @@
- 
-     }
-     fun getNewData(lat : String, lon : String){
-+        togglePopupVisibility()
-         viewModelScope.launch {
-             _HVUIState.update {
-                 it.copy(
-Index: app/src/main/res/drawable-anydpi/arrow_north.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/drawable-anydpi/arrow_north.xml b/app/src/main/res/drawable-anydpi/arrow_north.xml
-new file mode 100644
---- /dev/null	(date 1715076224685)
-+++ b/app/src/main/res/drawable-anydpi/arrow_north.xml	(date 1715076224685)
-@@ -0,0 +1,11 @@
-+<vector xmlns:android="http://schemas.android.com/apk/res/android"
-+    android:width="24dp"
-+    android:height="24dp"
-+    android:viewportWidth="960"
-+    android:viewportHeight="960"
-+    android:tint="#333333"
-+    android:alpha="0.6">
-+  <path
-+      android:fillColor="@android:color/white"
-+      android:pathData="M463.08,840L463.08,182.38L249.49,396.41L226.15,373.08L480,119.23L733.85,373.08L710.51,396.74L496.92,183.15L496.92,840L463.08,840Z"/>
-+</vector>
-Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastRepository.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastRepository.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastRepository.kt
-new file mode 100644
---- /dev/null	(date 1715076224682)
-+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastRepository.kt	(date 1715076224682)
-@@ -0,0 +1,11 @@
-+package no.uio.ifi.in2000.prosjekt.Data.OceanForecast
-+
-+import no.uio.ifi.in2000.prosjekt.Model.OceanForecastData
-+
-+class OceanForecastRepository{
-+    private val oceanForecastDataSrc = OceanForecastDataSource()
-+
-+    suspend fun getOceanForecast(lat : String, lon : String): OceanForecastData? {
-+        return oceanForecastDataSrc.getOceanForecast(lat, lon)
-+    }
-+}
-\ No newline at end of file
-Index: .idea/vcs.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"VcsDirectoryMappings\">\n    <mapping directory=\"\" vcs=\"Git\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/vcs.xml b/.idea/vcs.xml
---- a/.idea/vcs.xml	(revision 045765b6bceb7e553ade4362819cee59ca38e121)
-+++ b/.idea/vcs.xml	(date 1715076224681)
-@@ -2,5 +2,6 @@
- <project version="4">
-   <component name="VcsDirectoryMappings">
-     <mapping directory="" vcs="Git" />
-+    <mapping directory="$PROJECT_DIR$/team-44" vcs="Git" />
-   </component>
- </project>
-\ No newline at end of file
-Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastDataSource.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastDataSource.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastDataSource.kt
-new file mode 100644
---- /dev/null	(date 1715076224681)
-+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastDataSource.kt	(date 1715076224681)
-@@ -0,0 +1,40 @@
-+package no.uio.ifi.in2000.prosjekt.Data.OceanForecast
-+
-+import io.ktor.client.HttpClient
-+import io.ktor.client.call.body
-+import io.ktor.client.engine.cio.CIO
-+import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
-+import io.ktor.client.plugins.defaultRequest
-+import io.ktor.client.request.get
-+import io.ktor.client.request.header
-+import io.ktor.serialization.kotlinx.json.json
-+import kotlinx.serialization.json.Json
-+import no.uio.ifi.in2000.prosjekt.Model.OceanForecastData
-+import no.uio.ifi.in2000.prosjekt.Model.WeatherData
-+
-+class OceanForecastDataSource {
-+    private val client = HttpClient(CIO){
-+        defaultRequest {
-+            url("https://gw-uio.intark.uh-it.no/in2000/")
-+            header("X-Gravitee-API-Key", "ea84d4ab-11b1-4c33-b336-6a884067c35e") // API-key til proxy server
-+        }
-+        install(ContentNegotiation) {
-+            json(Json {
-+                ignoreUnknownKeys = true
-+                prettyPrint = true
-+                isLenient = true
-+            })
-+        }
-+    }
-+
-+    suspend fun getOceanForecast(latitude : String, longitude : String): OceanForecastData? {
-+        val coordinates = "lat=$latitude&lon=$longitude"
-+        return try {
-+            client.get("weatherapi/oceanforecast/2.0/complete?$coordinates").body()
-+        } catch (e: Exception) {
-+            // Handle the exception (log, throw a custom exception, etc.)
-+            println("Error during HTTP request for locationforecast: $e")
-+            null
-+        }
-+    }
-+}
-\ No newline at end of file
-Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Model/OceanForecast.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Model/OceanForecast.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Model/OceanForecast.kt
-new file mode 100644
---- /dev/null	(date 1715076224682)
-+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Model/OceanForecast.kt	(date 1715076224682)
-@@ -0,0 +1,60 @@
-+package no.uio.ifi.in2000.prosjekt.Model
-+
-+import kotlinx.serialization.Serializable
-+@Serializable
-+data class OceanForecastData(
-+    val type: String? = null,
-+    val geometry: OceanGeometry? = null,
-+    val properties: OceanProperties? = null
-+)
-+
-+@Serializable
-+data class OceanGeometry(
-+    val type: String? = null,
-+    val coordinates: List<Float> // index 0 = longitude, index 1 = latitude, index 2 = altitude
-+)
-+
-+@Serializable
-+data class OceanProperties(
-+    val meta: OceanMeta? = null,
-+    val timeseries: List<OceanTimeSeries?>
-+)
-+
-+@Serializable
-+data class OceanMeta(
-+    val updated_at: String?,
-+    val units: Map<String?,String?>
-+)
-+
-+@Serializable
-+data class OceanTimeSeries(
-+    val time: String? = null,
-+    val data: OceanTimeSeriesData? = null
-+)
-+
-+@Serializable
-+data class OceanTimeSeriesData(
-+    val instant: OceanInstantData? = null,
-+    val next_12_hours: OceanNext12HoursData? = null,
-+    val next_1_hours: OceanNext1HourData? = null,
-+    val next_6_hours: OceanNext6HoursData? = null
-+)
-+@Serializable
-+data class OceanInstantData(
-+    val details: Map<String, Double>
-+)
-+@Serializable
-+data class OceanNext12HoursData(
-+    val summary: Map<String?, String?>?,
-+    val details: Map<String?, Double?>?
-+)
-+@Serializable
-+data class OceanNext1HourData(
-+    val summary: Map<String?, String?>,
-+        val details: Map<String, Double>
-+)
-+@Serializable
-+data class OceanNext6HoursData(
-+    val summary: Map<String?, String?>,
-+    val details: Map<String, Double>
-+)
-\ No newline at end of file
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/MetAlert/MetAlertDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.Data.MetAlert\n\nimport io.ktor.client.HttpClient\nimport io.ktor.client.call.body\nimport io.ktor.client.engine.cio.CIO\nimport io.ktor.client.plugins.contentnegotiation.ContentNegotiation\nimport io.ktor.client.plugins.defaultRequest\nimport io.ktor.client.request.get\nimport io.ktor.client.request.header\nimport io.ktor.client.statement.HttpResponse\nimport io.ktor.client.statement.bodyAsText\nimport io.ktor.client.statement.readText\nimport io.ktor.serialization.kotlinx.json.json\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonContentPolymorphicSerializer\nimport no.uio.ifi.in2000.prosjekt.Model.MetAlerts\nimport no.uio.ifi.in2000.prosjekt.Model.PolymorphicItem\n\nclass MetAlertDataSource {\n    private val client = HttpClient(CIO){\n        defaultRequest {\n            url(\"https://gw-uio.intark.uh-it.no/in2000/\")\n            header(\"X-Gravitee-API-Key\", \"ea84d4ab-11b1-4c33-b336-6a884067c35e\") // API-key til proxy server\n        }\n        install(ContentNegotiation) {\n            json(Json {\n                ignoreUnknownKeys = true\n                prettyPrint = true\n                isLenient = true\n\n            })\n        }\n    }\n\n    suspend fun getMetAlerts(): MetAlerts? { // Henter json fil fra metalert\n        return try {\n            client.get(\"weatherapi/metalerts/2.0/current.json?geographicDomain=marine\").body()\n        } catch (e: Exception) {\n            println(\"Error during HTTP request for metAlerts: $e\")\n            return null\n        }\n    }\n\n    suspend fun getMetAlertsCoordinates(lat : String, lon: String): MetAlerts? { // Henter json fil fra metalert\n        return try {\n            client.get(\"weatherapi/metalerts/2.0/current.json?lat=$lat&lon=$lon\").body()\n        } catch (e: Exception) {\n            println(\"Error during HTTP request for metAlerts: $e\")\n            return null\n        }\n    }\n}\n\nsuspend fun main(){\n    val MADS = MetAlertDataSource()\n    val liste = MADS.getMetAlerts()\n//    liste?.properties?.timeseries?.forEach{\n//        println(it?.time)\n//        println(it?.data?.instant?.details?.forEach{\n//            println(it.key)\n//            println(it.value)\n//        })\n//    }\n    println(liste?.features?.get(0)?.properties?.description)\n    println(liste?.features?.get(0)?.properties?.area)\n    println(liste?.features?.get(0)?.properties?.awarenessResponse)\n    println(liste?.features?.get(0)?.properties?.administrativeId)\n    println(liste?.features?.get(0)?.properties?.riskMatrixColor)\n    println(liste?.features?.get(1)?.properties?.description)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/MetAlert/MetAlertDataSource.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/MetAlert/MetAlertDataSource.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/MetAlert/MetAlertDataSource.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/MetAlert/MetAlertDataSource.kt	
@@ -7,15 +7,10 @@
 import io.ktor.client.plugins.defaultRequest
 import io.ktor.client.request.get
 import io.ktor.client.request.header
-import io.ktor.client.statement.HttpResponse
-import io.ktor.client.statement.bodyAsText
-import io.ktor.client.statement.readText
 import io.ktor.serialization.kotlinx.json.json
-import kotlinx.serialization.encodeToString
 import kotlinx.serialization.json.Json
-import kotlinx.serialization.json.JsonContentPolymorphicSerializer
 import no.uio.ifi.in2000.prosjekt.Model.MetAlerts
-import no.uio.ifi.in2000.prosjekt.Model.PolymorphicItem
+
 
 class MetAlertDataSource {
     private val client = HttpClient(CIO){
@@ -32,8 +27,10 @@
             })
         }
     }
-
-    suspend fun getMetAlerts(): MetAlerts? { // Henter json fil fra metalert
+    /*
+    Getting metalerts for the marine area
+     */
+    suspend fun getMetAlerts(): MetAlerts? {
         return try {
             client.get("weatherapi/metalerts/2.0/current.json?geographicDomain=marine").body()
         } catch (e: Exception) {
@@ -42,7 +39,10 @@
         }
     }
 
-    suspend fun getMetAlertsCoordinates(lat : String, lon: String): MetAlerts? { // Henter json fil fra metalert
+    /*
+    Getting metalerts for a specific location
+     */
+    suspend fun getMetAlertsCoordinates(lat : String, lon: String): MetAlerts? {
         return try {
             client.get("weatherapi/metalerts/2.0/current.json?lat=$lat&lon=$lon").body()
         } catch (e: Exception) {
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/Havvarsel/HavvarselRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.Data.Havvarsel\n\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.Temperature\nimport no.uio.ifi.in2000.prosjekt.Model.TimeValues\nimport no.uio.ifi.in2000.prosjekt.Model.WindCurrentProjection\nimport java.time.ZoneOffset\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\n\nclass HavvarselRepository {\n    private val havvarselDataSrc = HavvarselDataSource()\n\n    suspend fun getHavarselTemperature(longitude : String, latitude : String, depth: String? = null, before : String? = null, after: String? = null) : Temperature?{\n        return havvarselDataSrc.getHavvarselTemp(longitude, latitude, depth, before, after)\n    }\n\n    suspend fun getHavarselWindCurrent(lonCorner1 : String, latCorner1 : String, lonCorner2 : String, latCorner2 : String, time : String) : WindCurrentProjection?{\n        return havvarselDataSrc.getHavvarselWindCurrent(lonCorner1, latCorner1, lonCorner2, latCorner2, time)\n    }\n\n    suspend fun getHavvarselDataProjection(variables: List<String>, lon: String, lat: String, depth: String? = null, before : String? = null, after: String? = null) : DataProjectionMain?{\n        return havvarselDataSrc.getHavvarselDataProjection(variables, lon, lat, depth, before)\n    }\n\n    suspend fun getHavvarselTimes() : TimeValues?{\n        return havvarselDataSrc.getHavvarselTimeValues()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/Havvarsel/HavvarselRepository.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/Havvarsel/HavvarselRepository.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/Havvarsel/HavvarselRepository.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/Havvarsel/HavvarselRepository.kt	
@@ -1,14 +1,9 @@
 package no.uio.ifi.in2000.prosjekt.Data.Havvarsel
 
-import android.os.Build
-import androidx.annotation.RequiresApi
 import no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain
 import no.uio.ifi.in2000.prosjekt.Model.Temperature
 import no.uio.ifi.in2000.prosjekt.Model.TimeValues
 import no.uio.ifi.in2000.prosjekt.Model.WindCurrentProjection
-import java.time.ZoneOffset
-import java.time.ZonedDateTime
-import java.time.format.DateTimeFormatter
 
 class HavvarselRepository {
     private val havvarselDataSrc = HavvarselDataSource()
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/Havvarsel/HavvarselDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.Data.Havvarsel\n\nimport io.ktor.client.HttpClient\nimport io.ktor.client.call.body\nimport io.ktor.client.engine.cio.CIO\nimport io.ktor.client.plugins.contentnegotiation.ContentNegotiation\nimport io.ktor.client.plugins.defaultRequest\nimport io.ktor.client.request.get\nimport io.ktor.client.request.header\nimport io.ktor.serialization.kotlinx.json.json\nimport kotlinx.serialization.json.Json\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.Temperature\nimport no.uio.ifi.in2000.prosjekt.Model.TimeValues\nimport no.uio.ifi.in2000.prosjekt.Model.WindCurrentProjection\nimport java.net.URLEncoder\n\nclass HavvarselDataSource {\n    private val client = HttpClient(CIO){\n        defaultRequest {\n            url(\"https://gw-uio.intark.uh-it.no/in2000/\")\n            header(\"X-Gravitee-API-Key\", \"ea84d4ab-11b1-4c33-b336-6a884067c35e\") // API-key til proxy server\n        }\n        install(ContentNegotiation) {\n            json(Json {\n                ignoreUnknownKeys = true\n                prettyPrint = true\n                isLenient = true\n            })\n        }\n    }\n    //timevalues\n    suspend fun getHavvarselTimeValues() : TimeValues?{ //\"2024-03-19T23:00:00.000+01:00\"\n        return try {\n            client.get(\"https://api.havvarsel.no/apis/duapi/havvarsel/v2/times\").body()\n        } catch (e: Exception) {\n            // Handle the exception (log, throw a custom exception, etc.)\n            println(\"Error during HTTP request for locationforecast: $e\")\n            null\n        }\n    }\n    //dataprojection\n\n    //Format: \"2024-03-19T23:00:00.000+01:00\"\n    suspend fun getHavvarselDataProjection(variables: List<String>, lon: String, lat: String, depth: String? = null, before : String? = null, after: String? = null) : DataProjectionMain?{\n        val variablesString = variables.joinToString(separator = \"%2C\")\n        var fullAPIString = \"https://api.havvarsel.no/apis/duapi/havvarsel/v2/dataprojection/$variablesString/$lon/$lat?\"\n\n\n        if(after != null) {\n            val encodedString = URLEncoder.encode(after, \"UTF-8\")//Veldig bra metode, Husk!\n                .replace(\"+\", \"%20\")\n                .replace(\":\", \"%3A\")\n            fullAPIString += \"after=$encodedString\"\n        }\n        if(before != null) {\n            val encodedString = URLEncoder.encode(before, \"UTF-8\")\n                .replace(\"+\", \"%20\")\n                .replace(\":\", \"%3A\")\n            fullAPIString += \"&before=$encodedString\"\n        }\n        if(depth != null) fullAPIString += \"&depth=$depth\"\n\n\n        return try {\n            client.get(fullAPIString).body()\n        } catch (e: Exception) {\n            // Handle the exception (log, throw a custom exception, etc.)\n            println(\"Error during HTTP request for DataProjection: $e\")\n            null\n        }\n    }\n    //Temperatur\n    //\"2024-03-19T23:00:00.000+01:00\"\n    suspend fun getHavvarselTemp(longitude : String, latitude : String, depth: String? = null, before : String? = null, after: String? = null) : Temperature?{ //for å få havvarrsel sitt temperatur api\n        val coordinates = \"$longitude/$latitude\"\n        var fullAPIString = \"https://api.havvarsel.no/apis/duapi/havvarsel/v2/temperatureprojection/$coordinates?\"\n\n        if(after != null) {\n            val encodedString = URLEncoder.encode(after, \"UTF-8\")\n                .replace(\"+\", \"%20\")\n                .replace(\":\", \"%3A\")\n            fullAPIString += \"after=$encodedString\"\n        }\n        if(before != null) {\n            val encodedString = URLEncoder.encode(before, \"UTF-8\")\n                .replace(\"+\", \"%20\")\n                .replace(\":\", \"%3A\")\n            fullAPIString += \"&before=$encodedString\"\n        }\n        if(depth != null) fullAPIString += \"&depth=$depth\"\n\n        return try {\n            client.get(fullAPIString).body()\n        } catch (e: Exception) {\n            // Handle the exception (log, throw a custom exception, etc.)\n            println(\"Error during HTTP request for HavvarselTemperature: $e\")\n            null\n        }\n    }\n\n    //WindCurrentProjection\n    suspend fun getHavvarselWindCurrent(lonCorner1 : String, latCorner1 : String, lonCorner2 : String, latCorner2 : String, time : String) : WindCurrentProjection?{ //Time skrives yy-mm-dd\n        val information = \"$lonCorner1/$latCorner1/$lonCorner2/$latCorner2/${time}T00%3A00%3A00.000%2B01%3A00\"\n        return try {\n            client.get(\"https://api.havvarsel.no/apis/duapi/havvarsel/v2/windandcurrentprojection/$information\").body()\n        } catch (e: Exception) {\n            // Handle the exception (log, throw a custom exception, etc.)\n            println(\"Error during HTTP request for WindAndCurrentProjection: $e\")\n            null\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/Havvarsel/HavvarselDataSource.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/Havvarsel/HavvarselDataSource.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/Havvarsel/HavvarselDataSource.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/Havvarsel/HavvarselDataSource.kt	
@@ -42,13 +42,16 @@
     //dataprojection
 
     //Format: "2024-03-19T23:00:00.000+01:00"
+    /*
+    have to convert to UTF-8 and replace symbols to get the correct url because symbols such as + and : are not allowed
+     */
     suspend fun getHavvarselDataProjection(variables: List<String>, lon: String, lat: String, depth: String? = null, before : String? = null, after: String? = null) : DataProjectionMain?{
         val variablesString = variables.joinToString(separator = "%2C")
         var fullAPIString = "https://api.havvarsel.no/apis/duapi/havvarsel/v2/dataprojection/$variablesString/$lon/$lat?"
 
 
         if(after != null) {
-            val encodedString = URLEncoder.encode(after, "UTF-8")//Veldig bra metode, Husk!
+            val encodedString = URLEncoder.encode(after, "UTF-8")
                 .replace("+", "%20")
                 .replace(":", "%3A")
             fullAPIString += "after=$encodedString"
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.SharedPreferences\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.os.Build\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.result.ActivityResultLauncher\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.PreviewParameter\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea.DWSscreen\nimport no.uio.ifi.in2000.prosjekt.ui.InfoCards.InfoCards\nimport no.uio.ifi.in2000.prosjekt.ui.InfoScreen.InfoScreen\nimport no.uio.ifi.in2000.prosjekt.ui.InstructionManual.HomeScreenManuals\nimport no.uio.ifi.in2000.prosjekt.ui.InstructionManual.InstructionManualScreen\nimport no.uio.ifi.in2000.prosjekt.ui.InstructionManual.MapUserManualScreen\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MapScreen\nimport no.uio.ifi.in2000.prosjekt.ui.Settings.SettingsScreen\nimport no.uio.ifi.in2000.prosjekt.ui.home.HomeScreen\nimport no.uio.ifi.in2000.prosjekt.ui.home.HomeScreenViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederScreen\nimport no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme\nimport org.osmdroid.config.Configuration\n\nclass MainActivity : ComponentActivity() {\n    private lateinit var requestPermissionLauncher: ActivityResultLauncher<String>\n    private lateinit var sharedPreferences: SharedPreferences\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        requestPermissionLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->\n            if (isGranted) {\n                // Permission was granted\n                // Proceed with accessing the location or enabling location-based features\n                saveLocationPermission(true)\n            } else {\n                saveLocationPermission(false)\n            }\n            //initializeOSMdroidConfiguration()\n        }\n\n        sharedPreferences = getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE)\n\n        val isLocationPermissionGranted = sharedPreferences.getBoolean(\"location_permission_enabled\", false)\n        if (!isLocationPermissionGranted) {\n            // Request location permission only if it's not already granted\n        }\n\n        setContent {\n            MyApplicationTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    HavvarselApp(requestPermission = { requestLocationPermission() }, this)\n                }\n            }\n        }\n    }\n    private fun requestLocationPermission() {\n        // Trigger the permission request\n        requestPermissionLauncher.launch(\"android.permission.ACCESS_FINE_LOCATION\")    }\n    private fun saveLocationPermission(isGranted: Boolean) {\n        // Save the user's answer regarding location permission\n        sharedPreferences.edit().putBoolean(\"location_permission_enabled\", isGranted).apply()\n    }\n//    private fun initializeOSMdroidConfiguration() {\n//        val context = this\n//        val sharedPreferences = context.getSharedPreferences(\"OSMdroid\", Context.MODE_PRIVATE)\n//        Configuration.getInstance().load(context, sharedPreferences)\n//    }\n}\n\n\n\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun HavvarselApp(requestPermission: () -> Unit, activity: Activity) {\n    MyApplicationTheme {\n        val navController = rememberNavController()\n\n        NavHost(navController, startDestination = \"hjem\") {\n            composable(\"hjem\") {\n                HomeScreen(activity, navController)\n            }\n            composable(\"infoStederScreen/{cordinates}/{sted}\") { backStackEntry ->\n                InfoStederScreen(\n                    coordinate = backStackEntry.arguments?.getString(\"cordinates\") ?: \"59.15,10.75\",\n                    sted = backStackEntry.arguments?.getString(\"sted\") ?: \"Oslo\",\n                    navController\n                )\n            }\n            composable(\"Kart\") {\n                MapScreen(activity, navController)\n            }\n            composable(\"Lær\") {\n                InfoScreen(navController = navController)\n            }\n            composable(\"InfoCard/{id}\") { backStackEntry ->\n                InfoCards(id = backStackEntry.arguments?.getString(\"id\"), navController)\n            }\n            composable(\"Manual\"){\n                InstructionManualScreen(navController)\n            }\n            composable(\"DetailedWeather/{coordinates}\"){backStackEntry ->\n                DWSscreen(navController, coordinate = backStackEntry.arguments?.getString(\"coordinates\") ?: \"59.15,10.75\",\n                )\n            }\n            composable(\"InstructionCard/{id}\"){backStackEntry ->\n                     run {\n                        val id = backStackEntry.arguments?.getString(\"id\")\n                        if (id == \"0\") {\n                            HomeScreenManuals(navController = navController)\n                        }\n                         else{\n                            MapUserManualScreen(navController)\n                        }\n                    }\n        }\n    }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt	
@@ -1,14 +1,10 @@
 package no.uio.ifi.in2000.prosjekt
 
-import android.Manifest
 import android.app.Activity
 import android.content.Context
 import android.content.SharedPreferences
-import android.content.pm.PackageManager
-import android.location.Location
 import android.os.Build
 import android.os.Bundle
-import android.util.Log
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
 import androidx.activity.result.ActivityResultLauncher
@@ -17,18 +13,11 @@
 import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Surface
-import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.tooling.preview.PreviewParameter
-import androidx.core.app.ActivityCompat
-import androidx.core.content.ContextCompat
 import androidx.navigation.compose.NavHost
 import androidx.navigation.compose.composable
 import androidx.navigation.compose.rememberNavController
-import com.google.android.gms.location.FusedLocationProviderClient
-import com.google.android.gms.location.LocationServices
 import no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea.DWSscreen
 import no.uio.ifi.in2000.prosjekt.ui.InfoCards.InfoCards
 import no.uio.ifi.in2000.prosjekt.ui.InfoScreen.InfoScreen
@@ -36,12 +25,9 @@
 import no.uio.ifi.in2000.prosjekt.ui.InstructionManual.InstructionManualScreen
 import no.uio.ifi.in2000.prosjekt.ui.InstructionManual.MapUserManualScreen
 import no.uio.ifi.in2000.prosjekt.ui.Map.MapScreen
-import no.uio.ifi.in2000.prosjekt.ui.Settings.SettingsScreen
 import no.uio.ifi.in2000.prosjekt.ui.home.HomeScreen
-import no.uio.ifi.in2000.prosjekt.ui.home.HomeScreenViewModel
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederScreen
 import no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme
-import org.osmdroid.config.Configuration
 
 class MainActivity : ComponentActivity() {
     private lateinit var requestPermissionLauncher: ActivityResultLauncher<String>
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.Data.OceanForecast\n\nimport io.ktor.client.HttpClient\nimport io.ktor.client.call.body\nimport io.ktor.client.engine.cio.CIO\nimport io.ktor.client.plugins.contentnegotiation.ContentNegotiation\nimport io.ktor.client.plugins.defaultRequest\nimport io.ktor.client.request.get\nimport io.ktor.client.request.header\nimport io.ktor.serialization.kotlinx.json.json\nimport kotlinx.serialization.json.Json\nimport no.uio.ifi.in2000.prosjekt.Model.OceanForecastData\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\n\nclass OceanForecastDataSource {\n    private val client = HttpClient(CIO){\n        defaultRequest {\n            url(\"https://gw-uio.intark.uh-it.no/in2000/\")\n            header(\"X-Gravitee-API-Key\", \"ea84d4ab-11b1-4c33-b336-6a884067c35e\") // API-key til proxy server\n        }\n        install(ContentNegotiation) {\n            json(Json {\n                ignoreUnknownKeys = true\n                prettyPrint = true\n                isLenient = true\n            })\n        }\n    }\n\n    suspend fun getOceanForecast(latitude : String, longitude : String): OceanForecastData? {\n        val coordinates = \"lat=$latitude&lon=$longitude\"\n        return try {\n            client.get(\"weatherapi/oceanforecast/2.0/complete?$coordinates\").body()\n        } catch (e: Exception) {\n            // Handle the exception (log, throw a custom exception, etc.)\n            println(\"Error during HTTP request for locationforecast: $e\")\n            null\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastDataSource.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastDataSource.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastDataSource.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/OceanForecast/OceanForecastDataSource.kt	
@@ -10,13 +10,12 @@
 import io.ktor.serialization.kotlinx.json.json
 import kotlinx.serialization.json.Json
 import no.uio.ifi.in2000.prosjekt.Model.OceanForecastData
-import no.uio.ifi.in2000.prosjekt.Model.WeatherData
 
 class OceanForecastDataSource {
     private val client = HttpClient(CIO){
         defaultRequest {
             url("https://gw-uio.intark.uh-it.no/in2000/")
-            header("X-Gravitee-API-Key", "ea84d4ab-11b1-4c33-b336-6a884067c35e") // API-key til proxy server
+            header("X-Gravitee-API-Key", "ea84d4ab-11b1-4c33-b336-6a884067c35e") // API-key to proxy server
         }
         install(ContentNegotiation) {
             json(Json {
@@ -26,7 +25,9 @@
             })
         }
     }
-
+    /*
+    Ocean forecast from MET
+     */
     suspend fun getOceanForecast(latitude : String, longitude : String): OceanForecastData? {
         val coordinates = "lat=$latitude&lon=$longitude"
         return try {
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/WeatherForecast/LocationForecastDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.Data.WeatherForecast\n\nimport io.ktor.client.HttpClient\nimport io.ktor.client.call.body\nimport io.ktor.client.engine.cio.CIO\nimport io.ktor.client.plugins.contentnegotiation.ContentNegotiation\nimport io.ktor.client.plugins.defaultRequest\nimport io.ktor.client.request.get\nimport io.ktor.client.request.header\nimport io.ktor.serialization.kotlinx.json.json\nimport kotlinx.serialization.json.Json\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\n\nclass LocationForecastDataSource {\n    private val client = HttpClient(CIO){\n        defaultRequest {\n            url(\"https://gw-uio.intark.uh-it.no/in2000/\")\n            header(\"X-Gravitee-API-Key\", \"ea84d4ab-11b1-4c33-b336-6a884067c35e\") // API-key til proxy server\n        }\n        install(ContentNegotiation) {\n            json(Json {\n                ignoreUnknownKeys = true\n                prettyPrint = true\n                isLenient = true\n            })\n        }\n    }\n\n    suspend fun getLocationForecast(latitude : String, longitude : String, altitude : String? = null): WeatherData? {\n        var coordinates = \"lat=$latitude&lon=$longitude\"\n        if (altitude != null) {\n            coordinates += \"&alt=$altitude\"\n        }\n        return try {\n            client.get(\"weatherapi/locationforecast/2.0/complete?$coordinates\").body()\n        } catch (e: Exception) {\n            // Handle the exception (log, throw a custom exception, etc.)\n            println(\"Error during HTTP request for locationforecast: $e\")\n            null\n        }\n    }\n}\n\nsuspend fun main(){\n    val LFDS = LocationForecastDataSource()\n    val liste = LFDS.getLocationForecast(\"60.10\",\"10\")\n//    liste?.properties?.timeseries?.forEach{\n//        println(it?.time)\n//        println(it?.data?.instant?.details?.forEach{\n//            println(it.key)\n//            println(it.value)\n//        })\n//    }\n    liste?.properties?.timeseries?.get(0)?.data?.instant?.details?.forEach{\n        println(it.key)\n        println(it.value)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/WeatherForecast/LocationForecastDataSource.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/WeatherForecast/LocationForecastDataSource.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/WeatherForecast/LocationForecastDataSource.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Data/WeatherForecast/LocationForecastDataSource.kt	
@@ -15,7 +15,7 @@
     private val client = HttpClient(CIO){
         defaultRequest {
             url("https://gw-uio.intark.uh-it.no/in2000/")
-            header("X-Gravitee-API-Key", "ea84d4ab-11b1-4c33-b336-6a884067c35e") // API-key til proxy server
+            header("X-Gravitee-API-Key", "ea84d4ab-11b1-4c33-b336-6a884067c35e") // API-key to proxy server
         }
         install(ContentNegotiation) {
             json(Json {
@@ -26,6 +26,9 @@
         }
     }
 
+    /*
+    Location forecast from MET
+     */
     suspend fun getLocationForecast(latitude : String, longitude : String, altitude : String? = null): WeatherData? {
         var coordinates = "lat=$latitude&lon=$longitude"
         if (altitude != null) {
@@ -40,19 +43,3 @@
         }
     }
 }
-
-suspend fun main(){
-    val LFDS = LocationForecastDataSource()
-    val liste = LFDS.getLocationForecast("60.10","10")
-//    liste?.properties?.timeseries?.forEach{
-//        println(it?.time)
-//        println(it?.data?.instant?.details?.forEach{
-//            println(it.key)
-//            println(it.value)
-//        })
-//    }
-    liste?.properties?.timeseries?.get(0)?.data?.instant?.details?.forEach{
-        println(it.key)
-        println(it.value)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/Model/MetAlerts.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.Model\n\nimport android.icu.text.CaseMap.Title\nimport kotlinx.serialization.DeserializationStrategy\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.json.JsonContentPolymorphicSerializer\nimport kotlinx.serialization.json.JsonElement\nimport kotlinx.serialization.json.jsonObject\nimport kotlinx.serialization.json.jsonPrimitive\n\n@Serializable\ndata class MetAlerts(\n    val features: List<Warning?>? = null,\n    val lang: String? = null,\n    val lastChange: String? = null,\n    val type: String? = null\n)\n\n@Serializable\ndata class Warning(\n    val geometry: PolymorphicItem?,\n    val properties: PropertiesA,\n    val type: String?,\n    @SerialName(\"when\")\n    val timeinterval: TimeInterval // må bruke serialname fordi \"when\" ikke kan være navn\n)\n\n@Serializable\nenum class SectionType {\n    @SerialName(\"Polygon\")\n    Polygon,\n\n    @SerialName(\"MultiPolygon\")\n    MultiPolygon,\n}\n\n@Serializable(with = SectionSerializer::class)\nsealed interface PolymorphicItem {\n    @SerialName(\"type\")\n    val type : SectionType\n}\n\n@Serializable\ndata class PolygonSection(\n    override val type: SectionType = SectionType.Polygon,\n    @SerialName(\"coordinates\")\n    val coordinates: List<List<List<String?>>>,\n) : PolymorphicItem\n\n@Serializable\ndata class MultiPolygonSection(\n    override val type: SectionType = SectionType.MultiPolygon,\n    @SerialName(\"coordinates\")\n    val coordinates: List<List<List<List<String?>>>>\n) : PolymorphicItem\n\n@Serializable\ndata class PropertiesA(\n    val MunicipalityId : String? = null,\n    val administrativeId : String? = null,\n    val area : String? = null,\n    val awarenessResponse : String? = null,\n    val awarenessSeriousness : String? = null,\n    val awareness_level : String? = null,\n    val awareness_type : String? = null,\n    val certainty : String? = null,\n    val consequences : String? = null,\n    val county : List<String?>,\n    val description : String? = null,\n    val event : String? = null,\n    val eventAwarenessName : String? = null,\n    val geographicDomain : String? = null,\n    val id : String? = null,\n    val instruction : String? = null,\n    val resources: List<Fil>,\n    val riskMatrixColor : String? = null,\n    val severity : String? = null,\n    val title: String? = null,\n    val type : String? = null,\n)\n\n@Serializable\ndata class Fil(\n    val description: String?,\n    val mimeType : String?,\n    val uri : String?\n)\n\n@Serializable\ndata class TimeInterval(\n    val interval : List<String?>\n)\n\nobject SectionSerializer :\n    JsonContentPolymorphicSerializer<PolymorphicItem>(\n        PolymorphicItem::class\n    ) {\n    override fun selectDeserializer(element: JsonElement): DeserializationStrategy<PolymorphicItem> {\n        return when (element.jsonObject[\"type\"]?.jsonPrimitive?.content) {\n            \"Polygon\" -> PolygonSection.serializer()\n            \"MultiPolygon\" -> MultiPolygonSection.serializer()\n            else -> throw Exception(\"ERROR: No Serializer found. Serialization failed.\")\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Model/MetAlerts.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Model/MetAlerts.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/Model/MetAlerts.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/Model/MetAlerts.kt	
@@ -1,8 +1,6 @@
 package no.uio.ifi.in2000.prosjekt.Model
 
-import android.icu.text.CaseMap.Title
 import kotlinx.serialization.DeserializationStrategy
-import kotlinx.serialization.KSerializer
 import kotlinx.serialization.SerialName
 import kotlinx.serialization.Serializable
 import kotlinx.serialization.json.JsonContentPolymorphicSerializer
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableDoubleStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport com.mapbox.geojson.Point\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport org.osmdroid.api.IGeoPoint\nimport org.osmdroid.util.GeoPoint\ndata class cameraSettings(\n    var center: Point,\n    var zoom: Double\n)\nclass MapViewModel : ViewModel() {\n    // Hold state for center and zoom\n    private var _camera = MutableStateFlow(cameraSettings(Point.fromLngLat(10.0, 59.0), 10.0))\n    var camera: StateFlow<cameraSettings> = _camera.asStateFlow()\n    init {\n\n    }\n    fun updateMapCenter(center: Point) {\n        _camera.value.center = center\n    }\n    fun updateZoomLevel(zoom: Double) {\n        _camera.value.zoom = zoom\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt	
@@ -1,16 +1,11 @@
 package no.uio.ifi.in2000.prosjekt.ui.Map
 
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableDoubleStateOf
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.setValue
 import androidx.lifecycle.ViewModel
 import com.mapbox.geojson.Point
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.asStateFlow
-import org.osmdroid.api.IGeoPoint
-import org.osmdroid.util.GeoPoint
+
 data class cameraSettings(
     var center: Point,
     var zoom: Double
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.slideInVertically\nimport androidx.compose.animation.slideOutVertically\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.BottomAppBar\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.Divider\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.TextFieldDefaults\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalSoftwareKeyboardController\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextDecoration\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.ui.window.PopupProperties\nimport androidx.core.app.ActivityCompat\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport coil.compose.AsyncImage\nimport coil.request.ImageRequest\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport com.mapbox.geojson.Point\nimport com.mapbox.maps.MapboxExperimental\nimport com.mapbox.maps.ViewAnnotationAnchor\nimport com.mapbox.maps.extension.compose.MapboxMap\nimport com.mapbox.maps.extension.compose.animation.viewport.MapViewportState\nimport com.mapbox.maps.extension.compose.animation.viewport.rememberMapViewportState\nimport com.mapbox.maps.extension.compose.annotation.ViewAnnotation\nimport com.mapbox.maps.extension.compose.annotation.generated.CircleAnnotation\nimport com.mapbox.maps.viewannotation.annotationAnchors\nimport com.mapbox.maps.viewannotation.geometry\nimport com.mapbox.maps.viewannotation.viewAnnotationOptions\nimport no.uio.ifi.in2000.prosjekt.R\nimport java.time.ZoneId\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\nimport kotlin.math.roundToInt\n\n\nval pk = \"pk.eyJ1IjoiY3BicmFuZGEiLCJhIjoiY2x1aTZkNTZnMDE1bzJqbXZ6NDdhc2lraCJ9.oJDEC855zszNVymnAHxKgQ\"\n\nval sk = \"sk.eyJ1IjoiY3BicmFuZGEiLCJhIjoiY2x1aTc4Z2p4MDFnaTJqbXlpdDF2NDVkYSJ9.hJmaf_tc7gS8J2aTwHYPKw\"\n\n@OptIn(MapboxExperimental::class, ExperimentalMaterial3Api::class)\n@Composable\nfun MapScreen(activity: Activity, navController: NavController, mapScreenViewModel: MapScreenViewModel = viewModel(),\n              mapViewModel: MapViewModel = viewModel(),\n              metAlertViewModel: MetAlertViewModel = viewModel(),\n              enturViewModel: EnTurViewModel = viewModel()) {\n\n    val mViewportState = rememberMapViewportState()\n    var showViewAnnotation by remember {\n        mutableStateOf(false)\n    }\n    val mapCameraState by mapViewModel.camera.collectAsState()\n    var visible by remember {\n        mutableStateOf(true)\n    }\n    var point by remember {mutableStateOf(Point.fromLngLat(10.0, 59.0))}\n    val context = LocalContext.current.applicationContext // Context til skjerm\n    var lat = \"59.0\"\n    var lon = \"11.0\"\n\n    Scaffold(\n        topBar = {\n            TopAppBar(modifier = Modifier,\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF171729),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n                        Image(\n                            painter = painterResource(id = R.drawable.havblikktext),\n                            contentDescription = \"My Image\",\n                            alignment = Alignment.Center,\n                            colorFilter = ColorFilter.tint(Color(0xFFCFE3F3)),\n                            modifier = Modifier\n                                .size(100.dp)\n                        )\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color(0xFFCFE3F3)\n                        )\n                    }\n                },\n                actions = {\n                    IconButton(onClick = {\n                        enturViewModel.toggleVisibility() }) {\n                        Icon(\n                            Icons.Default.Search,\n                            contentDescription = \"Search\",\n                            tint = Color(0xFFCFE3F3)\n                        )\n                    }\n                }\n            )\n        },\n    ) { innerPadding ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(innerPadding),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Box(modifier = Modifier\n                .fillMaxSize()){\n                MapboxMap(\n                    modifier = Modifier\n                        .fillMaxSize(),\n                    mapViewportState = mViewportState.apply {\n                        setCameraOptions {\n                            zoom(mapCameraState.zoom)\n                            center(mapCameraState.center)\n                            pitch(20.0)\n                            bearing(0.0)\n                        }\n                    },\n                    onMapClickListener = { clickedPoint ->\n                        // Extracting clicked coordinates\n                        lat = clickedPoint.latitude().toString()\n                        lon = clickedPoint.longitude().toString()\n                        mViewportState.setCameraOptions {\n                            //zoom(mViewportState.cameraState.zoom*1.5) // Adjust the zoom level as needed\n                            center(clickedPoint)\n                            pitch(0.0)\n                            bearing(0.0)\n                        }\n                        point = Point.fromLngLat(clickedPoint.longitude(),clickedPoint.latitude())\n                        showViewAnnotation = true\n                        visible = true\n                        mapScreenViewModel.getNewData(lat,lon)\n                        // Do something with the clicked coordinates\n                        true\n                    },\n                ){\n                    if (showViewAnnotation) {\n                        if(visible){\n                            CircleAnnotation(point = point, circleBlur = 1.0)\n                        }\n                        ViewAnnotation(\n                            options = viewAnnotationOptions {\n                                geometry(point)\n                                annotationAnchors(\n                                    {\n                                        anchor(ViewAnnotationAnchor.BOTTOM_LEFT)\n                                        offsetY(50.0)\n                                    }\n                                )\n                                allowOverlap(false)\n                                visible(visible)\n                            }\n                        ) {\n                            Box(modifier = Modifier\n                                .fillMaxHeight(0.2f)\n                                .fillMaxWidth(0.5f)){\n                                MapCard(mapScreenViewModel = mapScreenViewModel)\n                                IconButton(\n                                    onClick = {visible = false},\n                                    modifier = Modifier\n                                        .size(24.dp)  // Set the size of the IconButton to be small\n                                ) {\n                                    Icon(\n                                        imageVector = Icons.Default.Clear,\n                                        contentDescription = \"Close\",\n                                        tint = Color.DarkGray\n                                    )\n                                }\n                                Box(\n                                    modifier = Modifier\n                                        .fillMaxWidth()\n                                        .align(Alignment.BottomCenter),\n                                    contentAlignment = Alignment.Center\n                                ) {\n                                    Text(\n                                        \"Detaljert varsel\",\n                                        modifier = Modifier\n                                            .clickable {\n                                                mapViewModel.updateZoomLevel(mViewportState.cameraState.zoom)\n                                                mapViewModel.updateMapCenter(mViewportState.cameraState.center)\n                                                navController.navigate(\"DetailedWeather/${point.latitude()},${point.longitude()}\")\n                                            }\n                                            .padding(8.dp),\n                                        fontSize = 10.sp,\n                                        textDecoration = TextDecoration.Underline,\n                                    )\n                                }\n                            }\n                        }\n                    }\n                }\n                Box(modifier = Modifier\n                    .fillMaxWidth(0.6f)\n                    .fillMaxHeight(0.1f)\n                    .align(Alignment.BottomCenter)\n                ){\n                    Row(\n                        horizontalArrangement = Arrangement.SpaceEvenly,\n                        modifier = Modifier\n                            .fillMaxWidth()\n                            .padding(20.dp)\n                            .background(\n                                Color(0xFF171729).copy(alpha = 0.95f),\n                                shape = RoundedCornerShape(20.dp)\n                            )\n                    ) {\n                        IconButton(modifier = Modifier.weight(1f) ,onClick = {metAlertViewModel.togglePopupVisibility() }) {\n                            Icon(\n                                imageVector = Icons.Default.Warning,\n                                contentDescription = \"MetAlerts\",\n                                tint = Color(0xFFF9E784)\n                            )\n                        }\n                        VerticalDivider()\n                        IconButton(modifier = Modifier.weight(1f) ,onClick = {\n                            getLocationMap(context, activity) { location ->\n                                if(location != null){\n                                    mViewportState.setCameraOptions {\n                                        center(Point.fromLngLat(\n                                            location.longitude,\n                                            location.latitude\n                                        ))\n                                    }\n                                }\n                            }\n                        }) {\n                            Icon(painter = painterResource(id = R.drawable.mylocationgoogle2),\n                                contentDescription = \"GoToMyLocation\" ,\n                                tint = Color(0xFF4694E2)\n                            )\n                        }\n                    }\n                }\n                searchBar(enturViewModel = enturViewModel, mapViewState = mViewportState)\n                metAlerts(metAlertViewModel = metAlertViewModel)\n            }\n        }\n    }\n}\n\n@Composable\nfun VerticalDivider() {\n    Divider(\n        modifier = Modifier\n            .fillMaxHeight()\n            .width(2.dp),\n        color = Color.Gray\n    )\n}\n\n@Composable\nfun MapCard(mapScreenViewModel: MapScreenViewModel){\n    val dataState by mapScreenViewModel.HVUIState.collectAsState()\n    val isLoading by mapScreenViewModel.isPopupVisible.collectAsState()\n    Card(\n        shape = RoundedCornerShape(15.dp),\n        modifier = Modifier.fillMaxSize()\n    )\n    {\n        Box {\n            Column(\n                verticalArrangement = Arrangement.SpaceEvenly,\n                horizontalAlignment = Alignment.Start,\n                modifier = Modifier\n                    .background(Color.White)\n                    .padding(16.dp)\n                    .fillMaxSize()\n            ) {\n                if(isLoading){\n                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                        CircularProgressIndicator(modifier = Modifier)\n                    }\n                } else {\n                    Row(\n                        horizontalArrangement = Arrangement.SpaceBetween,\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Row(verticalAlignment = Alignment.CenterVertically,\n                            horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n                            val painter = painterResource(id = R.drawable.thermometer)\n                            Image(painter = painter, contentDescription = \"Temperature\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n                            Column(horizontalAlignment = Alignment.Start) {\n                                Text(text = \"Sjø-temp\", fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"temperature\" }?.value?.toDouble()?.roundToInt()} °C\", fontSize = 14.sp)\n                            }\n                        }\n                        Row(verticalAlignment = Alignment.CenterVertically,\n                            horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n                            val painter = painterResource(id = R.drawable.wind)\n                            Image(painter = painter, contentDescription = \"Wind\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n\n                            Column(horizontalAlignment = Alignment.Start) {\n                                Text(text = \"Vind\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"wind_length\" }?.value?.toDouble()?.roundToInt()} m/s\", fontSize = 14.sp)\n                            }\n                        }\n                    }\n                    Row(\n                        horizontalArrangement = Arrangement.SpaceBetween,\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Row(verticalAlignment = Alignment.CenterVertically,\n                            horizontalArrangement = Arrangement.spacedBy(8.dp),\n                        ) {\n                            val painter = painterResource(id = R.drawable.waves)\n                            Image(painter = painter, contentDescription = \"Current\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n                            Column(horizontalAlignment = Alignment.Start) {\n                                Text(text = \"Strøm\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                Text(text = \"${String.format(\"%.1f\", dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"current_length\" }?.value?.toDouble())} m/s\", fontSize = 14.sp)\n                            }\n                        }\n                        Row(verticalAlignment = Alignment.CenterVertically,\n                            horizontalArrangement = Arrangement.spacedBy(8.dp)){\n                            val painter = painterResource(id = R.drawable.salinity)\n                            Image(painter = painter, contentDescription = \"Salinity\", modifier = Modifier.size(18.dp))\n                            Column(horizontalAlignment = Alignment.Start) {\n                                Text(text = \"Salt\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"salinity\" }?.value?.toDouble()?.roundToInt()} ‰\", textAlign = TextAlign.Center, fontSize = 14.sp)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nfun getLocationMap(\n    context: Context,\n    activity: Activity,\n    locationCallback: (Location) -> Unit // Callback function to receive location\n) {\n    val fusedLocationClient: FusedLocationProviderClient =\n        LocationServices.getFusedLocationProviderClient(context)\n    if ((ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_FINE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED ||\n                ActivityCompat.checkSelfPermission(\n                    context,\n                    Manifest.permission.ACCESS_COARSE_LOCATION\n                ) != PackageManager.PERMISSION_GRANTED)\n    ) {\n        ActivityCompat.requestPermissions(\n            activity,\n            arrayOf(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ),\n            100\n        )\n    } else {\n        fusedLocationClient.lastLocation\n            .addOnSuccessListener { location: Location? ->\n                if (location != null) {\n                    locationCallback(location) // Call the callback with location\n                }\n            }\n        return\n    }\n}\n\n@Composable\nfun metAlerts(metAlertViewModel: MetAlertViewModel){\n    metAlertViewModel.getNewData()\n    val metAlertState by metAlertViewModel.MAUiState.collectAsState()\n    val isPopupVisible by metAlertViewModel.isPopupVisible.collectAsState()\n    val antallVarsler = metAlertState.MetAlerts?.features?.size\n    var showInfo by remember {\n        mutableStateOf(false)\n    }\n    AnimatedVisibility(\n        visible = isPopupVisible,\n        enter = slideInVertically(\n            initialOffsetY = { it },\n            animationSpec = tween(durationMillis = 300)\n        ) + fadeIn(animationSpec = tween(durationMillis = 300)),\n        exit = slideOutVertically(\n            targetOffsetY = { it },\n            animationSpec = tween(durationMillis = 300)\n        ) + fadeOut(animationSpec = tween(durationMillis = 300))\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize(), contentAlignment = Alignment.Center)\n        {\n            Card(shape = RectangleShape,\n                modifier = Modifier\n                    .align(Alignment.TopCenter)\n                    .fillMaxSize(),\n                colors = CardDefaults.cardColors(containerColor = Color(0xFF171729)))\n            {\n                Row {\n                    IconButton(\n                        onClick = { metAlertViewModel.togglePopupVisibility()\n                            showInfo = false},\n                        modifier = Modifier\n                            .size(40.dp)\n                    ) {\n                        Icon(\n                            imageVector = Icons.Default.Clear,\n                            contentDescription = \"Close\",\n                            tint = Color(0xFFCFE3F3)\n                        )\n                    }\n                    Spacer(modifier = Modifier.weight(1f))\n                    IconButton(\n                        onClick = { showInfo = true },\n                        modifier = Modifier\n                            .size(40.dp)\n                    ) {\n                        Icon(\n                            imageVector = Icons.Default.Info,\n                            contentDescription = \"Close\",\n                            tint = Color(0xFFCFE3F3)\n                        )\n                    }\n                }\n                if(showInfo){\n                    Box(\n                        contentAlignment = Alignment.Center, // Centering vertically\n                        modifier = Modifier\n                            .fillMaxSize()\n                            .clickable { showInfo = false }\n                    ){\n                        Column(horizontalAlignment = Alignment.CenterHorizontally) {\n                            Text(\n                                text = \"Farevarslene er hentet fra Metrologisk Institutt, og viser farevarsler langs hele norskekysten.\\n \\n\" +\n                                        \"Gult nivå brukes om en moderat farlig situasjon, som kan forårsake skader lokalt.\\n \\n\" +\n                                        \"Oransje nivå brukes om en alvorlig situasjon og været kan føre til alvorlige skader.\\n \\n\" +\n                                        \"Rødt nivå brukes om en ekstrem situasjon. Dette farenivået forekommer svært sjelden, og kan føre til store skader.\",\n                                color = Color.White,\n                                textAlign = TextAlign.Center,\n                                fontWeight = FontWeight.Black\n                            )\n                            Text(modifier = Modifier.padding(20.dp),\n                                text = \"Klikk for å avvise\",\n                                fontSize = 12.sp,\n                                color = Color.White,\n                                textAlign = TextAlign.Center,\n                                fontWeight = FontWeight.Black\n                            )\n                        }\n                    }\n                }\n                if(antallVarsler != null){\n                    if(antallVarsler == 0){\n                        Box(\n                            contentAlignment = Alignment.Center, // Centering vertically\n                            modifier = Modifier.fillMaxSize()\n                        ){\n                            Text(\n                                text = \"Ingen farevarsler funnet for sjøen!\",\n                                color = Color.White,\n                                textAlign = TextAlign.Center,\n                                fontWeight = FontWeight.Black\n                            )\n                        }\n                    } else {\n                        LazyColumn(\n                            modifier = Modifier\n                                .padding(16.dp)\n                                .fillMaxSize()\n                                .clickable { metAlertViewModel.togglePopupVisibility() }\n                        ) {\n                            items(antallVarsler){ metalertNr ->\n                                ExpandableCard(metAlertState, metalertNr)\n                            }\n                        }\n                    }\n                } else {\n                    Box(\n                        modifier = Modifier.fillMaxSize(),\n                        contentAlignment = Alignment.Center\n                    ){\n                        Text(\n                            text = \"Vi har dessverre problemer med å hente data om farevarsler på sjøen\",\n                            color = Color.White,\n                            textAlign = TextAlign.Center,\n                            fontWeight = FontWeight.Black\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ExpandableCard(metAlertState: MetAlersUiState, nr : Int) {\n    var expanded by remember { mutableStateOf (false) }\n    val inputString = (metAlertState.MetAlerts?.features?.get(nr)?.properties?.title).toString()\n    val parts = inputString.split(\",\")\n    val result = parts.take(3).joinToString(\",\").trim()\n\n    val warning = painterResource(id = R.drawable.warning)\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n    val imageUri = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.resources?.firstOrNull { it.mimeType?.startsWith(\"image/png\") == true }?.uri\n\n    val fareStart = metAlertState.MetAlerts?.features?.get(nr)?.timeinterval?.interval?.get(0)\n        ?.let { formatToNorwegianTime(it) }\n    val fareSlutt = metAlertState.MetAlerts?.features?.get(nr)?.timeinterval?.interval?.get(1)\n        ?.let { formatToNorwegianTime(it) }\n\n    val yellowGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFF9C4), // Light yellow\n            Color(0xFFFFEB3B), // Vivid yellow\n            Color(0xFFFFD726)  // Dark yellow\n        )\n    )\n    val redGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFCDD2), // Light red\n            Color(0xFFE57373), // Medium red\n            Color(0xFFD32F2F)  // Dark red\n        )\n    )\n    val orangeGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFE0B2), // Light orange\n            Color(0xFFFFB74D), // Medium orange\n            Color(0xFFFB8C00)  // Dark orange\n        )\n    )\n    val greenGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFA5D6A7), // Light green\n            Color(0xFF66BB6A), // Medium green\n            Color(0xFF2E7D32)  // Dark green\n        )\n    )\n    val matrixColor = when(\"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.riskMatrixColor}\") {\n        \"Red\" -> redGradient\n        \"Orange\" -> orangeGradient\n        \"Green\" -> greenGradient\n        else -> yellowGradient// Default color\n    }\n    val translatedColor = when (matrixColor) {\n        redGradient -> \"Rødt nivå\"\n        orangeGradient -> \"Oransje nivå\"\n        greenGradient -> \"Grønt nivå\"\n        else -> \"Gult nivå\" // If the color is not recognized, keep it as it is\n    }\n    Card(\n        shape = RoundedCornerShape(8.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n            pressedElevation = 8.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 8.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 8.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(matrixColor)){\n            Column() {\n                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()){\n                    Image(painter = warning, contentDescription = \"Warning\", modifier = Modifier.size(40.dp), Alignment.Center)\n                    Column(modifier = Modifier\n                        .weight(1f)\n                        .padding(horizontal = 16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally) {\n                        Text(\n                            text = result,\n                            style = MaterialTheme.typography.titleMedium,\n                            modifier = Modifier.padding(12.dp),\n                            textAlign = TextAlign.Center,\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\n                            text = translatedColor,\n                            style = MaterialTheme.typography.bodyMedium,\n                            modifier = Modifier.padding(8.dp),\n                            textAlign = TextAlign.Center\n                        )\n                    }\n                    Image(painter = toggleIconPainter, contentDescription = \"Expand\", modifier = Modifier.size(40.dp), Alignment.CenterStart)\n                }\n                if (expanded) {\n                    Text(\n                        text = \"Anbefalinger:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.instruction}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Beskrivelse:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.description}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Konsekvenser:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.consequences}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Område:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.area}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Tidsperiode:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"Fra $fareStart \\nTil $fareSlutt\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    if(imageUri != null){\n                        AsyncImage(\n                            model = ImageRequest.Builder(LocalContext.current)\n                                .data(imageUri)\n                                .crossfade(true)\n                                .build(),\n                            contentDescription = \"Loaded Image\",\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .clickable { },\n                            contentScale = ContentScale.Crop\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\nfun formatToNorwegianTime(isoDateTime: String): String { // Gjør dato-format til lesbart format\n    val zonedDateTime = ZonedDateTime.parse(isoDateTime)\n\n    val osloZone = zonedDateTime.withZoneSameInstant(ZoneId.of(\"Europe/Oslo\"))\n\n    val formatter = DateTimeFormatter.ofPattern(\"dd.MM.yyyy 'kl.' HH:mm\")\n\n    return osloZone.format(formatter)\n}\n\n@OptIn(ExperimentalComposeUiApi::class, MapboxExperimental::class, ExperimentalMaterial3Api::class)\n@Composable\nfun searchBar(enturViewModel : EnTurViewModel, mapViewState: MapViewportState){\n    val isVisible by enturViewModel.isPopupVisible.collectAsState()\n    val lUIState by enturViewModel.locationUIState.collectAsState()\n    val keyboardController = LocalSoftwareKeyboardController.current\n    var newLocationName by remember{ mutableStateOf(\"\") }\n\n    val scrollState = rememberScrollState()\n    AnimatedVisibility(\n        visible = isVisible,\n        enter = slideInVertically(\n            initialOffsetY = { it },\n            animationSpec = tween(durationMillis = 300)\n        ) + fadeIn(animationSpec = tween(durationMillis = 300)),\n        exit = slideOutVertically(\n            targetOffsetY = { it },\n            animationSpec = tween(durationMillis = 300)\n        ) + fadeOut(animationSpec = tween(durationMillis = 300))\n    ) {\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n        ) {\n            Card (\n                shape = RectangleShape,\n                modifier = Modifier\n                    .align(Alignment.TopCenter)\n                    .fillMaxSize(),\n                colors = CardDefaults.cardColors(containerColor = Color(0xFF171729))\n            ){\n                Row() {\n                    IconButton(\n                        onClick = {\n                            enturViewModel.clearSuggestions()\n                            enturViewModel.toggleVisibility()\n                            newLocationName = \"\"\n                        }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.Clear,\n                            contentDescription = \"Tilbake\",\n                            modifier = Modifier.size(40.dp), // Juster størrelsen etter behov\n                            tint = Color.White // Juster fargen etter ønske\n                        )\n                    }\n                }\n                Row(\n                    horizontalArrangement = Arrangement.Center ,\n                    verticalAlignment = Alignment.CenterVertically,\n                    modifier = Modifier\n                        .fillMaxSize()\n                ){\n                    Column(\n                        modifier = Modifier\n                            .padding(top = 24.dp)\n                            .fillMaxSize(),\n                        horizontalAlignment = Alignment.CenterHorizontally,\n                    ) {\n                        TextField(\n                            value = newLocationName,\n                            onValueChange = {newLocationName = it\n                                enturViewModel.fetchSuggestions(it)\n                                if (newLocationName.isNotEmpty()){\n                                    enturViewModel.clearSuggestions()\n                                }\n                            },\n                            shape = RoundedCornerShape(20.dp),\n                            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                            keyboardActions = KeyboardActions(onDone = {\n                                if (newLocationName.isNotEmpty()){\n                                    newLocationName = \"\"\n                                    keyboardController?.hide()\n                                }\n                            }),\n                            modifier = Modifier\n                                .fillMaxWidth(0.9f),\n                            label = { Text(\"Søk\")},\n                            colors = TextFieldDefaults.colors(\n                                focusedIndicatorColor = Color.Transparent,\n                                unfocusedIndicatorColor = Color.Transparent,\n                                disabledIndicatorColor = Color.Transparent\n                            )\n                        )\n                        Column(\n                            modifier = Modifier\n                                .verticalScroll(scrollState)\n                                .padding(3.dp)\n                        ) {\n                            lUIState.suggestion?.forEach{suggestion->\n                                Text(\n                                    text = suggestion.properties.label,\n                                    modifier = Modifier\n                                        .background(Color(0xFFCFE3F3))\n                                        .fillMaxWidth(0.8f)\n                                        .clickable {\n                                            newLocationName = suggestion.properties.label\n                                            enturViewModel.clearSuggestions()\n                                            val kordinatString =\n                                                suggestion.geometry.coordinates[1] + \",\" + suggestion.geometry.coordinates[0]\n                                            val kordinat = kordinatString.split(\",\")\n                                            val point = Point.fromLngLat(\n                                                kordinat[1].toDouble(),\n                                                kordinat[0].toDouble()\n                                            )\n                                            enturViewModel.toggleVisibility()\n                                            mapViewState.setCameraOptions {\n                                                zoom(12.0)\n                                                center(point)\n                                            }\n                                        }\n                                        .padding(8.dp)\n                                )\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt	
@@ -6,8 +6,6 @@
 import android.content.Context
 import android.content.pm.PackageManager
 import android.location.Location
-import android.os.Build
-import androidx.annotation.RequiresApi
 import androidx.compose.animation.AnimatedVisibility
 import androidx.compose.animation.core.tween
 import androidx.compose.animation.fadeIn
@@ -38,10 +36,8 @@
 import androidx.compose.material.icons.filled.ArrowBack
 import androidx.compose.material.icons.filled.Clear
 import androidx.compose.material.icons.filled.Info
-import androidx.compose.material.icons.filled.LocationOn
 import androidx.compose.material.icons.filled.Search
 import androidx.compose.material.icons.filled.Warning
-import androidx.compose.material3.BottomAppBar
 import androidx.compose.material3.Card
 import androidx.compose.material3.CardDefaults
 import androidx.compose.material3.CircularProgressIndicator
@@ -80,8 +76,6 @@
 import androidx.compose.ui.text.style.TextDecoration
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
-import androidx.compose.ui.window.Popup
-import androidx.compose.ui.window.PopupProperties
 import androidx.core.app.ActivityCompat
 import androidx.lifecycle.viewmodel.compose.viewModel
 import androidx.navigation.NavController
@@ -786,8 +780,8 @@
                         Icon(
                             imageVector = Icons.Filled.Clear,
                             contentDescription = "Tilbake",
-                            modifier = Modifier.size(40.dp), // Juster størrelsen etter behov
-                            tint = Color.White // Juster fargen etter ønske
+                            modifier = Modifier.size(40.dp),
+                            tint = Color.White
                         )
                     }
                 }
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/EnTurViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\nimport android.util.Log\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport kotlinx.serialization.Serializable\nimport no.uio.ifi.in2000.prosjekt.Data.EnTur.EnTurRepository\nimport no.uio.ifi.in2000.prosjekt.Model.FeaturesEnTur\nimport no.uio.ifi.in2000.prosjekt.ui.home.CombinedWeatherData\nimport no.uio.ifi.in2000.prosjekt.ui.home.LocationUIState\n\n\n@Serializable\ndata class LocationUIState(\n    val suggestion: List<FeaturesEnTur>? = emptyList()\n)\nclass EnTurViewModel : ViewModel() {\n    private val enTurRepository: EnTurRepository = EnTurRepository()\n\n    private val _locationUIstate = MutableStateFlow(LocationUIState())\n    val locationUIState: StateFlow<LocationUIState> = _locationUIstate.asStateFlow()\n\n    private val _isPopupVisible = MutableStateFlow(false)\n    val isPopupVisible: StateFlow<Boolean> = _isPopupVisible.asStateFlow()\n\n    fun fetchSuggestions(locationName: String){\n        viewModelScope.launch {\n            val suggestionsTemp = enTurRepository.getEnTurAPI(locationName)?.features\n            Log.d(\"Suggestions\", \"Fetched ${suggestionsTemp?.size} suggestions\")\n            //_suggestionsUIstate.value = suggestionsTemp\n            _locationUIstate.update {currenState ->\n                currenState.copy(suggestion = suggestionsTemp)\n            }\n        }\n    }\n\n    fun clearSuggestions(){\n        viewModelScope.launch {\n            _locationUIstate.update {currenState ->\n                currenState.copy(suggestion = emptyList())\n            }\n            // _suggestionsUIstate.value =  null\n        }\n    }\n\n    fun toggleVisibility(){\n        _isPopupVisible.value = !_isPopupVisible.value\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/EnTurViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/EnTurViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/EnTurViewModel.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/EnTurViewModel.kt	
@@ -11,14 +11,9 @@
 import kotlinx.serialization.Serializable
 import no.uio.ifi.in2000.prosjekt.Data.EnTur.EnTurRepository
 import no.uio.ifi.in2000.prosjekt.Model.FeaturesEnTur
-import no.uio.ifi.in2000.prosjekt.ui.home.CombinedWeatherData
 import no.uio.ifi.in2000.prosjekt.ui.home.LocationUIState
 
 
-@Serializable
-data class LocationUIState(
-    val suggestion: List<FeaturesEnTur>? = emptyList()
-)
 class EnTurViewModel : ViewModel() {
     private val enTurRepository: EnTurRepository = EnTurRepository()
 
@@ -44,7 +39,7 @@
             _locationUIstate.update {currenState ->
                 currenState.copy(suggestion = emptyList())
             }
-            // _suggestionsUIstate.value =  null
+
         }
     }
 
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MetAlertViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.MetAlert.MetAlertRepository\nimport no.uio.ifi.in2000.prosjekt.Model.BigDataCloud\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.MetAlerts\n\ndata class MetAlersUiState(\n    val MetAlerts: MetAlerts? = MetAlerts(),\n    val MetAlertsCoordinate: MetAlerts? = MetAlerts()\n)\nclass MetAlertViewModel: ViewModel() {\n    private val metRepo : MetAlertRepository = MetAlertRepository()\n    private val _MAUiState = MutableStateFlow(MetAlersUiState())\n\n    private val _isPopupVisible = MutableStateFlow(false)\n    val isPopupVisible: StateFlow<Boolean> = _isPopupVisible.asStateFlow()\n\n    val MAUiState: StateFlow<MetAlersUiState> = _MAUiState.asStateFlow()\n\n    init {\n        getNewData()\n    }\n\n    fun getNewData(){\n        viewModelScope.launch {\n            _MAUiState.update {\n                it.copy(\n                    MetAlerts = metRepo.getMetAlert()\n                )\n            }\n        }\n    }\n\n    fun getNewDataCoords(lat : String, lon: String){\n        viewModelScope.launch {\n            _MAUiState.update {\n                it.copy(\n                    MetAlertsCoordinate = metRepo.getMetAlertCoordinates(lat, lon)\n                )\n            }\n        }\n    }\n\n    fun togglePopupVisibility() {\n        _isPopupVisible.value = !_isPopupVisible.value\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MetAlertViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MetAlertViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MetAlertViewModel.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MetAlertViewModel.kt	
@@ -8,8 +8,6 @@
 import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
 import no.uio.ifi.in2000.prosjekt.Data.MetAlert.MetAlertRepository
-import no.uio.ifi.in2000.prosjekt.Model.BigDataCloud
-import no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain
 import no.uio.ifi.in2000.prosjekt.Model.MetAlerts
 
 data class MetAlersUiState(
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\nimport android.os.Build\nimport android.provider.ContactsContract.Data\nimport androidx.annotation.RequiresApi\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository\nimport no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository\nimport no.uio.ifi.in2000.prosjekt.Model.BigDataCloud\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.WindCurrentProjection\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.HavvarselUIState\nimport java.time.Instant\nimport java.time.LocalDate\nimport java.time.LocalDateTime\nimport java.time.ZoneId\nimport java.time.format.DateTimeFormatter\n\ndata class DataUIStateHav(\n    val dataProjectionMain: DataProjectionMain? = DataProjectionMain())\nclass MapScreenViewModel: ViewModel() {\n    private val _isPopupVisible = MutableStateFlow(false)\n    val isPopupVisible: StateFlow<Boolean> = _isPopupVisible.asStateFlow()\n\n    private val havvarselRepository: HavvarselRepository = HavvarselRepository()\n\n    private val _HVUIState = MutableStateFlow(DataUIStateHav())\n    val HVUIState: StateFlow<DataUIStateHav> = _HVUIState.asStateFlow()\n\n    private var currentDateTime = Instant.now()\n    private val norwegianTimeZone = ZoneId.of(\"Europe/Oslo\")\n    private val norwegianDateTime = currentDateTime.atZone(norwegianTimeZone).toLocalDateTime()\n    private val roundedDateTime = norwegianDateTime.withMinute(0).withSecond(0).withNano(0)\n    private val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\")\n\n    private val norwegianNowDateTime = roundedDateTime\n    private val formattedNowDateTime = formatter.format(norwegianNowDateTime)\n    private val norwegianPlusOneDateTime = roundedDateTime.plusHours(1)\n    private val formattedPlusOneDateTime = formatter.format(norwegianPlusOneDateTime)\n    init {\n\n    }\n    fun getNewData(lat : String, lon : String){\n        currentDateTime = Instant.now() // Oppdaterer nåværende tid\n        togglePopupVisibility()\n        viewModelScope.launch {\n            _HVUIState.update {\n                it.copy(\n                    dataProjectionMain = havvarselRepository.getHavvarselDataProjection(listOf(\"temperature\", \"salinity\",\"Uwind\",\"Vwind\",\"wind_direction\",\"wind_length\",\"wind_northwards\",\"wind_eastwards\",\"w\",\"current_direction\",\"current_length\",\"tke\",\"u_eastward\",\"v_northward\"), lon, lat, \"0\", formattedNowDateTime, formattedPlusOneDateTime),\n                )\n            }\n            togglePopupVisibility()\n        }\n    }\n    fun togglePopupVisibility() {\n        _isPopupVisible.value = !_isPopupVisible.value\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt	
@@ -1,8 +1,5 @@
 package no.uio.ifi.in2000.prosjekt.ui.Map
 
-import android.os.Build
-import android.provider.ContactsContract.Data
-import androidx.annotation.RequiresApi
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import kotlinx.coroutines.flow.MutableStateFlow
@@ -10,15 +7,9 @@
 import kotlinx.coroutines.flow.asStateFlow
 import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
-import no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository
 import no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository
-import no.uio.ifi.in2000.prosjekt.Model.BigDataCloud
 import no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain
-import no.uio.ifi.in2000.prosjekt.Model.WindCurrentProjection
-import no.uio.ifi.in2000.prosjekt.ui.infoSteder.HavvarselUIState
 import java.time.Instant
-import java.time.LocalDate
-import java.time.LocalDateTime
 import java.time.ZoneId
 import java.time.format.DateTimeFormatter
 
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/BottomBar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.home\n\nimport android.annotation.SuppressLint\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Home\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material.icons.filled.Settings\nimport androidx.compose.material.icons.outlined.Home\nimport androidx.compose.ui.res.vectorResource\nimport androidx.compose.material.icons.outlined.Info\nimport androidx.compose.material.icons.outlined.LocationOn\nimport androidx.compose.material.icons.outlined.Settings\nimport androidx.compose.material3.Badge\nimport androidx.compose.material3.BadgedBox\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.NavigationBar\nimport androidx.compose.material3.NavigationBarItem\nimport androidx.compose.material3.NavigationBarItemDefaults\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.res.painterResource\nimport androidx.navigation.NavController\nimport no.uio.ifi.in2000.prosjekt.R\n\ndata class BottomNavigationItem(\n    val title : String,\n    val selectedIcon : ImageVector,\n    val unselectedIcon : ImageVector,\n    val hasNews : Boolean,\n    val badgeCount : Int? = null\n\n)\n\n@Composable\nfun loadImageVector(resourceId: Int): ImageVector {\n    // Use vectorResource for vector drawables\n    return ImageVector.vectorResource(resourceId)\n}\n@SuppressLint(\"UnusedMaterial3ScaffoldPaddingParameter\")\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun RunBottomBar(navController: NavController){\n\n    //liste med elementer\n    val items = listOf(\n        BottomNavigationItem(\n            title = \"Hjem\",\n            selectedIcon = Icons.Filled.Home,\n            unselectedIcon = Icons.Filled.Home,\n            hasNews = false\n        ),\n        BottomNavigationItem(\n            title = \"Lær\",\n            selectedIcon = loadImageVector(resourceId = R.drawable.learn),\n            unselectedIcon = loadImageVector(resourceId = R.drawable.learn),\n            hasNews = false\n        ),\n        BottomNavigationItem(\n            title = \"Kart\",\n            selectedIcon = Icons.Outlined.LocationOn,\n            unselectedIcon = Icons.Outlined.LocationOn,\n            hasNews = false\n        ),\n        BottomNavigationItem(\n            title = \"Manual\",\n            selectedIcon = loadImageVector(resourceId = R.drawable.book),\n            unselectedIcon = loadImageVector(resourceId = R.drawable.book),\n            hasNews = false\n        )\n    )\n    var selectedItemIndex by rememberSaveable {\n        mutableIntStateOf(0)\n    }\n    NavigationBar(containerColor = Color(0xFFCFE3F3)) {\n        items.forEachIndexed { index, item ->\n            NavigationBarItem(\n                colors = NavigationBarItemDefaults.colors(Color(0xFF1F3468)),\n                selected = selectedItemIndex == index,\n                onClick = {\n                    selectedItemIndex = index\n                    navController.navigate(item.title)\n                },\n                label = { Text(text = item.title) },\n                icon = {\n                    BadgedBox(\n                        badge = {\n                            if(item.badgeCount != null){\n                                Badge{\n                                    Text(text = item.badgeCount.toString())\n                                }}\n                            else if(item.hasNews){\n                                Badge()\n                            }\n                        }\n\n                    ) {\n\n\n                        Icon(\n                            imageVector = if (index == selectedItemIndex){\n                                item.selectedIcon\n                            }\n                            else{\n                                item.unselectedIcon\n                            },\n                            contentDescription = item.title\n\n                        )\n                    }\n\n                }\n            )\n\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/BottomBar.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/BottomBar.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/BottomBar.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/BottomBar.kt	
@@ -3,14 +3,8 @@
 import android.annotation.SuppressLint
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.Home
-import androidx.compose.material.icons.filled.Info
-import androidx.compose.material.icons.filled.LocationOn
-import androidx.compose.material.icons.filled.Settings
-import androidx.compose.material.icons.outlined.Home
 import androidx.compose.ui.res.vectorResource
-import androidx.compose.material.icons.outlined.Info
 import androidx.compose.material.icons.outlined.LocationOn
-import androidx.compose.material.icons.outlined.Settings
 import androidx.compose.material3.Badge
 import androidx.compose.material3.BadgedBox
 import androidx.compose.material3.ExperimentalMaterial3Api
@@ -26,7 +20,6 @@
 import androidx.compose.runtime.setValue
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.graphics.vector.ImageVector
-import androidx.compose.ui.res.painterResource
 import androidx.navigation.NavController
 import no.uio.ifi.in2000.prosjekt.R
 
@@ -39,6 +32,9 @@
 
 )
 
+/*
+Made a method for loading vector drawables
+ */
 @Composable
 fun loadImageVector(resourceId: Int): ImageVector {
     // Use vectorResource for vector drawables
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository\nimport no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository\nimport no.uio.ifi.in2000.prosjekt.Model.BigDataCloud\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.Temperature\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\nimport java.time.LocalDate\nimport java.time.ZoneOffset\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\n\ndata class HavvarselUIState(\n    val dataProjectionMain: DataProjectionMain? = null,\n    val temperatureProjection: Temperature? = null\n)\n\n\n\nclass InfoStederViewModel(coords : String): ViewModel() {\n    val liste = coords.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    private val havvarselRepository: HavvarselRepository = HavvarselRepository()\n\n    private val _havvarselUIState = MutableStateFlow(HavvarselUIState())\n\n    val havvarselUIState: StateFlow<HavvarselUIState> = _havvarselUIState.asStateFlow()\n    private val currentDate = LocalDate.now().toString() // Eks-output = 2024-03-20\n    private val yesterdaysDate = LocalDate.now().minusDays(1).toString() // Eks-output = 2024-03-20\n    private val fireDagerFrem = LocalDate.now().plusDays(4).toString()\n\n    init {\n        viewModelScope.launch {\n            _havvarselUIState.update {\n                it.copy(\n                    dataProjectionMain = havvarselRepository.getHavvarselDataProjection(listOf(\"temperature\", \"salinity\",\"current_direction\",\"current_length\"), lon, lat, \"0\", fireDagerFrem, yesterdaysDate),\n                    temperatureProjection = havvarselRepository.getHavarselTemperature(lon,lat,\"0\",fireDagerFrem,yesterdaysDate)\n                )\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt	
@@ -1,7 +1,5 @@
 package no.uio.ifi.in2000.prosjekt.ui.infoSteder
 
-import android.os.Build
-import androidx.annotation.RequiresApi
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import kotlinx.coroutines.flow.MutableStateFlow
@@ -9,16 +7,10 @@
 import kotlinx.coroutines.flow.asStateFlow
 import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
-import no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository
 import no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository
-import no.uio.ifi.in2000.prosjekt.Model.BigDataCloud
 import no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain
 import no.uio.ifi.in2000.prosjekt.Model.Temperature
-import no.uio.ifi.in2000.prosjekt.Model.WeatherData
 import java.time.LocalDate
-import java.time.ZoneOffset
-import java.time.ZonedDateTime
-import java.time.format.DateTimeFormatter
 
 data class HavvarselUIState(
     val dataProjectionMain: DataProjectionMain? = null,
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport co.yml.charts.common.model.Point\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.OceanForecast.OceanForecastRepository\nimport no.uio.ifi.in2000.prosjekt.Model.OceanForecastData\nimport no.uio.ifi.in2000.prosjekt.Model.OceanTimeSeries\nimport no.uio.ifi.in2000.prosjekt.Model.TimeSeries\nimport java.time.LocalTime\nimport java.time.ZoneId\n\ndata class oceanForecastUiState(\n    val oceanForecastData: OceanForecastData? = OceanForecastData(),\n    var oceanWeatherList: List<OceanTimeSeries?> = emptyList()\n)\n\nclass InfoStederOFViewModel(coords: String): ViewModel(){\n    private val _isLoading = MutableStateFlow(false)\n    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()\n\n    private val _waveMap = MutableStateFlow<Map<String, Double>>(emptyMap())\n    val waveMap: StateFlow<Map<String, Double>> = _waveMap\n\n    val liste = coords.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    private val oceanForecastRepo = OceanForecastRepository()\n\n    private val _oFUiState = MutableStateFlow(oceanForecastUiState())\n    val oFUiState: StateFlow<oceanForecastUiState> = _oFUiState.asStateFlow()\n\n    var startHour = 0\n    init {\n        getOceanData(lat, lon, 0)\n    }\n\n    fun getOceanData(lat : String, lon : String, offset: Int){\n        toggleLoading()\n        viewModelScope.launch {\n            _oFUiState.update {\n                it.copy(\n                    oceanForecastData = oceanForecastRepo.getOceanForecast(lat,lon)\n                )\n            }\n            setStartHour()\n            makeWeatherList(offset)\n            waveHeight()\n            toggleLoading()\n        }\n    }\n\n    fun toggleLoading() {\n        _isLoading.value = !_isLoading.value\n    }\n\n    fun setStartHour(){\n        if(_oFUiState.value.oceanForecastData?.properties?.timeseries?.isEmpty() == true){\n            return\n        }\n        startHour = (_oFUiState.value.oceanForecastData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0\n    }\n\n    fun waveHeight(){\n        if(_oFUiState.value.oceanForecastData?.properties?.timeseries?.isEmpty() == true){\n            return\n        }\n        val map = mutableMapOf<String, Double>()\n        var max = 0.0\n        var maxTid = 0\n        if(startHour == 22){\n            repeat(23){\n                val tid = (_oFUiState.value.oceanForecastData?.properties?.timeseries?.get(it+2)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0\n                val height = _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(it+2)?.data?.instant?.details?.get(\"sea_surface_wave_height\") ?: -1.0\n                map[tid.toString()] = height // Avoid nullpointerexception\n                if(height >= max){\n                    max = height\n                    maxTid = tid\n                }\n            }\n        } else if (startHour == 23){\n            repeat(22){\n                val tid = (_oFUiState.value.oceanForecastData?.properties?.timeseries?.get(it+1)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0\n                val height = _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(it+1)?.data?.instant?.details?.get(\"sea_surface_wave_height\") ?: -1.0\n                map[tid.toString()] = height // Avoid nullpointerexception\n                if(height >= max){\n                    max = height\n                    maxTid = tid\n                }\n            }\n        } else {\n            repeat(23-startHour){\n                val tid = (_oFUiState.value.oceanForecastData?.properties?.timeseries?.get(it)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0\n                val height = _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(it)?.data?.instant?.details?.get(\"sea_surface_wave_height\") ?: -1.0\n                map[tid.toString()] = height // Avoid nullpointerexception\n                if(height >= max){\n                    max = height\n                    maxTid = tid\n                }\n            }\n        }\n        map[\"max\"] = max\n        map[\"tid\"] = maxTid.toDouble()\n        _waveMap.value = map\n    }\n\n    fun makeWeatherList(offsett: Int){\n        if(_oFUiState.value.oceanForecastData?.properties?.timeseries?.isEmpty() == true){\n            return\n        }\n        val list = when (offsett) {\n            0 -> when(startHour) {\n                22 -> (0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+2) }\n                23 -> (0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+1) }\n                else -> (0..23-startHour).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index) }\n            }\n            else -> {(0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+offsett-startHour) }\n            }\n        }\n        _oFUiState.value.oceanWeatherList = list\n    }\n\n    fun linechartMaker(offset: Int, variable: String): List<Point> {\n        if(_oFUiState.value.oceanForecastData?.properties?.timeseries?.isEmpty() == true){\n            val pointData = (0..23).map { index -> Point(index.toFloat(), 0.0f) }\n            return pointData\n        }\n        val pointData = when (offset) {\n            0 -> when(startHour) {\n                22 -> (0..23).map { index ->\n                    val temperature = (oFUiState.value.oceanForecastData?.properties?.timeseries\n                        ?.get(index + 2)?.data?.instant?.details\n                        ?.get(variable) ?: 0).toFloat()\n                    Point(index.toFloat(), temperature ?: 0.0f)\n                }\n                23 -> (0..23).map { index ->\n                    val temperature = (_oFUiState.value.oceanForecastData?.properties?.timeseries\n                        ?.get(index + 1)?.data?.instant?.details\n                        ?.get(variable) ?: 0).toFloat()\n                    Point(index.toFloat(), temperature ?: 0.0f)\n                }\n                else -> (startHour..23).map { index ->\n                    val temperature = (oFUiState.value.oceanForecastData?.properties?.timeseries\n                        ?.get(index - startHour)?.data?.instant?.details\n                        ?.get(variable) ?: 0).toFloat()\n\n                    Point(index.toFloat(), temperature ?: 0.0f)\n                }\n            }\n            else -> (0..23).map { index ->\n                val temperature = (_oFUiState.value.oceanForecastData?.properties?.timeseries\n                    ?.get(index + offset - startHour)?.data?.instant?.details\n                    ?.get(variable)?: 0).toFloat()\n\n                Point(index.toFloat(), temperature ?: 0.0f) // Change is here\n            }\n        }\n        return pointData\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt	
@@ -11,9 +11,6 @@
 import no.uio.ifi.in2000.prosjekt.Data.OceanForecast.OceanForecastRepository
 import no.uio.ifi.in2000.prosjekt.Model.OceanForecastData
 import no.uio.ifi.in2000.prosjekt.Model.OceanTimeSeries
-import no.uio.ifi.in2000.prosjekt.Model.TimeSeries
-import java.time.LocalTime
-import java.time.ZoneId
 
 data class oceanForecastUiState(
     val oceanForecastData: OceanForecastData? = OceanForecastData(),
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.Divider\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.lifecycle.ViewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.rememberNavController\nimport no.uio.ifi.in2000.prosjekt.R\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.ExpandableWeatherCardSea\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederLFViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederOFViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.LfRow\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.StatusCell\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.TableCell\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.TableCellImage\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.WeatherIconRow\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.metAlerts\nimport java.time.LocalDate\nimport java.time.LocalTime\nimport java.time.ZoneId\nimport java.time.format.DateTimeFormatter\nimport java.util.Locale\nimport kotlin.math.ceil\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun DWSscreen(\n    navController: NavController,\n    coordinate: String,\n    infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate),\n    infoStederLFViewModel: InfoStederLFViewModel = InfoStederLFViewModel(coordinate)\n) {\n    Scaffold(\n        containerColor = Color(0xFF171729),\n        topBar = {\n            TopAppBar(\n                modifier = Modifier,\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF171729),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n                        Image(\n                            painter = painterResource(id = R.drawable.havblikktext),\n                            contentDescription = \"My Image\",\n                            alignment = Alignment.Center,\n                            colorFilter = ColorFilter.tint(Color(0xFFCFE3F3)),\n                            modifier = Modifier\n                                .size(100.dp)\n                        )\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color(0xFFCFE3F3)\n                        )\n                    }\n                },\n                actions = {\n                    Box(modifier = Modifier, contentAlignment = Alignment.Center) {\n                        Text(getCurrentDateInNorwegianFormat(), color = Color(0xFFCFE3F3))\n                    }\n                }\n            )\n        },\n        bottomBar = {\n            val coordinateList = coordinate.split(\",\").map { it.trim() }\n            val lat = coordinateList.getOrNull(0)?.toDoubleOrNull()\n            val long = coordinateList.getOrNull(1)?.toDoubleOrNull()\n\n            val formattedLat = lat?.let { String.format(\"%.6f\", it) } ?: \"N/A\"\n            val formattedLong = long?.let { String.format(\"%.6f\", it) } ?: \"N/A\"\n            Box(modifier = Modifier\n                .fillMaxWidth()\n                .padding(10.dp), contentAlignment = Alignment.Center){\n                Text(text = \"$formattedLat, $formattedLong\", color = Color.White, fontSize = 12.sp)\n\n            }\n        }\n    ) { innerpadding ->\n        LazyColumn(modifier = Modifier.padding(innerpadding)) {\n            item {\n                WeatherIconRow(infostederLocationForecastVM = infoStederLFViewModel, nr = 0, dag = \"\")\n            }\n            item {\n                ExpandableWeatherCardSea(\n                    infoStederOFViewModel = infoStederOFViewModel,\n                    nr = 0,\n                    dag = getCurrentDateInNorwegianFormat()\n                )\n            }\n            item {\n                Box(modifier = Modifier.height(150.dp)) {\n                    Row() {\n                        Box(\n                            modifier = Modifier\n                                .weight(1f)\n                                .padding(5.dp)\n                        ){\n                            WaveHeigth(infoStederOFViewModel = infoStederOFViewModel)\n                        }\n                        Box(\n                            modifier = Modifier\n                                .weight(1f)\n                                .padding(5.dp)\n                        ){\n                            UvIndex(infoStederLFViewModel = infoStederLFViewModel)\n                        }\n                    }\n                }\n            }\n            item {\n                Wind(infoStederLFViewModel = infoStederLFViewModel, getCurrentDateInNorwegianFormat())\n            }\n        }\n    }\n}\n\n@Composable\nfun WaveHeigth(infoStederOFViewModel: InfoStederOFViewModel) {\n    val map by infoStederOFViewModel.waveMap.collectAsState()\n    val isLoading by infoStederOFViewModel.isLoading.collectAsState()\n\n    val zoneId = ZoneId.of(\"Europe/Oslo\")\n    val currentHour = LocalTime.now(zoneId).hour.toString()\n    val painter = painterResource(id = R.drawable.waveheight)\n\n    Card(\n        shape = RoundedCornerShape(10.dp),\n        modifier = Modifier\n            .padding(6.dp)\n            .fillMaxSize()\n    ) {\n        if(isLoading){\n            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                CircularProgressIndicator(modifier = Modifier)\n            }\n        } else {\n            Row(modifier = Modifier.padding(20.dp)) {\n                Column(modifier = Modifier.weight(1f)) {\n                    Text(\n                        text = \"Bølgetopp\",\n                        style = TextStyle(\n                            color = Color.Black,\n                            fontSize = 16.sp\n                        )\n                    )\n                    Text(\n                        text = \"Nå - ${map[currentHour]} m\",\n                        style = TextStyle(\n                            color = Color.Black,\n                            fontSize = 14.sp\n                        )\n                    )\n                    Text(\n                        text = \"Max - ${map[\"max\"]} m\",\n                        style = TextStyle(\n                            color = Color(0xFF446097),\n                            fontSize = 10.sp\n                        )\n                    )\n                    Text(\n                        text = \"(Kl.${map[\"tid\"]})\",\n                        style = TextStyle(\n                            color = Color(0xFF446097),\n                            fontSize = 10.sp\n                        )\n                    )\n\n                }\n                IconButton(\n                    onClick = { },\n                    modifier = Modifier\n                        .background(\n                            color = Color(0xFF446097),\n                            shape = RoundedCornerShape(10.dp)\n                        )\n                        .fillMaxHeight()\n                ) {\n                    Image(painter = painter, contentDescription = \"Bølgehøyde\", colorFilter = ColorFilter.tint(Color.White), modifier = Modifier.fillMaxSize())\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun UvIndex(infoStederLFViewModel: InfoStederLFViewModel) {\n    val lfUiState by infoStederLFViewModel.lFUiState.collectAsState()\n    val isLoading by infoStederLFViewModel.isLoading.collectAsState()\n    val painter = painterResource(id = R.drawable.uv)\n\n    Card(\n        shape = RoundedCornerShape(10.dp),\n        modifier = Modifier\n            .padding(6.dp)\n            .fillMaxSize()\n    ) {\n        if(isLoading){\n            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                CircularProgressIndicator(modifier = Modifier)\n            }\n        } else {\n            Row(modifier = Modifier.padding(20.dp)) {\n                Column(modifier = Modifier.weight(1f)) {\n                    Text(\n                        text = \"UV-Index\",\n                        style = TextStyle(\n                            color = Color.Black,\n                            fontSize = 16.sp\n                        )\n                    )\n                    Text(\n                        text = lfUiState.weatherData?.properties?.timeseries?.get(0)?.data?.instant?.details?.get(\"ultraviolet_index_clear_sky\").toString(),\n                        style = TextStyle(\n                            color = Color.Black,\n                            fontSize = 14.sp\n                        )\n                    )\n                    Text(\n                        text = uvToText(lfUiState.weatherData?.properties?.timeseries?.get(0)?.data?.instant?.details?.get(\"ultraviolet_index_clear_sky\")),\n                        style = TextStyle(\n                            color = Color.Black,\n                            fontSize = 12.sp\n                        )\n                    )\n                }\n                IconButton(\n                    onClick = { },\n                    modifier = Modifier\n                        .background(\n                            color = Color(0xFFF9E784),\n                            shape = RoundedCornerShape(10.dp)\n                        )\n                        .fillMaxHeight()\n                ) {\n                    Image(painter = painter, contentDescription = \"UV\")\n                }\n            }\n        }\n    }\n}\n\nfun uvToText(uvIndex: Double?): String{\n    if(uvIndex == null){\n        return \"UV-index ikke tilgjengelig\"\n    }\n    return when (uvIndex) {\n        in 0.0..2.9 -> \"Lavt nivå\"\n        in 3.0..5.9 -> \"Moderat nivå\"\n        in 6.0..7.9 -> \"Høyt nivå\"\n        in 8.0..10.9 -> \"Svært høyt nivå\"\n        else -> \"Ekstremt nivå\"\n    }\n}\n\n\n@Composable\nfun Wind(infoStederLFViewModel: InfoStederLFViewModel, tid: String){\n    val locFor by infoStederLFViewModel.lFUiState.collectAsState()\n    infoStederLFViewModel.makeWeatherList(0)\n    val isLoading by infoStederLFViewModel.isLoading.collectAsState()\n    var expanded by remember { mutableStateOf (false) }\n\n    if(locFor.weatherList.isEmpty()){\n        return\n    }\n    val a = locFor.weatherList.size\n    val res = ceil(a.toDouble() / 6).toInt()\n\n    val first = when (expanded) {\n        true -> \"00\"\n        else -> \"00-06\"\n    }\n    val second = when (expanded) {\n        true -> \"01\"\n        else -> \"06-12\"\n    }\n    val third = when (expanded) {\n        true -> \"02\"\n        else -> \"12-18\"\n    }\n    val fourth = when (expanded) {\n        true -> \"03\"\n        else -> \"18-24\"\n    }\n    val t1 = when (expanded) {\n        true -> 0\n        else -> 0\n    }\n    val t2 = when (expanded) {\n        true -> 1\n        else -> 6\n    }\n    val t3 = when (expanded) {\n        true -> 2\n        else -> 12\n    }\n    val t4 = when (expanded) {\n        true -> 3\n        else -> 18\n    }\n    val indexArray = arrayOf(t1, t2, t3, t4)\n    val column1Weight = .2f\n    val column2Weight = .3f\n    val column3Weight = .25f\n    val column4Weight = .25f\n\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n    Card(\n        shape = RoundedCornerShape(10.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 20.dp,\n            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n        ) {\n            if (isLoading) {\n                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                    CircularProgressIndicator(modifier = Modifier)\n                }\n            } else {\n                Column() {\n                    Row(\n                        modifier = Modifier.fillMaxWidth(),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        Box(contentAlignment = Alignment.CenterStart) {\n                            Text(\n                                text = tid,\n                                modifier = Modifier\n                                    .padding(start = 10.dp)\n                                    .padding(top = 10.dp),\n                                style = MaterialTheme.typography.titleLarge,\n                                fontWeight = FontWeight.Black,\n                                textAlign = TextAlign.Start\n                            )\n                        }\n                        Box(contentAlignment = Alignment.CenterEnd) {\n                            Text(\n                                text = \"Vind\",\n                                modifier = Modifier\n                                    .padding(end = 10.dp)\n                                    .padding(top = 10.dp),\n                                style = MaterialTheme.typography.titleLarge,\n                                fontWeight = FontWeight.Black\n                            )\n                        }\n                    }\n                    Row(\n                        Modifier\n                            .fillMaxWidth()\n                            .padding(8.dp),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        TableCell(\n                            text = \"Tid\",\n                            weight = column1Weight,\n                            alignment = TextAlign.Left,\n                            title = true\n                        )\n                        TableCell(text = \"Vind\", weight = column2Weight, title = true)\n                        TableCell(text = \"Vindkast\", weight = column3Weight, title = true)\n                        TableCell(\n                            text = \"Retning\",\n                            weight = column4Weight,\n                            alignment = TextAlign.Right,\n                            title = true\n                        )\n                    }\n                    Divider(\n                        color = Color.LightGray, modifier = Modifier\n                            .fillMaxWidth()\n                            .height(1.dp)\n                    )\n                    var teller = 0\n                    for (i in 4-res..<4) {\n                        Row(\n                            Modifier.fillMaxWidth(),\n                            horizontalArrangement = Arrangement.SpaceBetween\n                        ){\n                            TableCell(\n                                text = when (i) {\n                                    0 -> when (expanded) {\n                                        true -> \"%02d\".format(teller+24-a)\n                                        else -> first\n                                    }\n                                    1 -> when (expanded) {\n                                        true -> \"%02d\".format(teller+24-a)\n                                        else -> second\n                                    }\n                                    2 -> when (expanded) {\n                                        true -> \"%02d\".format(teller+24-a)\n                                        else -> third\n                                    }\n                                    else -> when (expanded) {\n                                        true -> \"%02d\".format(teller+24-a)\n                                        else -> fourth\n                                    }\n                                },\n                                weight = column1Weight,\n                                alignment = TextAlign.Left\n                            )\n                            locFor.weatherList[indexArray[teller]]?.data?.instant?.details?.get(\"wind_speed\").toString().let { TableCell(text = it, weight = column2Weight) }\n                            locFor.weatherList[indexArray[teller]]?.data?.instant?.details?.get(\"wind_speed_of_gust\").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                            locFor.weatherList[indexArray[teller]]?.data?.instant?.details?.get(\"wind_from_direction\").toString().let {\n                                TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)\n                            }\n                        }\n                        Divider(\n                            color = Color.LightGray,\n                            modifier = Modifier\n                                .height(1.dp)\n                                .fillMaxHeight()\n                                .fillMaxWidth()\n                        )\n                        teller ++\n                    }\n                    if (expanded) {\n                        repeat(a - res) { index ->\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = \"%02d\".format(index+24+res-a),\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                locFor.weatherList[index+res]?.data?.instant?.details?.get(\"wind_speed\").toString().let { TableCell(text = it, weight = column2Weight) }\n                                locFor.weatherList[index+res]?.data?.instant?.details?.get(\"wind_speed_of_gust\").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                                locFor.weatherList[index+res]?.data?.instant?.details?.get(\"wind_from_direction\").toString().let {\n                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                        }\n                    }\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically,\n                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Text(text = \"Time for time\")\n                        Image(\n                            painter = toggleIconPainter,\n                            contentDescription = \"Expand\",\n                            modifier = Modifier.size(30.dp),\n                            Alignment.CenterStart\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\nfun getCurrentDateInNorwegianFormat(): String {\n    return try {\n        val currentDate = LocalDate.now()\n        val formatter = DateTimeFormatter.ofPattern(\"dd. MMMM\", Locale(\"no\"))\n        currentDate.format(formatter)\n    } catch (e: Exception) {\n        // Log the exception if needed: e.printStackTrace()\n        \"\" // Return an empty string in case of failure\n    }\n}\n\n@Composable\n@Preview\nfun prevsa(){\n    val navController = rememberNavController()\n    DWSscreen(navController = navController, coordinate = \"59.07,10.77\")\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt	
@@ -7,20 +7,16 @@
 import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.Spacer
 import androidx.compose.foundation.layout.fillMaxHeight
 import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
-import androidx.compose.foundation.layout.width
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.Add
 import androidx.compose.material.icons.filled.ArrowBack
-import androidx.compose.material.icons.filled.Search
 import androidx.compose.material3.Card
 import androidx.compose.material3.CardDefaults
 import androidx.compose.material3.CircularProgressIndicator
@@ -43,7 +39,6 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.graphics.ColorFilter
-import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.TextStyle
 import androidx.compose.ui.text.font.FontWeight
@@ -51,19 +46,16 @@
 import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
-import androidx.lifecycle.ViewModel
 import androidx.navigation.NavController
 import androidx.navigation.compose.rememberNavController
 import no.uio.ifi.in2000.prosjekt.R
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.ExpandableWeatherCardSea
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederLFViewModel
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederOFViewModel
-import no.uio.ifi.in2000.prosjekt.ui.infoSteder.LfRow
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.StatusCell
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.TableCell
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.TableCellImage
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.WeatherIconRow
-import no.uio.ifi.in2000.prosjekt.ui.infoSteder.metAlerts
 import java.time.LocalDate
 import java.time.LocalTime
 import java.time.ZoneId
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoCards/InfoCards.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.InfoCards\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\n\n\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\n\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\n\n\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavController\nimport coil.compose.AsyncImage\nimport coil.request.ImageRequest\nimport no.uio.ifi.in2000.prosjekt.Model.InfoObjects\nimport no.uio.ifi.in2000.prosjekt.ui.CommonUIUtils.InfoUIState\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InfoCards(\n    id : String?,\n    navController: NavController,\n    info : InfoObjects = InfoUIState().listOfInfo[id!!.toInt()],\n) {\n    Scaffold(\n        modifier = Modifier.background(Color(0xFF171729)),\n\n        topBar = {\n            TopAppBar(\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF171729)\n                ),\n                navigationIcon = {\n                    IconButton(\n                        onClick = { navController.popBackStack() }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color(0xFFBEDDF5)\n                        )\n                    }\n                },\n                title = { Text(text = \"\") })\n        },\n        ) { innerPadding ->\n        Box(\n            modifier = Modifier\n                .fillMaxSize() // This Box fills the entire content area of Scaffold\n                .background(Color(0xFF171729)), // Background color applied here as well\n            contentAlignment = Alignment.TopStart\n        ) {\n\n        LazyColumn(\n            modifier = Modifier\n                .fillMaxWidth()\n                .background(\n                    Color(0xFF171729)\n                )\n                .padding(top = 70.dp, bottom = 10.dp),\n            verticalArrangement = Arrangement.Center,\n            ) {\n            item {\n                Column(modifier = Modifier.fillMaxSize().background(Color(0xFF171729))) {\n                    AsyncImage(\n                        model = ImageRequest.Builder(LocalContext.current)\n                            .data(info.img)\n                            .crossfade(true)\n                            .build(),\n                        contentDescription = \"Image\",\n                        contentScale = ContentScale.Crop,\n                        modifier = Modifier\n                            .fillMaxWidth()\n                            .padding(15.dp)\n                    )\n                }\n                Box(contentAlignment = Alignment.Center, modifier = Modifier.fillMaxSize()) {\n                    Text(\n                        text = info.name,\n                        color = Color.White,\n                        style = TextStyle(\n                            fontSize = 15.sp,\n                            fontWeight = FontWeight.Bold,\n                            fontFamily = FontFamily.SansSerif\n                        )\n                    )\n                }\n                Spacer(modifier = Modifier.height(5.dp))\n                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                    info.description.let {\n                        Text(\n                            color = Color.White,\n                            text = it,\n                            style = TextStyle(\n                                fontSize = 11.sp,\n                                fontFamily = FontFamily.SansSerif,\n                                fontWeight = FontWeight.Light,\n                                lineHeight = 28.sp\n                            ),\n                            modifier = Modifier.fillMaxWidth().padding(start = 35.dp, end = 35.dp)\n                        )\n                    }\n                }\n            }\n        }\n    }\n}}\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoCards/InfoCards.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoCards/InfoCards.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoCards/InfoCards.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoCards/InfoCards.kt	
@@ -1,19 +1,16 @@
 package no.uio.ifi.in2000.prosjekt.ui.InfoCards
 
 import androidx.compose.foundation.background
-import androidx.compose.foundation.border
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
 
 
-import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.Spacer
 import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.layout.size
 import androidx.compose.foundation.lazy.LazyColumn
 
 import androidx.compose.material.icons.Icons
@@ -36,14 +33,13 @@
 import androidx.compose.ui.text.TextStyle
 import androidx.compose.ui.text.font.FontFamily
 import androidx.compose.ui.text.font.FontWeight
-import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import androidx.navigation.NavController
 import coil.compose.AsyncImage
 import coil.request.ImageRequest
 import no.uio.ifi.in2000.prosjekt.Model.InfoObjects
-import no.uio.ifi.in2000.prosjekt.ui.CommonUIUtils.InfoUIState
+import no.uio.ifi.in2000.prosjekt.ui.InfoScreen.InfoUIState
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.InfoScreen\n\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.foundation.lazy.grid.items\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults.topAppBarColors\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Color.Companion.White\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.graphics.Shadow\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavController\nimport coil.compose.AsyncImage\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport coil.request.ImageRequest\nimport no.uio.ifi.in2000.prosjekt.Model.InfoObjects\nimport no.uio.ifi.in2000.prosjekt.R\nimport no.uio.ifi.in2000.prosjekt.ui.CommonUIUtils.InfoUIState\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InfoScreen(\n    navController: NavController,\n    infoList : InfoUIState = InfoUIState()\n) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = topAppBarColors(\n                    containerColor = Color(0xFF171729)\n                ),\n                navigationIcon = {\n                    IconButton(\n                        onClick = { navController.popBackStack() }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color(0xFFBEDDF5)\n                        )\n                    }\n                },\n                title = {\n                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n                        Text(text = \"Lær om havet\", color = Color(0xFFBEDDF5))\n                        }},\n                actions = {\n                    IconButton(\n                        onClick = { navController.popBackStack() }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color.Transparent\n                        )\n                    }\n                }\n            )\n        },\n\n        ) { innerPadding ->\n\n        Column(\n            modifier = Modifier\n                .background(\n                    Color(0xFF171729)\n\n                )\n                .padding(top = 65.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        )\n        {\n            val img = painterResource(id = R.drawable.learn)\n            Image(\n                painter = img,\n                contentDescription = \"learningHat\",\n                colorFilter = ColorFilter.tint((Color(0xFFBEDDF5)\n                        )\n                ),\n                modifier = Modifier.size(100.dp)\n            )\n            LazyVerticalGrid(\n                modifier = Modifier.fillMaxSize(),\n                columns = GridCells.Fixed(1), // Use 2 columns instead of 4\n                horizontalArrangement = Arrangement.spacedBy(16.dp), // Space between columns\n                verticalArrangement = Arrangement.spacedBy(16.dp), // Space between rows\n                contentPadding = PaddingValues(16.dp), // Padding around the grid\n                content = {\n                    items(infoList.listOfInfo) { infodata ->\n                        InfoCard(infodata, infodata.id, navController)\n                    }\n                }\n            )\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InfoCard(info: InfoObjects, id: String, navController: NavController) {\n    Card(\n        modifier = Modifier\n            //.fillMaxWidth()\n            .padding(10.dp), // Add padding to create space around the card\n        onClick = {\n            navController.navigate(\"InfoCard/$id\")\n        }\n    ) {\n\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .size(75.dp)\n                .background(Color(0xFFBEDDF5))\n\n\n        )\n        {\n            Text(\n                text = info.name,\n                fontSize = 12.sp,\n                color = Color.Black,\n\n                    fontFamily = FontFamily.SansSerif,\n                    fontWeight = FontWeight.Bold\n                ,\n                modifier = Modifier\n                    .padding(8.dp)\n                    .align(Alignment.CenterHorizontally) // Padding inside the column for the text\n            )\n            val painter = painterResource(id = info.icon)\n            Image(modifier = Modifier\n                .align(Alignment.CenterHorizontally)\n                .size(50.dp), painter = painter, contentDescription = \"Temperature\")\n\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt	
@@ -1,24 +1,18 @@
 package no.uio.ifi.in2000.prosjekt.ui.InfoScreen
 
-import android.os.Build
-import androidx.annotation.RequiresApi
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.PaddingValues
-import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
-import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.lazy.grid.GridCells
 import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
 import androidx.compose.foundation.lazy.grid.items
-import androidx.compose.foundation.lazy.items
-import androidx.compose.foundation.shape.CircleShape
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.ArrowBack
 import androidx.compose.material3.Card
@@ -32,30 +26,21 @@
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.geometry.Offset
-import androidx.compose.ui.graphics.Brush
 import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.graphics.Color.Companion.White
 import androidx.compose.ui.graphics.ColorFilter
-import androidx.compose.ui.graphics.Shadow
-import androidx.compose.ui.layout.ContentScale
-import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import androidx.navigation.NavController
-import coil.compose.AsyncImage
-import androidx.compose.ui.text.TextStyle
 import androidx.compose.ui.text.font.FontFamily
-import androidx.compose.ui.text.font.FontStyle
 import androidx.compose.ui.text.font.FontWeight
-import coil.request.ImageRequest
 import no.uio.ifi.in2000.prosjekt.Model.InfoObjects
 import no.uio.ifi.in2000.prosjekt.R
-import no.uio.ifi.in2000.prosjekt.ui.CommonUIUtils.InfoUIState
 
-
+/*
+This method calls the InfoCard composable for each item in the list.
+The information is directly from Havvarsel
+ */
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun InfoScreen(
@@ -119,6 +104,9 @@
                 ),
                 modifier = Modifier.size(100.dp)
             )
+            /*
+            Could have used LazyColumn instead of LazyVerticalGrid
+             */
             LazyVerticalGrid(
                 modifier = Modifier.fillMaxSize(),
                 columns = GridCells.Fixed(1), // Use 2 columns instead of 4
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport co.yml.charts.axis.AxisData\nimport co.yml.charts.common.model.Point\nimport co.yml.charts.ui.linechart.model.GridLines\nimport co.yml.charts.ui.linechart.model.IntersectionPoint\nimport co.yml.charts.ui.linechart.model.Line\nimport co.yml.charts.ui.linechart.model.LineChartData\nimport co.yml.charts.ui.linechart.model.LinePlotData\nimport co.yml.charts.ui.linechart.model.LineStyle\nimport co.yml.charts.ui.linechart.model.LineType\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPoint\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPopUp\nimport co.yml.charts.ui.linechart.model.ShadowUnderLine\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.WeatherForecast.LocationForecastRepository\nimport no.uio.ifi.in2000.prosjekt.Model.OceanTimeSeries\nimport no.uio.ifi.in2000.prosjekt.Model.TimeSeries\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\n\ndata class locationForecastUiState(\n    val weatherData: WeatherData? = WeatherData(),\n    var weatherList: List<TimeSeries?> = emptyList()\n)\nclass InfoStederLFViewModel(coords: String): ViewModel() {\n    private val _isLoading = MutableStateFlow(false)\n    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()\n    private val _visible = MutableStateFlow(false)\n    val visible: StateFlow<Boolean> = _visible.asStateFlow()\n\n    val liste = coords.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    private val locationForecastRepo = LocationForecastRepository()\n\n    private val _lFUiState = MutableStateFlow(locationForecastUiState())\n    val lFUiState: StateFlow<locationForecastUiState> = _lFUiState.asStateFlow()\n\n    var startHour = 0\n\n    init {\n        getNewData(lat, lon, 0)\n    }\n\n    private fun getNewData(lat: String, lon: String, offset: Int) {\n        toggleLoading()\n        viewModelScope.launch {\n            _lFUiState.update {\n                it.copy(\n                    weatherData = locationForecastRepo.getLocationForecast(lat, lon)\n                )\n            }\n            setStartHour()\n            makeWeatherList(offset)\n            toggleLoading()\n        }\n    }\n\n    fun toggleLoading() {\n        _isLoading.value = !_isLoading.value\n    }\n\n    fun toggleVisible() {\n        _visible.value = !_visible.value\n    }\n\n    fun setStartHour() {\n        if(_lFUiState.value.weatherData?.properties?.timeseries?.isEmpty() == true){\n            return\n        }\n        startHour =\n            (_lFUiState.value.weatherData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)\n                ?.toIntOrNull() ?: 0\n    }\n\n    fun makeWeatherList(offset: Int){\n        toggleLoading()\n        if(_lFUiState.value.weatherData?.properties?.timeseries?.isEmpty() == true){\n            println(\"Makeweatherlist er tom\")\n            toggleLoading()\n            return\n        }\n        val list = when (offset) {\n            0 -> when(startHour) {\n                22 -> (0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+2) }\n                23 -> (0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+1) }\n                else -> (0..23-startHour).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index) }\n            }\n            else -> {(0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+offset-startHour) }\n            }\n        }\n        println(startHour.toString() + \" \" + offset.toString())\n        _lFUiState.value.weatherList = list\n        toggleLoading()\n    }\n\n    fun linechartMaker(offset: Int, variable: String): List<Point> {\n        if(_lFUiState.value.weatherData?.properties?.timeseries?.isEmpty() == true){\n            val pointData = (0..23).map { index -> Point(index.toFloat(), 0.0f) }\n            return pointData\n        }\n        val pointData = when (offset) {\n            0 -> when(startHour) {\n                22 -> (0..23).map { index ->\n                    val temperature = (_lFUiState.value.weatherData?.properties?.timeseries\n                        ?.get(index + 2)?.data?.instant?.details\n                        ?.get(variable)?:0).toFloat()\n                    Point(index.toFloat(), temperature ?: 0.0f)}\n                23 -> (0..23).map { index ->\n                    val temperature = (_lFUiState.value.weatherData?.properties?.timeseries\n                        ?.get(index + 1)?.data?.instant?.details\n                        ?.get(variable)?:0).toFloat()\n                    Point(index.toFloat(), temperature ?: 0.0f)}\n                else -> (startHour..23).map { index ->\n                    val temperature = (_lFUiState.value.weatherData?.properties?.timeseries\n                        ?.get(index - startHour)?.data?.instant?.details\n                        ?.get(variable)?:0).toFloat()\n\n                    Point(index.toFloat(), temperature ?: 0.0f)\n                }\n            }\n            else -> (0..23).map { index ->\n                val temperature = (_lFUiState.value.weatherData?.properties?.timeseries\n                    ?.get(index + offset - startHour)?.data?.instant?.details\n                    ?.get(variable)?:0).toFloat()\n\n                Point(index.toFloat(), temperature ?: 0.0f) // Change is here\n            }\n        }\n        return pointData\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt	
@@ -1,30 +1,14 @@
 package no.uio.ifi.in2000.prosjekt.ui.infoSteder
 
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.ui.graphics.Brush
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.unit.dp
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
-import co.yml.charts.axis.AxisData
 import co.yml.charts.common.model.Point
-import co.yml.charts.ui.linechart.model.GridLines
-import co.yml.charts.ui.linechart.model.IntersectionPoint
-import co.yml.charts.ui.linechart.model.Line
-import co.yml.charts.ui.linechart.model.LineChartData
-import co.yml.charts.ui.linechart.model.LinePlotData
-import co.yml.charts.ui.linechart.model.LineStyle
-import co.yml.charts.ui.linechart.model.LineType
-import co.yml.charts.ui.linechart.model.SelectionHighlightPoint
-import co.yml.charts.ui.linechart.model.SelectionHighlightPopUp
-import co.yml.charts.ui.linechart.model.ShadowUnderLine
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.asStateFlow
 import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
 import no.uio.ifi.in2000.prosjekt.Data.WeatherForecast.LocationForecastRepository
-import no.uio.ifi.in2000.prosjekt.Model.OceanTimeSeries
 import no.uio.ifi.in2000.prosjekt.Model.TimeSeries
 import no.uio.ifi.in2000.prosjekt.Model.WeatherData
 
@@ -70,10 +54,6 @@
         _isLoading.value = !_isLoading.value
     }
 
-    fun toggleVisible() {
-        _visible.value = !_visible.value
-    }
-
     fun setStartHour() {
         if(_lFUiState.value.weatherData?.properties?.timeseries?.isEmpty() == true){
             return
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport android.graphics.Paint.Align\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.BorderStroke\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.IntrinsicSize\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.foundation.selection.toggleable\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Favorite\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.BottomAppBar\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.Divider\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Switch\nimport androidx.compose.material3.SwitchDefaults\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.rotate\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Popup\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.rememberNavController\nimport co.yml.charts.axis.AxisData\nimport co.yml.charts.common.model.Point\nimport co.yml.charts.ui.linechart.LineChart\nimport co.yml.charts.ui.linechart.model.GridLines\nimport co.yml.charts.ui.linechart.model.IntersectionPoint\nimport co.yml.charts.ui.linechart.model.Line\nimport co.yml.charts.ui.linechart.model.LineChartData\nimport co.yml.charts.ui.linechart.model.LinePlotData\nimport co.yml.charts.ui.linechart.model.LineStyle\nimport co.yml.charts.ui.linechart.model.LineType\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPoint\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPopUp\nimport co.yml.charts.ui.linechart.model.ShadowUnderLine\nimport coil.compose.AsyncImage\nimport coil.request.ImageRequest\nimport no.uio.ifi.in2000.prosjekt.Data.Ukedag\nimport no.uio.ifi.in2000.prosjekt.R\nimport no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea.uvToText\nimport no.uio.ifi.in2000.prosjekt.ui.Map.ExpandableCard\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MetAlersUiState\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MetAlertViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.Map.formatToNorwegianTime\nimport no.uio.ifi.in2000.prosjekt.ui.home.decideWeatherIcon\nimport no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme\nimport java.util.Calendar\nimport java.util.Locale\nimport kotlin.math.ceil\nimport kotlin.math.pow\nimport kotlin.math.round\nimport kotlin.math.roundToInt\n\ndata class LfRow(val tid: String, val temp: String?, val vind: String?, val rotation: String?)\n\n@RequiresApi(Build.VERSION_CODES.O)\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalComposeUiApi::class,\n    ExperimentalFoundationApi::class\n)\n@Composable\nfun InfoStederScreen(coordinate: String, sted: String, navController: NavController, infoStederScreenViewModel : InfoStederViewModel = InfoStederViewModel(coordinate),\n                     infoStederLFViewModel: InfoStederLFViewModel = InfoStederLFViewModel(coordinate), metAlertViewModel: MetAlertViewModel = viewModel(),\n                     infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate)\n) {\n    val liste = coordinate.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    val metAlert by metAlertViewModel.MAUiState.collectAsState()\n    val antallVarsler = metAlert.MetAlertsCoordinate?.features?.size\n    val iconTint = when {\n        antallVarsler == 0 || antallVarsler == null -> Color.Transparent\n        else -> Color.Yellow\n    }\n    metAlertViewModel.getNewDataCoords(lat,lon)\n    var selectedOption by remember { mutableStateOf(\"I dag\") }\n\n    var selectedOptionSwitch by remember { mutableStateOf(\"Tabell\") }\n    val offsett = when (selectedOption) {\n        \"I dag\" -> 0\n        \"I morgen\" -> 24\n        else -> 48\n    }\n    val calendar = Calendar.getInstance()\n    val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)\n    val toDagerFrem = Ukedag.entries[(dayOfWeek+1)%7]\n\n    Scaffold(\n        containerColor = Color(0xFF171729),\n        topBar = {\n            TopAppBar(\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF171729),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n                        Image(\n                            painter = painterResource(id = R.drawable.havblikktext),\n                            contentDescription = \"My Image\",\n                            alignment = Alignment.Center,\n                            colorFilter = ColorFilter.tint(Color(0xFFCFE3F3)),\n                            modifier = Modifier\n                                .size(120.dp)\n                        )\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color(0xFFCFE3F3)\n                        )\n                    }\n                },\n                actions = {\n                    IconButton(onClick = { metAlertViewModel.togglePopupVisibility() }) {\n                        Icon(\n                            painter = painterResource(id = R.drawable.warning), // Reference your drawable here\n                            contentDescription = \"Custom Icon\", // Provide an appropriate description\n                            tint = iconTint, // Set the tint color if needed,\n                            modifier = Modifier.size(30.dp)\n                        )\n                    }\n                }\n            )\n        },\n        bottomBar = {\n            BottomAppBar(\n                containerColor = Color(0xFF171729) // Matching the top bar color\n            ){\n                Row (\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .padding(horizontal = 2.dp)\n                        .clip(RoundedCornerShape(10.dp)),\n                    horizontalArrangement = Arrangement.SpaceEvenly\n                ) {\n                    MultiToggleButton(currentSelection = selectedOptionSwitch, toggleStates = listOf(\"Tabell\", \"Graf\")) {newSelecter ->\n                        selectedOptionSwitch = newSelecter\n                    }\n                    MultiToggleButton(currentSelection = selectedOption, toggleStates = listOf(\"I dag\", \"I morgen\",\n                        toDagerFrem.name\n                    )) { newselectedOption ->\n                        selectedOption = newselectedOption\n                    }\n                }\n            }\n        }\n    ) { innerPadding ->\n        Column() {\n            if(antallVarsler != null && antallVarsler > 0){\n                metAlerts(metAlertViewModel = metAlertViewModel, antallVarsler = antallVarsler)\n            }\n            LazyColumn(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(innerPadding),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                contentPadding = PaddingValues(8.dp)\n            ) {\n                stickyHeader{\n                    Box(modifier = Modifier.fillMaxWidth() .background(Color(0xFF171729)) .padding(bottom = 8.dp), contentAlignment = Alignment.Center) {\n                        Text(sted, color = Color(0xFFCFE3F3), fontSize = 22.sp, fontWeight = FontWeight.Medium)\n                        //Text(coordinate, color = Color.White)\n                    }\n                }\n                item {\n                    if(selectedOptionSwitch == \"Graf\"){\n                        landTempCard(\n                            infostederLocationForecastVM = infoStederLFViewModel,\n                            offsett = offsett\n                        )\n                    } else {\n                        WeatherIconRow(infostederLocationForecastVM = infoStederLFViewModel,\n                            nr = offsett,\n                            dag = selectedOption)\n                    }\n                }\n                item {\n                    if(selectedOptionSwitch == \"Graf\") {\n                        windSpeedCard(\n                            infostederLocationForecastVM = infoStederLFViewModel,\n                            offsett = offsett\n                        )\n                    } else {\n                        ExpandableWeatherCardLand(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, dag = selectedOption)\n                    }\n                }\n                item {\n                    if(selectedOptionSwitch == \"Graf\") {\n                        waterTempCard(\n                            infoStederOFViewModel = infoStederOFViewModel,\n                            offsett = offsett)\n                    } else {\n                        ExpandableWeatherCardSea(infoStederOFViewModel, nr = offsett, selectedOption)\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun MultiToggleButton(\n    currentSelection: String,\n    toggleStates: List<String>,\n    onToggleChange: (String) -> Unit\n) {\n    val selectedTint = Color(0xFFCFE3F3)\n    val unselectedTint = Color.White\n\n    Row(modifier = Modifier\n        .height(IntrinsicSize.Min)\n        .border(BorderStroke(1.dp, Color(0xFFCFE3F3)), shape = RoundedCornerShape(10.dp))\n        .clip(RoundedCornerShape(10.dp))\n    ) {\n        toggleStates.forEachIndexed { index, toggleState ->\n            val isSelected = currentSelection.lowercase() == toggleState.lowercase()\n            val backgroundTint = if (isSelected) selectedTint else unselectedTint\n            val textColor = if (isSelected) Color(0xFF171729) else Color(0xFF171729)\n            if (index != 0) {\n                Divider(\n                    color = Color.LightGray,\n                    modifier = Modifier\n                        .fillMaxHeight()\n                        .width(1.dp)\n                )\n            }\n            Row(\n                modifier = Modifier\n                    .background(backgroundTint)\n                    .padding(vertical = 4.dp, horizontal = 6.dp)\n                    .toggleable(\n                        value = isSelected,\n                        enabled = true,\n                        onValueChange = { selected ->\n                            if (selected) {\n                                onToggleChange(toggleState)\n                            }\n                        })\n            ) {\n                Text(toggleState.toCapital(), color = textColor, modifier = Modifier.padding(4.dp), fontSize = 16.sp\n                )\n            }\n        }\n    }\n}\n\nfun String.toCapital(): String {\n    return this.lowercase().replaceFirstChar { it.titlecase(Locale.getDefault())} }\n\n@Composable\nfun ExpandableWeatherCardLand(infoStederLFViewModel: InfoStederLFViewModel, nr : Int, dag : String) {\n    val lfUiState by infoStederLFViewModel.lFUiState.collectAsState()\n    infoStederLFViewModel.makeWeatherList(nr)\n    val isLoading by infoStederLFViewModel.isLoading.collectAsState()\n    var expanded by remember { mutableStateOf(false) }\n\n    if(lfUiState.weatherList.isEmpty()){\n        return\n    }\n    val a = lfUiState.weatherList.size\n    val res = ceil(a.toDouble() / 6).toInt()\n\n    val t1 = when (expanded) {\n        true -> 0\n        else -> 0\n    }\n    val t2 = when (expanded) {\n        true -> 1\n        else -> 6\n    }\n    val t3 = when (expanded) {\n        true -> 2\n        else -> 12\n    }\n    val t4 = when (expanded) {\n        true -> 3\n        else -> 18\n    }\n    val indexArray = arrayOf(t1, t2, t3, t4)\n    val column1Weight = .2f\n    val column2Weight = .3f\n    val column3Weight = .25f\n    val column4Weight = .25f\n\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n\n    Card(\n        shape = RoundedCornerShape(10.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 20.dp,\n            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = {\n                    expanded = !expanded\n                }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n        ){\n            if(isLoading){\n                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                    CircularProgressIndicator(modifier = Modifier)\n                }\n            } else {\n                Column() {\n                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween){\n                        Box(contentAlignment = Alignment.CenterStart){\n                            Text(\n                                text = dag,\n                                modifier = Modifier\n                                    .padding(start = 10.dp)\n                                    .padding(top = 10.dp),\n                                style = MaterialTheme.typography.titleLarge,\n                                fontWeight = FontWeight.Black,\n                                textAlign = TextAlign.Start)\n                        }\n                        Box(contentAlignment = Alignment.CenterEnd){\n                            Text(\n                                text = \"På land\",\n                                modifier = Modifier\n                                    .padding(end = 10.dp)\n                                    .padding(top = 10.dp),\n                                style = MaterialTheme.typography.titleLarge,\n                                fontWeight = FontWeight.Black\n                            )\n                        }\n                    }\n                    Row(\n                        Modifier\n                            .fillMaxWidth()\n                            .padding(8.dp),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        TableCell(\n                            text = \"Tid\",\n                            weight = column1Weight,\n                            alignment = TextAlign.Left,\n                            title = true\n                        )\n                        TableCell(text = \"Temp\", weight = column2Weight, title = true)\n                        TableCell(text = \"Vind\", weight = column3Weight, title = true)\n                        TableCell(\n                            text = \"Retning\",\n                            weight = column4Weight,\n                            alignment = TextAlign.Right,\n                            title = true\n                        )\n                    }\n                    Divider(color = Color.LightGray, modifier = Modifier\n                        .fillMaxWidth()\n                        .height(1.dp))\n                    //if(a < 24){\n                    var teller = 0\n                    for (i in 4-res..<4) {\n                        Row(\n                            Modifier\n                                .fillMaxWidth(),\n                            horizontalArrangement = Arrangement.SpaceBetween\n                        ){\n                            TableCell(\n                                text = when (i) {\n                                    0 -> when (expanded) {\n                                        true -> \"%02d\".format(teller+24-a)\n                                        else -> \"00-06\"\n                                    }\n                                    1 -> when (expanded) {\n                                        true -> \"%02d\".format(teller+24-a)\n                                        else -> \"06-12\"\n                                    }\n                                    2 -> when (expanded) {\n                                        true -> \"%02d\".format(teller+24-a)\n                                        else -> \"12-18\"\n                                    }\n                                    else -> when (expanded) {\n                                        true -> \"%02d\".format(teller+24-a)\n                                        else -> \"18-24\"\n                                    }\n                                },\n                                weight = column1Weight,\n                                alignment = TextAlign.Left\n                            )\n                            lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get(\"air_temperature\").toString().let { TableCell(text = it, weight = column2Weight) }\n                            lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get(\"wind_speed\").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                            lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get(\"wind_from_direction\").toString().let {\n                                TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)\n                            }\n                        }\n                        Divider(\n                            color = Color.LightGray,\n                            modifier = Modifier\n                                .height(1.dp)\n                                .fillMaxHeight()\n                                .fillMaxWidth()\n                        )\n                        teller ++\n                    }\n                    if (expanded) {\n                        repeat(a - res) { index ->\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = \"%02d\".format(index+24+res-a),\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                lfUiState.weatherList[index+res]?.data?.instant?.details?.get(\"air_temperature\").toString().let { TableCell(text = it, weight = column2Weight) }\n                                lfUiState.weatherList[index+res]?.data?.instant?.details?.get(\"wind_speed\").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                                lfUiState.weatherList[index+res]?.data?.instant?.details?.get(\"wind_from_direction\").toString().let {\n                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                        }\n                    }\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically,\n                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Text(text = \"Time for time\")\n                        Image(\n                            painter = toggleIconPainter,\n                            contentDescription = \"Expand\",\n                            modifier = Modifier.size(30.dp),\n                            Alignment.CenterStart\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ExpandableWeatherCardSea(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {\n    val ofUiState by infoStederOFViewModel.oFUiState.collectAsState()\n    infoStederOFViewModel.makeWeatherList(nr)\n    val isLoading by infoStederOFViewModel.isLoading.collectAsState()\n    var expanded by remember { mutableStateOf (false) }\n\n    if(ofUiState.oceanWeatherList.isEmpty()){\n        return\n    }\n    val a = ofUiState.oceanWeatherList.size\n    val res = ceil(a.toDouble()/6).toInt()\n\n\n    val first = when (expanded) {\n        true -> \"00\"\n        else -> \"00-06\"\n    }\n    val second = when (expanded) {\n        true -> \"01\"\n        else -> \"06-12\"\n    }\n    val third = when (expanded) {\n        true -> \"02\"\n        else -> \"12-18\"\n    }\n    val fourth = when (expanded) {\n        true -> \"03\"\n        else -> \"18-24\"\n    }\n    val t1 = when (expanded) {\n        true -> 0\n        else -> 0\n    }\n    val t2 = when (expanded) {\n        true -> 1\n        else -> 6\n    }\n    val t3 = when (expanded) {\n        true -> 2\n        else -> 12\n    }\n    val t4 = when (expanded) {\n        true -> 3\n        else -> 18\n    }\n    val indexArray = arrayOf(t1, t2, t3, t4)\n    val column1Weight = .2f\n    val column2Weight = .3f\n    val column3Weight = .25f\n    val column4Weight = .25f\n\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n    Card(\n        shape = RoundedCornerShape(10.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 20.dp,\n            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            )\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n        ){\n            if(isLoading){\n                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                    CircularProgressIndicator(modifier = Modifier)\n                }\n            } else {\n                Column() {\n                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween){\n                        Box(contentAlignment = Alignment.CenterStart){\n                            Text(\n                                text = dag,\n                                modifier = Modifier\n                                    .padding(start = 10.dp)\n                                    .padding(top = 10.dp),\n                                style = MaterialTheme.typography.titleLarge,\n                                fontWeight = FontWeight.Black,\n                                textAlign = TextAlign.Start)\n                        }\n                        Box(contentAlignment = Alignment.CenterEnd){\n                            Text(\n                                text = \"På havet\",\n                                modifier = Modifier\n                                    .padding(end = 10.dp)\n                                    .padding(top = 10.dp),\n                                style = MaterialTheme.typography.titleLarge,\n                                fontWeight = FontWeight.Black\n                            )\n                        }\n                    }\n                    Row(\n                        Modifier\n                            .fillMaxWidth()\n                            .padding(8.dp),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        TableCell(\n                            text = \"Tid\",\n                            weight = column1Weight,\n                            alignment = TextAlign.Left,\n                            title = true\n                        )\n                        TableCell(text = \"Temp\", weight = column2Weight, title = true)\n                        TableCell(text = \"Strøm\", weight = column3Weight, title = true)\n                        TableCell(\n                            text = \"Retning\",\n                            weight = column4Weight,\n                            alignment = TextAlign.Right,\n                            title = true\n                        )\n                    }\n                    Divider(color = Color.LightGray, modifier = Modifier\n                        .fillMaxWidth()\n                        .height(1.dp))\n                    if(a < 24){\n                        var teller = 0\n                        for (i in 4-res..<4) {\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = when (i) {\n                                        0 -> when (expanded) {\n                                            true -> \"%02d\".format(teller+24-a)\n                                            else -> first\n                                        }\n                                        1 -> when (expanded) {\n                                            true -> \"%02d\".format(teller+24-a)\n                                            else -> second\n                                        }\n                                        2 -> when (expanded) {\n                                            true -> \"%02d\".format(teller+24-a)\n                                            else -> third\n                                        }\n                                        else -> when (expanded) {\n                                            true -> \"%02d\".format(teller+24-a)\n                                            else -> fourth\n                                        }\n                                    },\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get(\"sea_water_temperature\").toString().let { TableCell(text = it, weight = column2Weight) }\n                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get(\"sea_water_speed\").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }\n                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get(\"sea_water_to_direction\").toString().let {\n                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                            teller ++\n                        }\n                        if (expanded) {\n                            repeat(a - res) { index ->\n                                Row(\n                                    Modifier.fillMaxWidth(),\n                                    horizontalArrangement = Arrangement.SpaceBetween\n                                ){\n                                    TableCell(\n                                        text = \"%02d\".format(index+24+res-a),\n                                        weight = column1Weight,\n                                        alignment = TextAlign.Left\n                                    )\n                                    ofUiState.oceanWeatherList[index+res]?.data?.instant?.details?.get(\"sea_water_temperature\").toString().let { TableCell(text = it, weight = column2Weight) }\n                                    ofUiState.oceanWeatherList[index+res]?.data?.instant?.details?.get(\"sea_water_speed\").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }\n                                    ofUiState.oceanWeatherList[index+res]?.data?.instant?.details?.get(\"sea_water_to_direction\").toString().let {\n                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)\n                                    }\n                                }\n                                Divider(\n                                    color = Color.LightGray,\n                                    modifier = Modifier\n                                        .height(1.dp)\n                                        .fillMaxHeight()\n                                        .fillMaxWidth()\n                                )\n                            }\n                        }\n                    } else {\n                        for (i in 0..3) {\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = when (i) {\n                                        0 -> first\n                                        1 -> second\n                                        2 -> third\n                                        else -> fourth\n                                    },\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                ofUiState.oceanWeatherList[indexArray[i]]?.data?.instant?.details?.get(\"sea_water_temperature\").toString().let { TableCell(text = it, weight = column2Weight) }\n                                ofUiState.oceanWeatherList[indexArray[i]]?.data?.instant?.details?.get(\"sea_water_speed\").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }\n                                ofUiState.oceanWeatherList[indexArray[i]]?.data?.instant?.details?.get(\"sea_water_to_direction\").toString().let {\n                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                        }\n                        if (expanded) {\n                            repeat(20) { index ->\n                                Row(\n                                    Modifier.fillMaxWidth(),\n                                    horizontalArrangement = Arrangement.SpaceBetween\n                                ){\n                                    TableCell(\n                                        text = \"%02d\".format(index+4),\n                                        weight = column1Weight,\n                                        alignment = TextAlign.Left\n                                    )\n                                    ofUiState.oceanWeatherList[index+4]?.data?.instant?.details?.get(\"sea_water_temperature\").toString().let { TableCell(text = it, weight = column2Weight) }\n                                    ofUiState.oceanWeatherList[index+4]?.data?.instant?.details?.get(\"sea_water_speed\").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }\n                                    ofUiState.oceanWeatherList[index+4]?.data?.instant?.details?.get(\"sea_water_to_direction\").toString().let {\n                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)\n                                    }\n                                }\n                                Divider(\n                                    color = Color.LightGray,\n                                    modifier = Modifier\n                                        .height(1.dp)\n                                        .fillMaxHeight()\n                                        .fillMaxWidth()\n                                )\n                            }\n                        }\n                    }\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically,\n                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Text(text = \"Time for time\")\n                        Image(\n                            painter = toggleIconPainter,\n                            contentDescription = \"Expand\",\n                            modifier = Modifier.size(30.dp),\n                            Alignment.CenterStart\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun WeatherIconRow(infostederLocationForecastVM: InfoStederLFViewModel, nr : Int, dag : String){\n    val LFUiState by infostederLocationForecastVM.lFUiState.collectAsState()\n    infostederLocationForecastVM.makeWeatherList(nr)\n    val isLoading by infostederLocationForecastVM.isLoading.collectAsState()\n\n    if(LFUiState.weatherList.isEmpty()){\n        return\n    }\n    val a = LFUiState.weatherList.size\n\n    Card(modifier = Modifier.padding(10.dp)){\n        if(isLoading){\n            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                CircularProgressIndicator(modifier = Modifier)\n            }\n        } else {\n            LazyRow() {\n                items(LFUiState.weatherList.size) { weatherItem ->\n                    WeatherIconCard(\n                        icon = LFUiState.weatherList[weatherItem]?.data?.next_1_hours?.summary?.get(\"symbol_code\") ?: \"cloudy\",\n                        size = 60, // adjust size according to your requirement\n                        padding = 8, // adjust padding according to your requirement\n                        temp = LFUiState.weatherList[weatherItem]?.data?.instant?.details?.get(\"air_temperature\") ?: 0.0,\n                        time = \"%02d\".format(weatherItem+24-a)\n                    )\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun WeatherIconCard(icon : String,\n                    size: Int, padding: Int,\n                    temp: Double, time: String){\n    Column(\n        modifier = Modifier.padding(8.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        decideWeatherIcon(icon, size = size , padding = padding)\n        Text(\n            text = \"$temp°C\",\n            style = MaterialTheme.typography.titleMedium,\n            modifier = Modifier.padding(top = 8.dp)\n        )\n        Text(\n            text = \"$time:00\",\n            style = MaterialTheme.typography.titleSmall,\n            modifier = Modifier.padding(top = 4.dp)\n        )\n    }\n}\n\n@Composable\nfun RowScope.TableCell(\n    text: String,\n    weight: Float,\n    alignment: TextAlign = TextAlign.Center,\n    title: Boolean = false\n) {\n    Text(\n        text = text,\n        Modifier\n            .weight(weight)\n            .padding(10.dp),\n        fontWeight = if (title) FontWeight.Bold else FontWeight.Normal,\n        textAlign = alignment,\n    )\n}\n\n@Composable\nfun RowScope.TableCellImage(\n    text: String,\n    weight: Float,\n    imageResId: Int\n) {\n    val floatValue: Float? = text.toFloatOrNull()\n    val painter = painterResource(id = imageResId)\n    Image(painter = painter, contentDescription = \"Direction\", Modifier\n        .weight(weight)\n        .padding(10.dp)\n        .rotate(floatValue ?: 0f), alignment = Alignment.Center)\n}\n\n@Composable\nfun RowScope.StatusCell(\n    text: String,\n    weight: Float,\n    alignment: TextAlign = TextAlign.Center,\n    boolVind: Int?\n) {\n    val color1 = when (boolVind) {\n        1 -> Color(0xFFF8F7F9)\n        else -> Color(0xFF446097)\n    }\n    val textColor1 = when (boolVind) {\n        1 -> Color(0xFF141414)\n        else -> Color(0xFFE9E9E9)\n    }\n    Text(\n        text = text,\n        Modifier\n            .weight(weight)\n            .padding(12.dp)\n            .background(color1, shape = RoundedCornerShape(50.dp)),\n        textAlign = alignment,\n        color = textColor1\n    )\n}\n\n\nfun determineSteps(diff: Float): Int {\n    return when {\n        diff in 0.1..3.0 -> 10 // This will convert 0.1 to 1 step, 0.2 to 2 steps, etc.\n//        diff in 1.1..2.0 -> ((diff * 10)-10).toInt()\n//        diff in 2.1..3.0 -> ((diff * 10)-20).toInt()\n        else -> diff.toInt()  // For values 1 and above, use the integer part as the step count\n    }\n}\n\n@Composable\nfun metAlerts(metAlertViewModel: MetAlertViewModel, antallVarsler : Int){\n    val metAlertState by metAlertViewModel.MAUiState.collectAsState()\n    val isPopupVisible by metAlertViewModel.isPopupVisible.collectAsState()\n    if(isPopupVisible){\n        Popup(\n            alignment = Alignment.TopCenter,\n            onDismissRequest = { metAlertViewModel.togglePopupVisibility() }, // Close popup when dismissed\n        ) {\n            Column(modifier = Modifier.fillMaxWidth()) {\n                Text(text = \"Ingen farevarsler funnet for sjøen!\")\n            }\n            LazyColumn(\n                modifier = Modifier\n                    .background(Color.Black.copy(alpha = 0.7f))\n                    .padding(16.dp)\n                    .fillMaxHeight(1f)\n                    .clickable { metAlertViewModel.togglePopupVisibility() }\n            ) {\n                items(antallVarsler){ metalertNr ->\n                    MetAlertsCard(metAlertState, metalertNr)\n                }\n            }\n            IconButton(\n                onClick = { metAlertViewModel.togglePopupVisibility() },\n                modifier = Modifier\n                    .size(30.dp)  // Set the size of the IconButton to be small\n            ) {\n                Icon(\n                    imageVector = Icons.Default.Clear,\n                    contentDescription = \"Close\",\n                    tint = Color.White\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun MetAlertsCard(metAlertState: MetAlersUiState, nr : Int) {\n    var expanded by remember { mutableStateOf (false) }\n    val inputString = (metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.title).toString()\n    val parts = inputString.split(\",\")\n    val result = parts.take(3).joinToString(\",\").trim()\n\n    val warning = painterResource(id = R.drawable.warning)\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n    val imageUri = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.resources?.firstOrNull { it.mimeType?.startsWith(\"image/png\") == true }?.uri\n    val fareStart = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.timeinterval?.interval?.get(0)\n        ?.let { formatToNorwegianTime(it) }\n    val fareSlutt = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.timeinterval?.interval?.get(1)\n        ?.let { formatToNorwegianTime(it) }\n\n    val yellowGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFF9C4), // Light yellow\n            Color(0xFFFFEB3B), // Vivid yellow\n            Color(0xFFFFD726)  // Dark yellow\n        )\n    )\n    val redGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFCDD2), // Light red\n            Color(0xFFE57373), // Medium red\n            Color(0xFFD32F2F)  // Dark red\n        )\n    )\n    val orangeGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFE0B2), // Light orange\n            Color(0xFFFFB74D), // Medium orange\n            Color(0xFFFB8C00)  // Dark orange\n        )\n    )\n    val greenGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFA5D6A7), // Light green\n            Color(0xFF66BB6A), // Medium green\n            Color(0xFF2E7D32)  // Dark green\n        )\n    )\n    val matrixColor = when(\"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.riskMatrixColor}\") {\n        \"Red\" -> redGradient\n        \"Orange\" -> orangeGradient\n        \"Yellow\" -> yellowGradient\n        else -> greenGradient // Default color\n    }\n    val translatedColor = when (matrixColor) {\n        redGradient -> \"Rødt nivå\"\n        orangeGradient -> \"Oransje nivå\"\n        greenGradient -> \"Grønt nivå\"\n        else -> \"Gult nivå\" // If the color is not recognized, keep it as it is\n    }\n    Card(\n        shape = RoundedCornerShape(8.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n            pressedElevation = 8.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 8.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 8.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(matrixColor)){\n            Column() {\n                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()){\n                    Image(painter = warning, contentDescription = \"Warning\", modifier = Modifier.size(40.dp), Alignment.Center)\n                    Column(modifier = Modifier\n                        .weight(1f)\n                        .padding(horizontal = 16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally) {\n                        Text(\n                            text = result,\n                            style = MaterialTheme.typography.titleMedium,\n                            modifier = Modifier.padding(12.dp),\n                            textAlign = TextAlign.Center,\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\n                            text = translatedColor,\n                            style = MaterialTheme.typography.bodyMedium,\n                            modifier = Modifier.padding(8.dp),\n                            textAlign = TextAlign.Center\n                        )\n                    }\n                    Image(painter = toggleIconPainter, contentDescription = \"Expand\", modifier = Modifier.size(40.dp), Alignment.CenterStart)\n                }\n                if (expanded) {\n                    Text(\n                        text = \"Anbefalinger:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.instruction}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Beskrivelse:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.description}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Konsekvenser:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.consequences}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Område:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.area}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Tidsperiode:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"Fra $fareStart \\nTil $fareSlutt\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    if(imageUri != null){\n                        AsyncImage(\n                            model = ImageRequest.Builder(LocalContext.current)\n                                .data(imageUri)\n                                .crossfade(true)\n                                .build(),\n                            contentDescription = \"Loaded Image\",\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .clickable { },\n                            contentScale = ContentScale.Crop\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt	
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt	
@@ -1,6 +1,5 @@
 package no.uio.ifi.in2000.prosjekt.ui.infoSteder
 
-import android.graphics.Paint.Align
 import android.os.Build
 import androidx.annotation.RequiresApi
 import androidx.compose.foundation.BorderStroke
@@ -16,7 +15,6 @@
 import androidx.compose.foundation.layout.PaddingValues
 import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.RowScope
-import androidx.compose.foundation.layout.Spacer
 import androidx.compose.foundation.layout.fillMaxHeight
 import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
@@ -26,30 +24,21 @@
 import androidx.compose.foundation.layout.width
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.lazy.LazyRow
-import androidx.compose.foundation.lazy.itemsIndexed
 import androidx.compose.foundation.selection.toggleable
-import androidx.compose.foundation.shape.CircleShape
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.Add
 import androidx.compose.material.icons.filled.ArrowBack
 import androidx.compose.material.icons.filled.Clear
-import androidx.compose.material.icons.filled.Favorite
-import androidx.compose.material.icons.filled.Search
+import androidx.compose.material3.BottomAppBar
 import androidx.compose.material3.Card
 import androidx.compose.material3.CardDefaults
+import androidx.compose.material3.CircularProgressIndicator
+import androidx.compose.material3.Divider
 import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.Icon
 import androidx.compose.material3.IconButton
-import androidx.compose.material3.BottomAppBar
-import androidx.compose.material3.Button
-import androidx.compose.material3.ButtonDefaults
-import androidx.compose.material3.CircularProgressIndicator
-import androidx.compose.material3.Divider
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Scaffold
-import androidx.compose.material3.Switch
-import androidx.compose.material3.SwitchDefaults
 import androidx.compose.material3.Text
 import androidx.compose.material3.TopAppBar
 import androidx.compose.material3.TopAppBarDefaults
@@ -67,52 +56,27 @@
 import androidx.compose.ui.graphics.Brush
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.graphics.ColorFilter
-import androidx.compose.ui.graphics.RectangleShape
 import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.text.TextStyle
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.style.TextAlign
-import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import androidx.compose.ui.window.Popup
 import androidx.lifecycle.viewmodel.compose.viewModel
 import androidx.navigation.NavController
-import androidx.navigation.compose.rememberNavController
-import co.yml.charts.axis.AxisData
-import co.yml.charts.common.model.Point
-import co.yml.charts.ui.linechart.LineChart
-import co.yml.charts.ui.linechart.model.GridLines
-import co.yml.charts.ui.linechart.model.IntersectionPoint
-import co.yml.charts.ui.linechart.model.Line
-import co.yml.charts.ui.linechart.model.LineChartData
-import co.yml.charts.ui.linechart.model.LinePlotData
-import co.yml.charts.ui.linechart.model.LineStyle
-import co.yml.charts.ui.linechart.model.LineType
-import co.yml.charts.ui.linechart.model.SelectionHighlightPoint
-import co.yml.charts.ui.linechart.model.SelectionHighlightPopUp
-import co.yml.charts.ui.linechart.model.ShadowUnderLine
 import coil.compose.AsyncImage
 import coil.request.ImageRequest
 import no.uio.ifi.in2000.prosjekt.Data.Ukedag
 import no.uio.ifi.in2000.prosjekt.R
-import no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea.uvToText
-import no.uio.ifi.in2000.prosjekt.ui.Map.ExpandableCard
 import no.uio.ifi.in2000.prosjekt.ui.Map.MetAlersUiState
 import no.uio.ifi.in2000.prosjekt.ui.Map.MetAlertViewModel
 import no.uio.ifi.in2000.prosjekt.ui.Map.formatToNorwegianTime
 import no.uio.ifi.in2000.prosjekt.ui.home.decideWeatherIcon
-import no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme
 import java.util.Calendar
 import java.util.Locale
 import kotlin.math.ceil
-import kotlin.math.pow
-import kotlin.math.round
-import kotlin.math.roundToInt
-
-data class LfRow(val tid: String, val temp: String?, val vind: String?, val rotation: String?)
 
 @RequiresApi(Build.VERSION_CODES.O)
 @OptIn(ExperimentalMaterial3Api::class, ExperimentalComposeUiApi::class,
@@ -424,7 +388,7 @@
                         .fillMaxWidth()
                         .height(1.dp))
                     //if(a < 24){
-                    var teller = 0
+                    var count = 0
                     for (i in 4-res..<4) {
                         Row(
                             Modifier
@@ -434,28 +398,28 @@
                             TableCell(
                                 text = when (i) {
                                     0 -> when (expanded) {
-                                        true -> "%02d".format(teller+24-a)
+                                        true -> "%02d".format(count+24-a)
                                         else -> "00-06"
                                     }
                                     1 -> when (expanded) {
-                                        true -> "%02d".format(teller+24-a)
+                                        true -> "%02d".format(count+24-a)
                                         else -> "06-12"
                                     }
                                     2 -> when (expanded) {
-                                        true -> "%02d".format(teller+24-a)
+                                        true -> "%02d".format(count+24-a)
                                         else -> "12-18"
                                     }
                                     else -> when (expanded) {
-                                        true -> "%02d".format(teller+24-a)
+                                        true -> "%02d".format(count+24-a)
                                         else -> "18-24"
                                     }
                                 },
                                 weight = column1Weight,
                                 alignment = TextAlign.Left
                             )
-                            lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
-                            lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
-                            lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_from_direction").toString().let {
+                            lfUiState.weatherList[indexArray[count]]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
+                            lfUiState.weatherList[indexArray[count]]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                            lfUiState.weatherList[indexArray[count]]?.data?.instant?.details?.get("wind_from_direction").toString().let {
                                 TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
                             }
                         }
@@ -466,7 +430,7 @@
                                 .fillMaxHeight()
                                 .fillMaxWidth()
                         )
-                        teller ++
+                        count ++
                     }
                     if (expanded) {
                         repeat(a - res) { index ->
@@ -640,7 +604,7 @@
                         .fillMaxWidth()
                         .height(1.dp))
                     if(a < 24){
-                        var teller = 0
+                        var count = 0
                         for (i in 4-res..<4) {
                             Row(
                                 Modifier.fillMaxWidth(),
@@ -649,28 +613,28 @@
                                 TableCell(
                                     text = when (i) {
                                         0 -> when (expanded) {
-                                            true -> "%02d".format(teller+24-a)
+                                            true -> "%02d".format(count+24-a)
                                             else -> first
                                         }
                                         1 -> when (expanded) {
-                                            true -> "%02d".format(teller+24-a)
+                                            true -> "%02d".format(count+24-a)
                                             else -> second
                                         }
                                         2 -> when (expanded) {
-                                            true -> "%02d".format(teller+24-a)
+                                            true -> "%02d".format(count+24-a)
                                             else -> third
                                         }
                                         else -> when (expanded) {
-                                            true -> "%02d".format(teller+24-a)
+                                            true -> "%02d".format(count+24-a)
                                             else -> fourth
                                         }
                                     },
                                     weight = column1Weight,
                                     alignment = TextAlign.Left
                                 )
-                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get("sea_water_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
-                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get("sea_water_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }
-                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get("sea_water_to_direction").toString().let {
+                                ofUiState.oceanWeatherList[indexArray[count]]?.data?.instant?.details?.get("sea_water_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
+                                ofUiState.oceanWeatherList[indexArray[count]]?.data?.instant?.details?.get("sea_water_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }
+                                ofUiState.oceanWeatherList[indexArray[count]]?.data?.instant?.details?.get("sea_water_to_direction").toString().let {
                                     TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)
                                 }
                             }
@@ -681,7 +645,7 @@
                                     .fillMaxHeight()
                                     .fillMaxWidth()
                             )
-                            teller ++
+                            count ++
                         }
                         if (expanded) {
                             repeat(a - res) { index ->
