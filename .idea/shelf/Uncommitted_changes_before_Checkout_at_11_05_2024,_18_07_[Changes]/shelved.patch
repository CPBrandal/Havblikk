Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.os.Build\nimport android.util.Log\nimport androidx.activity.ComponentActivity\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Home\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.Star\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.BottomAppBar\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.OutlinedTextFieldDefaults\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.TextFieldColors\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.clearCompositionErrors\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.focus.focusRequester\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalSoftwareKeyboardController\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextDecoration\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.ui.window.PopupProperties\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport coil.compose.AsyncImage\nimport coil.request.ImageRequest\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationCallback\nimport com.google.android.gms.location.LocationResult\nimport com.google.android.gms.location.LocationServices\nimport com.mapbox.geojson.Point\nimport com.mapbox.maps.MapboxExperimental\nimport com.mapbox.maps.ViewAnnotationAnchor\nimport com.mapbox.maps.dsl.cameraOptions\nimport com.mapbox.maps.extension.compose.MapboxMap\nimport com.mapbox.maps.extension.compose.animation.viewport.MapViewportState\nimport com.mapbox.maps.extension.compose.animation.viewport.rememberMapViewportState\nimport com.mapbox.maps.extension.compose.annotation.ViewAnnotation\nimport com.mapbox.maps.extension.compose.annotation.generated.CircleAnnotation\nimport com.mapbox.maps.plugin.compass.generated.CompassSettings\nimport com.mapbox.maps.viewannotation.annotationAnchors\nimport com.mapbox.maps.viewannotation.geometry\nimport com.mapbox.maps.viewannotation.viewAnnotationOptions\nimport no.uio.ifi.in2000.prosjekt.R\nimport java.time.ZoneId\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\nimport kotlin.math.roundToInt\n\n\nval pk = \"pk.eyJ1IjoiY3BicmFuZGEiLCJhIjoiY2x1aTZkNTZnMDE1bzJqbXZ6NDdhc2lraCJ9.oJDEC855zszNVymnAHxKgQ\"\n\nval sk = \"sk.eyJ1IjoiY3BicmFuZGEiLCJhIjoiY2x1aTc4Z2p4MDFnaTJqbXlpdDF2NDVkYSJ9.hJmaf_tc7gS8J2aTwHYPKw\"\n\n@OptIn(MapboxExperimental::class, ExperimentalMaterial3Api::class)\n@Composable\nfun MapScreen(activity: Activity, navController: NavController, mapScreenViewModel: MapScreenViewModel = viewModel(),\n              mapViewModel: MapViewModel = viewModel(),\n              metAlertViewModel: MetAlertViewModel = viewModel(),\n              enturViewModel: EnTurViewModel = viewModel()) {\n\n    val mViewportState = rememberMapViewportState()\n    var showViewAnnotation by remember {\n        mutableStateOf(false)\n    }\n    val dataState by mapScreenViewModel.HVUIState.collectAsState()\n    var visible by remember {\n        mutableStateOf(true)\n    }\n    var showSearch by remember { mutableStateOf(false) }\n    val isLoading by mapScreenViewModel.isPopupVisible.collectAsState()\n    var point by remember {mutableStateOf(Point.fromLngLat(10.0, 59.0))}\n    val context = LocalContext.current.applicationContext // Context til skjerm\n\n    val fusedLocationClient : FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)\n    val sharedPreferences = context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE) // User preferences\n    val isLocationPermissionGranted = sharedPreferences.getBoolean(\"location_permission_enabled\", false)\n    var lat = \"59.0\"\n    var lon = \"11.0\"\n\n    Scaffold(\n        topBar = {\n            TopAppBar(modifier = Modifier,\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF1F3468),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                        Text(\"Logo\", color = Color.White)\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color.White\n                        )\n                    }\n                },\n                actions = {\n                    IconButton(onClick = { enturViewModel.toggleVisibility() }) {\n                        Icon(\n                            Icons.Default.Search,\n                            contentDescription = \"Search\",\n                            tint = Color.White\n                        )\n                    }\n                }\n            )\n        },\n        bottomBar = {\n            BottomAppBar(modifier = Modifier,\n                containerColor = Color(0xFF1F3468) // Matching the top bar color\n            ) {\n                Row(\n                    horizontalArrangement = Arrangement.SpaceEvenly,\n                    modifier = Modifier.fillMaxWidth()\n                ) {\n                    IconButton(onClick = {metAlertViewModel.togglePopupVisibility() }) {\n                        Icon(\n                            imageVector = Icons.Default.Warning, // Change icons as needed\n                            contentDescription = \"MetAlerts\",\n                            tint = Color.White\n                        )\n                    }\n                    IconButton(onClick = {\n                        getLocationMap(context, activity) { location ->\n                            if(location != null){\n                                mViewportState.setCameraOptions {\n                                    center(Point.fromLngLat(\n                                        location.longitude,\n                                        location.latitude\n                                    ))\n                                }\n                            }\n                        }\n                    }) {\n                    Icon(\n                        imageVector = Icons.Default.LocationOn, // Change icons as needed\n                        contentDescription = \"GoToMyLocation\",\n                        tint = Color.White\n                        )\n                    }\n                }\n            }\n        },\n    ) { innerPadding ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(innerPadding),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            metAlerts(metAlertViewModel = metAlertViewModel)\n            searchBar(enturViewModel = enturViewModel, mapViewState = mViewportState)\n            MapboxMap(\n                modifier = Modifier\n                    .weight(1f)\n                    .fillMaxSize(),\n                mapViewportState = mViewportState.apply {\n                    setCameraOptions {\n                        zoom(8.0)\n                        center(mapViewModel.mapCenter)\n                        getLocationMap(context, activity) { location ->\n                            if(location != null){\n                                mViewportState.setCameraOptions {\n                                    center(Point.fromLngLat(\n                                        location.longitude,\n                                        location.latitude\n                                    ))\n                                }\n                            } else {\n                                center(mapViewModel.mapCenter)\n                            }\n                        }\n                        pitch(20.0)\n                        bearing(0.0)\n                    }\n                },\n                onMapClickListener = { clickedPoint ->\n                    // Extracting clicked coordinates\n                    lat = clickedPoint.latitude().toString()\n                    lon = clickedPoint.longitude().toString()\n                    mViewportState.setCameraOptions {\n                        //zoom(mViewportState.cameraState.zoom*1.5) // Adjust the zoom level as needed\n                        center(clickedPoint)\n                        pitch(0.0)\n                        bearing(0.0)\n                    }\n                    mapScreenViewModel.getNewData(lat,lon)\n                    point = Point.fromLngLat(clickedPoint.longitude(),clickedPoint.latitude())\n                    showViewAnnotation = true\n                    visible = true\n                    // Do something with the clicked coordinates\n                    Log.i(\"MapClick\", \"Clicked coordinates: $lat, $lon\")\n                    //Log.i(\"MapClick\", \"Place: ${dataState.bigDataCloud?.city}\")\n                    true\n                },\n            ){\n                if (showViewAnnotation) {\n                    if(visible){\n                        CircleAnnotation(point = point, circleBlur = 1.0)\n                    }\n                    ViewAnnotation(\n                        options = viewAnnotationOptions {\n                            geometry(point)\n                            annotationAnchors(\n                                {\n                                    anchor(ViewAnnotationAnchor.BOTTOM_LEFT)\n                                    offsetY(50.0)\n                                }\n                            )\n                            allowOverlap(false)\n                            visible(visible)\n                        },\n                        ) {\n                        Card(\n                            shape = RoundedCornerShape(15.dp),\n                            modifier = Modifier\n                                .fillMaxHeight(0.2f)\n                                .fillMaxWidth(0.5f)\n                        )\n                        {\n                            Box {\n                                Column(\n                                    verticalArrangement = Arrangement.SpaceEvenly,\n                                    horizontalAlignment = Alignment.Start,\n                                    modifier = Modifier\n                                        .background(Color.White)\n                                        .padding(16.dp)\n                                        .fillMaxSize()\n                                ) {\n                                    if(isLoading){\n                                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                                            CircularProgressIndicator(modifier = Modifier)\n                                        }\n                                    } else {\n                                        Row(\n                                            horizontalArrangement = Arrangement.SpaceBetween,\n                                            modifier = Modifier.fillMaxWidth()\n                                        ) {\n                                            Row(verticalAlignment = Alignment.CenterVertically,\n                                                horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n                                                val painter = painterResource(id = R.drawable.thermometer)\n                                                Image(painter = painter, contentDescription = \"Temperature\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n                                                Column(horizontalAlignment = Alignment.Start) {\n                                                    Text(text = \"Sjø-temp\", fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                    Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"temperature\" }?.value?.toDouble()?.roundToInt()} °C\")\n                                                }\n                                            }\n                                            Row(verticalAlignment = Alignment.CenterVertically,\n                                                horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n                                                val painter = painterResource(id = R.drawable.wind)\n                                                Image(painter = painter, contentDescription = \"Wind\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n\n                                                Column(horizontalAlignment = Alignment.Start) {\n                                                    Text(text = \"Vind\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                    Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"wind_length\" }?.value?.toDouble()?.roundToInt()} m/s\")\n                                                }\n                                            }\n                                        }\n                                        Row(\n                                            horizontalArrangement = Arrangement.SpaceBetween,\n                                            modifier = Modifier.fillMaxWidth()\n                                        ) {\n                                            Row(verticalAlignment = Alignment.CenterVertically,\n                                                horizontalArrangement = Arrangement.spacedBy(8.dp),\n                                            ) {\n                                                val painter = painterResource(id = R.drawable.waves)\n                                                Image(painter = painter, contentDescription = \"Current\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n                                                Column(horizontalAlignment = Alignment.Start) {\n                                                    Text(text = \"Strøm\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                    Text(text = \"${String.format(\"%.1f\", dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"current_length\" }?.value?.toDouble())} m/s\")\n                                                }\n                                            }\n                                            Row(verticalAlignment = Alignment.CenterVertically,\n                                                horizontalArrangement = Arrangement.spacedBy(8.dp)){\n                                                val painter = painterResource(id = R.drawable.salinity)\n                                                Image(painter = painter, contentDescription = \"Salinity\", modifier = Modifier.size(18.dp))\n                                                Column(horizontalAlignment = Alignment.Start) {\n                                                    Text(text = \"Salt\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                    Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"salinity\" }?.value?.toDouble()?.roundToInt()} ‰\", textAlign = TextAlign.Center)\n                                                }\n                                            }\n                                        }\n                                    }\n                                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center){\n                                        Text(\"Detaljert varsel\", modifier = Modifier.clickable {navController.navigate(\"DetailedWeather/${point}\")}, textDecoration = TextDecoration.Underline)\n                                    }\n                                }\n                                IconButton(\n                                    onClick = {visible = false},\n                                    modifier = Modifier\n                                        .size(24.dp)  // Set the size of the IconButton to be small\n                                        .align(Alignment.TopStart)  // Align the button to the top-left corner of the Box\n                                ) {\n                                    Icon(\n                                        imageVector = Icons.Default.Clear,\n                                        contentDescription = \"Close\",\n                                        tint = Color.DarkGray\n                                    )\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nfun getLocationMap(\n    context: Context,\n    activity: Activity,\n    locationCallback: (Location) -> Unit // Callback function to receive location\n) {\n    val fusedLocationClient: FusedLocationProviderClient =\n        LocationServices.getFusedLocationProviderClient(context)\n    val sharedPreferences =\n        context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE) // User preferences\n    if ((ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_FINE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED ||\n                ActivityCompat.checkSelfPermission(\n                    context,\n                    Manifest.permission.ACCESS_COARSE_LOCATION\n                ) != PackageManager.PERMISSION_GRANTED)\n    ) {\n\n        ActivityCompat.requestPermissions(\n            activity,\n            arrayOf(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ),\n            100\n        )\n    } else if (ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_FINE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_COARSE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED\n    ) {\n        ActivityCompat.requestPermissions(\n            activity,\n            arrayOf(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ),\n            100\n        )\n    } else {\n         fusedLocationClient.lastLocation\n                .addOnSuccessListener { location: Location? ->\n                    if (location != null) {\n                        locationCallback(location) // Call the callback with location\n                    }\n                }\n            return\n\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun metAlerts(metAlertViewModel: MetAlertViewModel){\n    val metAlertState by metAlertViewModel.MAUiState.collectAsState()\n    val isPopupVisible by metAlertViewModel.isPopupVisible.collectAsState()\n    val antallVarsler = metAlertState.MetAlerts?.features?.size\n\n    if(isPopupVisible){\n        Popup(\n            alignment = Alignment.TopCenter,\n            onDismissRequest = { metAlertViewModel.togglePopupVisibility() }, // Close popup when dismissed\n        ) {\n            if(antallVarsler != null){\n                if(antallVarsler == 0){\n                    Box(modifier = Modifier.fillMaxHeight(0.83f)\n                        .background(Color.Black.copy(alpha = 0.7f))\n                        .fillMaxWidth(), contentAlignment = Alignment.Center) {\n                        Text(text = \"Ingen farevarsler funnet for sjøen!\", color = Color.White, textAlign = TextAlign.Center, fontWeight = FontWeight.Black)\n                    }\n                } else {\n                    LazyColumn(\n                        modifier = Modifier\n                            .background(Color.Black.copy(alpha = 0.7f))\n                            .padding(16.dp)\n                            .fillMaxHeight(0.8f)\n                            .clickable { metAlertViewModel.togglePopupVisibility() }\n                    ) {\n                        items(antallVarsler){ metalertNr ->\n                            ExpandableCard(metAlertState, metalertNr)\n                        }\n                    }\n                }\n            }\n            IconButton(\n                onClick = { metAlertViewModel.togglePopupVisibility() },\n                modifier = Modifier\n                    .size(35.dp)  // Set the size of the IconButton to be small\n            ) {\n                Icon(\n                    imageVector = Icons.Default.Clear,\n                    contentDescription = \"Close\",\n                    tint = Color.White\n                )\n            }\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun ExpandableCard(metAlertState: MetAlersUiState, nr : Int) {\n    var expanded by remember { mutableStateOf (false) }\n    val inputString = (metAlertState.MetAlerts?.features?.get(nr)?.properties?.title).toString()\n    val parts = inputString.split(\",\")\n    val result = parts.take(3).joinToString(\",\").trim()\n\n    val warning = painterResource(id = R.drawable.warning)\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n    val imageUri = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.resources?.firstOrNull { it.mimeType?.startsWith(\"image/png\") == true }?.uri\n\n    val fareStart = metAlertState.MetAlerts?.features?.get(nr)?.timeinterval?.interval?.get(0)\n        ?.let { formatToNorwegianTime(it) }\n    val fareSlutt = metAlertState.MetAlerts?.features?.get(nr)?.timeinterval?.interval?.get(1)\n        ?.let { formatToNorwegianTime(it) }\n\n    val yellowGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFF9C4), // Light yellow\n            Color(0xFFFFEB3B), // Vivid yellow\n            Color(0xFFFFD726)  // Dark yellow\n        )\n    )\n    val redGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFCDD2), // Light red\n            Color(0xFFE57373), // Medium red\n            Color(0xFFD32F2F)  // Dark red\n        )\n    )\n    val orangeGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFE0B2), // Light orange\n            Color(0xFFFFB74D), // Medium orange\n            Color(0xFFFB8C00)  // Dark orange\n        )\n    )\n    val greenGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFA5D6A7), // Light green\n            Color(0xFF66BB6A), // Medium green\n            Color(0xFF2E7D32)  // Dark green\n        )\n    )\n    val matrixColor = when(\"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.riskMatrixColor}\") {\n        \"Red\" -> redGradient\n        \"Orange\" -> orangeGradient\n        \"Yellow\" -> yellowGradient\n        else -> greenGradient // Default color\n    }\n    Card(\n        shape = RoundedCornerShape(8.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n            pressedElevation = 8.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 8.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 8.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(matrixColor)){\n            Column() {\n                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()){\n                    Image(painter = warning, contentDescription = \"Warning\", modifier = Modifier.size(40.dp), Alignment.Center)\n                    Column(modifier = Modifier\n                        .weight(1f)\n                        .padding(horizontal = 16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally) {\n                        Text(\n                            text = result,\n                            style = MaterialTheme.typography.titleMedium,\n                            modifier = Modifier.padding(12.dp),\n                            textAlign = TextAlign.Center,\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\n                            text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.riskMatrixColor}\",\n                            style = MaterialTheme.typography.bodyMedium,\n                            modifier = Modifier.padding(8.dp),\n                            textAlign = TextAlign.Center\n                        )\n                    }\n                    Image(painter = toggleIconPainter, contentDescription = \"Expand\", modifier = Modifier.size(40.dp), Alignment.CenterStart)\n                }\n                if (expanded) {\n                    Text(\n                        text = \"Anbefalinger:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.instruction}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Beskrivelse:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.description}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Konsekvenser:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.consequences}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Område:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.area}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Tidsperiode:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"Fra $fareStart \\nTil $fareSlutt\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    if(imageUri != null){\n                        AsyncImage(\n                            model = ImageRequest.Builder(LocalContext.current)\n                                .data(imageUri)\n                                .crossfade(true)\n                                .build(),\n                            contentDescription = \"Loaded Image\",\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .clickable { },\n                            contentScale = ContentScale.Crop\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\nfun formatToNorwegianTime(isoDateTime: String): String { // Gjør dato-format til lesbart format\n    val zonedDateTime = ZonedDateTime.parse(isoDateTime)\n\n    val osloZone = zonedDateTime.withZoneSameInstant(ZoneId.of(\"Europe/Oslo\"))\n\n    val formatter = DateTimeFormatter.ofPattern(\"dd.MM.yyyy 'kl.' HH:mm\")\n\n    return osloZone.format(formatter)\n}\n\n@OptIn(ExperimentalComposeUiApi::class, MapboxExperimental::class)\n@Composable\nfun searchBar(enturViewModel : EnTurViewModel, mapViewState: MapViewportState){\n    val isVisible by enturViewModel.isPopupVisible.collectAsState()\n    val lUIState by enturViewModel.locationUIState.collectAsState()\n    val keyboardController = LocalSoftwareKeyboardController.current\n    var newLocationName by remember{ mutableStateOf(\"\") }\n\n    if(isVisible){\n        val scrollState = rememberScrollState()\n        Popup(\n            onDismissRequest = {},\n            properties = PopupProperties(\n                focusable = true,\n                dismissOnBackPress = false,\n                dismissOnClickOutside = false,\n                excludeFromSystemGesture = true,\n            )\n        )\n        {\n            Box(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .background(Color.Transparent.copy(alpha = 0.8f))\n\n            ) {\n                Card (\n                    shape = RoundedCornerShape(20.dp),\n                    modifier = Modifier\n                        .align(Alignment.TopCenter)\n                        .padding(top = 72.dp)\n                        .fillMaxWidth(0.9f)\n                        .fillMaxHeight(0.5f),\n                    colors = CardDefaults.cardColors(containerColor = Color(0xFF1F3468))\n                ){\n                    Row(\n                        modifier = Modifier\n\n                    ) {\n                        IconButton(\n                            onClick = {\n                                enturViewModel.clearSuggestions()\n                                enturViewModel.toggleVisibility()\n                                newLocationName = \"\"\n                            }\n                        )\n                        {\n                            Icon(\n                                imageVector = Icons.Filled.Clear,\n                                contentDescription = \"Tilbake\",\n                                modifier = Modifier.size(40.dp), // Juster størrelsen etter behov\n                                tint = Color.White // Juster fargen etter ønske\n                            )\n                        }\n                    }\n                    Row(\n                        horizontalArrangement = Arrangement.Center ,\n                        verticalAlignment = Alignment.CenterVertically,\n                        modifier = Modifier\n                            .fillMaxSize()\n                    ){\n                        Column(\n                            modifier = Modifier\n                                .padding(top = 24.dp)\n                                .fillMaxSize(),\n\n                            horizontalAlignment = Alignment.CenterHorizontally,\n\n                            ) {\n                            TextField(\n                                value = newLocationName,\n\n                                onValueChange = {newLocationName = it\n                                    enturViewModel.fetchSuggestions(it)\n                                    if (newLocationName.isNotEmpty()){\n                                        enturViewModel.clearSuggestions()\n                                    }\n                                },\n                                shape = RoundedCornerShape(20.dp),\n                                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                                keyboardActions = KeyboardActions(onDone = {\n                                    if (newLocationName.isNotEmpty()){\n                                        newLocationName = \"\"\n                                        keyboardController?.hide()\n                                    }\n                                }\n                                ),\n                                modifier = Modifier\n                                    .fillMaxWidth(0.9f),\n                                label = { Text(\"Søk\")},\n                            )\n                            Column(\n                                modifier = Modifier\n                                    .verticalScroll(scrollState)\n                                    .padding(3.dp)\n                            ) {\n                                lUIState.suggestion?.forEach{suggestion->\n                                    Text(\n                                        text = suggestion.properties.label,\n                                        modifier = Modifier\n                                            .background(Color(0xFFCFE3F3))\n                                            .fillMaxWidth(0.8f)\n                                            .clickable {\n                                                newLocationName = suggestion.properties.label\n                                                enturViewModel.clearSuggestions()\n                                                val kordinatString =\n                                                    suggestion.geometry.coordinates[1] + \",\" + suggestion.geometry.coordinates[0]\n                                                val kordinat = kordinatString.split(\",\")\n                                                val point = Point.fromLngLat(kordinat[0].toDouble(), kordinat[1].toDouble())\n                                                enturViewModel.toggleVisibility()\n                                                mapViewState.setCameraOptions {\n                                                    center(point)\n                                                }\n                                            }\n                                            .padding(8.dp)\n                                    )\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt	(date 1715443589423)
@@ -7,9 +7,13 @@
 import android.content.pm.PackageManager
 import android.location.Location
 import android.os.Build
-import android.util.Log
-import androidx.activity.ComponentActivity
 import androidx.annotation.RequiresApi
+import androidx.compose.animation.AnimatedVisibility
+import androidx.compose.animation.core.tween
+import androidx.compose.animation.fadeIn
+import androidx.compose.animation.fadeOut
+import androidx.compose.animation.slideInVertically
+import androidx.compose.animation.slideOutVertically
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
@@ -22,8 +26,8 @@
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.layout.width
 import androidx.compose.foundation.lazy.LazyColumn
-import androidx.compose.foundation.lazy.items
 import androidx.compose.foundation.rememberScrollState
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.foundation.text.KeyboardActions
@@ -32,31 +36,25 @@
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.ArrowBack
 import androidx.compose.material.icons.filled.Clear
-import androidx.compose.material.icons.filled.Home
 import androidx.compose.material.icons.filled.LocationOn
 import androidx.compose.material.icons.filled.Search
-import androidx.compose.material.icons.filled.Star
 import androidx.compose.material.icons.filled.Warning
 import androidx.compose.material3.BottomAppBar
-import androidx.compose.material3.Button
 import androidx.compose.material3.Card
 import androidx.compose.material3.CardDefaults
 import androidx.compose.material3.CircularProgressIndicator
+import androidx.compose.material3.Divider
 import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.Icon
 import androidx.compose.material3.IconButton
 import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.OutlinedTextField
-import androidx.compose.material3.OutlinedTextFieldDefaults
 import androidx.compose.material3.Scaffold
 import androidx.compose.material3.Text
 import androidx.compose.material3.TextField
-import androidx.compose.material3.TextFieldColors
+import androidx.compose.material3.TextFieldDefaults
 import androidx.compose.material3.TopAppBar
 import androidx.compose.material3.TopAppBarDefaults
 import androidx.compose.runtime.Composable
-import androidx.compose.runtime.LaunchedEffect
-import androidx.compose.runtime.clearCompositionErrors
 import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
@@ -65,11 +63,9 @@
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.ExperimentalComposeUiApi
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.draw.clip
-import androidx.compose.ui.focus.FocusRequester
-import androidx.compose.ui.focus.focusRequester
 import androidx.compose.ui.graphics.Brush
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.ColorFilter
 import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.platform.LocalSoftwareKeyboardController
@@ -84,25 +80,20 @@
 import androidx.compose.ui.window.Popup
 import androidx.compose.ui.window.PopupProperties
 import androidx.core.app.ActivityCompat
-import androidx.core.content.ContextCompat
 import androidx.lifecycle.viewmodel.compose.viewModel
 import androidx.navigation.NavController
 import coil.compose.AsyncImage
 import coil.request.ImageRequest
 import com.google.android.gms.location.FusedLocationProviderClient
-import com.google.android.gms.location.LocationCallback
-import com.google.android.gms.location.LocationResult
 import com.google.android.gms.location.LocationServices
 import com.mapbox.geojson.Point
 import com.mapbox.maps.MapboxExperimental
 import com.mapbox.maps.ViewAnnotationAnchor
-import com.mapbox.maps.dsl.cameraOptions
 import com.mapbox.maps.extension.compose.MapboxMap
 import com.mapbox.maps.extension.compose.animation.viewport.MapViewportState
 import com.mapbox.maps.extension.compose.animation.viewport.rememberMapViewportState
 import com.mapbox.maps.extension.compose.annotation.ViewAnnotation
 import com.mapbox.maps.extension.compose.annotation.generated.CircleAnnotation
-import com.mapbox.maps.plugin.compass.generated.CompassSettings
 import com.mapbox.maps.viewannotation.annotationAnchors
 import com.mapbox.maps.viewannotation.geometry
 import com.mapbox.maps.viewannotation.viewAnnotationOptions
@@ -128,18 +119,12 @@
     var showViewAnnotation by remember {
         mutableStateOf(false)
     }
-    val dataState by mapScreenViewModel.HVUIState.collectAsState()
+    val mapCameraState by mapViewModel.camera.collectAsState()
     var visible by remember {
         mutableStateOf(true)
     }
-    var showSearch by remember { mutableStateOf(false) }
-    val isLoading by mapScreenViewModel.isPopupVisible.collectAsState()
     var point by remember {mutableStateOf(Point.fromLngLat(10.0, 59.0))}
     val context = LocalContext.current.applicationContext // Context til skjerm
-
-    val fusedLocationClient : FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)
-    val sharedPreferences = context.getSharedPreferences("MyPrefs", Context.MODE_PRIVATE) // User preferences
-    val isLocationPermissionGranted = sharedPreferences.getBoolean("location_permission_enabled", false)
     var lat = "59.0"
     var lon = "11.0"
 
@@ -147,12 +132,17 @@
         topBar = {
             TopAppBar(modifier = Modifier,
                 colors = TopAppBarDefaults.topAppBarColors(
-                    containerColor = Color(0xFF1F3468),
+                    containerColor = Color(0xFF171729),
                     titleContentColor = Color.Black,
                 ),
                 title = {
-                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
-                        Text("Logo", color = Color.White)
+                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {
+                        Image(
+                            painter = painterResource(id = R.drawable.havblikktext),
+                            contentDescription = "My Image",
+                            alignment = Alignment.Center,
+                            colorFilter = ColorFilter.tint(Color(0xFFCFE3F3)),
+                        )
                     }
                 },
                 navigationIcon = {
@@ -160,56 +150,21 @@
                         Icon(
                             Icons.Default.ArrowBack,
                             contentDescription = "Return",
-                            tint = Color.White
+                            tint = Color(0xFFCFE3F3)
                         )
                     }
                 },
                 actions = {
-                    IconButton(onClick = { enturViewModel.toggleVisibility() }) {
+                    IconButton(onClick = {
+                        enturViewModel.toggleVisibility() }) {
                         Icon(
                             Icons.Default.Search,
                             contentDescription = "Search",
-                            tint = Color.White
+                            tint = Color(0xFFCFE3F3)
                         )
                     }
                 }
             )
-        },
-        bottomBar = {
-            BottomAppBar(modifier = Modifier,
-                containerColor = Color(0xFF1F3468) // Matching the top bar color
-            ) {
-                Row(
-                    horizontalArrangement = Arrangement.SpaceEvenly,
-                    modifier = Modifier.fillMaxWidth()
-                ) {
-                    IconButton(onClick = {metAlertViewModel.togglePopupVisibility() }) {
-                        Icon(
-                            imageVector = Icons.Default.Warning, // Change icons as needed
-                            contentDescription = "MetAlerts",
-                            tint = Color.White
-                        )
-                    }
-                    IconButton(onClick = {
-                        getLocationMap(context, activity) { location ->
-                            if(location != null){
-                                mViewportState.setCameraOptions {
-                                    center(Point.fromLngLat(
-                                        location.longitude,
-                                        location.latitude
-                                    ))
-                                }
-                            }
-                        }
-                    }) {
-                    Icon(
-                        imageVector = Icons.Default.LocationOn, // Change icons as needed
-                        contentDescription = "GoToMyLocation",
-                        tint = Color.White
-                        )
-                    }
-                }
-            }
         },
     ) { innerPadding ->
         Column(
@@ -218,164 +173,228 @@
                 .padding(innerPadding),
             horizontalAlignment = Alignment.CenterHorizontally
         ) {
-            metAlerts(metAlertViewModel = metAlertViewModel)
-            searchBar(enturViewModel = enturViewModel, mapViewState = mViewportState)
-            MapboxMap(
-                modifier = Modifier
-                    .weight(1f)
-                    .fillMaxSize(),
-                mapViewportState = mViewportState.apply {
-                    setCameraOptions {
-                        zoom(8.0)
-                        center(mapViewModel.mapCenter)
-                        getLocationMap(context, activity) { location ->
-                            if(location != null){
-                                mViewportState.setCameraOptions {
-                                    center(Point.fromLngLat(
-                                        location.longitude,
-                                        location.latitude
-                                    ))
-                                }
-                            } else {
-                                center(mapViewModel.mapCenter)
-                            }
-                        }
-                        pitch(20.0)
-                        bearing(0.0)
-                    }
-                },
-                onMapClickListener = { clickedPoint ->
-                    // Extracting clicked coordinates
-                    lat = clickedPoint.latitude().toString()
-                    lon = clickedPoint.longitude().toString()
-                    mViewportState.setCameraOptions {
-                        //zoom(mViewportState.cameraState.zoom*1.5) // Adjust the zoom level as needed
-                        center(clickedPoint)
-                        pitch(0.0)
-                        bearing(0.0)
-                    }
-                    mapScreenViewModel.getNewData(lat,lon)
-                    point = Point.fromLngLat(clickedPoint.longitude(),clickedPoint.latitude())
-                    showViewAnnotation = true
-                    visible = true
-                    // Do something with the clicked coordinates
-                    Log.i("MapClick", "Clicked coordinates: $lat, $lon")
-                    //Log.i("MapClick", "Place: ${dataState.bigDataCloud?.city}")
-                    true
-                },
-            ){
-                if (showViewAnnotation) {
-                    if(visible){
-                        CircleAnnotation(point = point, circleBlur = 1.0)
-                    }
-                    ViewAnnotation(
-                        options = viewAnnotationOptions {
-                            geometry(point)
-                            annotationAnchors(
-                                {
-                                    anchor(ViewAnnotationAnchor.BOTTOM_LEFT)
-                                    offsetY(50.0)
-                                }
-                            )
-                            allowOverlap(false)
-                            visible(visible)
-                        },
+            Box(modifier = Modifier
+                .fillMaxSize()){
+                MapboxMap(
+                    modifier = Modifier
+                        .fillMaxSize(),
+                    mapViewportState = mViewportState.apply {
+                        setCameraOptions {
+                            zoom(mapCameraState.zoom)
+                            center(mapCameraState.center)
+                            pitch(20.0)
+                            bearing(0.0)
+                        }
+                    },
+                    onMapClickListener = { clickedPoint ->
+                        // Extracting clicked coordinates
+                        lat = clickedPoint.latitude().toString()
+                        lon = clickedPoint.longitude().toString()
+                        mViewportState.setCameraOptions {
+                            //zoom(mViewportState.cameraState.zoom*1.5) // Adjust the zoom level as needed
+                            center(clickedPoint)
+                            pitch(0.0)
+                            bearing(0.0)
+                        }
+                        point = Point.fromLngLat(clickedPoint.longitude(),clickedPoint.latitude())
+                        showViewAnnotation = true
+                        visible = true
+                        mapScreenViewModel.getNewData(lat,lon)
+                        // Do something with the clicked coordinates
+                        true
+                    },
+                ){
+                    if (showViewAnnotation) {
+                        if(visible){
+                            CircleAnnotation(point = point, circleBlur = 1.0)
+                        }
+                        ViewAnnotation(
+                            options = viewAnnotationOptions {
+                                geometry(point)
+                                annotationAnchors(
+                                    {
+                                        anchor(ViewAnnotationAnchor.BOTTOM_LEFT)
+                                        offsetY(50.0)
+                                    }
+                                )
+                                allowOverlap(false)
+                                visible(visible)
+                            }
                         ) {
-                        Card(
-                            shape = RoundedCornerShape(15.dp),
-                            modifier = Modifier
-                                .fillMaxHeight(0.2f)
-                                .fillMaxWidth(0.5f)
-                        )
-                        {
-                            Box {
-                                Column(
-                                    verticalArrangement = Arrangement.SpaceEvenly,
-                                    horizontalAlignment = Alignment.Start,
-                                    modifier = Modifier
-                                        .background(Color.White)
-                                        .padding(16.dp)
-                                        .fillMaxSize()
-                                ) {
-                                    if(isLoading){
-                                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
-                                            CircularProgressIndicator(modifier = Modifier)
-                                        }
-                                    } else {
-                                        Row(
-                                            horizontalArrangement = Arrangement.SpaceBetween,
-                                            modifier = Modifier.fillMaxWidth()
-                                        ) {
-                                            Row(verticalAlignment = Alignment.CenterVertically,
-                                                horizontalArrangement = Arrangement.spacedBy(8.dp)) {
-                                                val painter = painterResource(id = R.drawable.thermometer)
-                                                Image(painter = painter, contentDescription = "Temperature", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
-                                                Column(horizontalAlignment = Alignment.Start) {
-                                                    Text(text = "Sjø-temp", fontFamily = FontFamily.Serif, fontSize = 12.sp)
-                                                    Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "temperature" }?.value?.toDouble()?.roundToInt()} °C")
-                                                }
-                                            }
-                                            Row(verticalAlignment = Alignment.CenterVertically,
-                                                horizontalArrangement = Arrangement.spacedBy(8.dp)) {
-                                                val painter = painterResource(id = R.drawable.wind)
-                                                Image(painter = painter, contentDescription = "Wind", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
+                            Box(modifier = Modifier
+                                .fillMaxHeight(0.2f)
+                                .fillMaxWidth(0.5f)){
+                                MapCard(mapScreenViewModel = mapScreenViewModel)
+                                IconButton(
+                                    onClick = {visible = false},
+                                    modifier = Modifier
+                                        .size(24.dp)  // Set the size of the IconButton to be small
+                                ) {
+                                    Icon(
+                                        imageVector = Icons.Default.Clear,
+                                        contentDescription = "Close",
+                                        tint = Color.DarkGray
+                                    )
+                                }
+                                Box(
+                                    modifier = Modifier
+                                        .fillMaxWidth()
+                                        .align(Alignment.BottomCenter),
+                                    contentAlignment = Alignment.Center
+                                ) {
+                                    Text(
+                                        "Detaljert varsel",
+                                        modifier = Modifier
+                                            .clickable {
+                                                mapViewModel.updateZoomLevel(mViewportState.cameraState.zoom)
+                                                mapViewModel.updateMapCenter(mViewportState.cameraState.center)
+                                                navController.navigate("DetailedWeather/${point.latitude()},${point.longitude()}")
+                                            }
+                                            .padding(8.dp),
+                                        fontSize = 12.sp,
+                                        textDecoration = TextDecoration.Underline,
+                                    )
+                                }
+                            }
+                        }
+                    }
+                }
+                //searchBar(enturViewModel = enturViewModel, mapViewState = mViewportState)
+                Box(modifier = Modifier
+                    .fillMaxWidth(0.6f)
+                    .fillMaxHeight(0.1f)
+                    .align(Alignment.BottomCenter)
+                ){
+                    Row(
+                        horizontalArrangement = Arrangement.SpaceEvenly,
+                        modifier = Modifier
+                            .fillMaxWidth()
+                            .padding(20.dp)
+                            .background(
+                                Color(0xFF171729).copy(alpha = 0.7f),
+                                shape = RoundedCornerShape(20.dp)
+                            )
+                    ) {
+                        IconButton(modifier = Modifier.weight(1f) ,onClick = {metAlertViewModel.togglePopupVisibility() }) {
+                            Icon(
+                                imageVector = Icons.Default.Warning, // Change icons as needed
+                                contentDescription = "MetAlerts",
+                                tint = Color(0xFFF9E784)
+                            )
+                        }
+                        VerticalDivider()
+                        IconButton(modifier = Modifier.weight(1f) ,onClick = {
+                            getLocationMap(context, activity) { location ->
+                                if(location != null){
+                                    mViewportState.setCameraOptions {
+                                        center(Point.fromLngLat(
+                                            location.longitude,
+                                            location.latitude
+                                        ))
+                                    }
+                                }
+                            }
+                        }) {
+                            Icon(painter = painterResource(id = R.drawable.mylocationgoogle2),
+                                contentDescription = "GoToMyLocation" ,
+                                tint = Color(0xFF4694E2)
+                            )
+                        }
+                    }
+                }
+                searchBar(enturViewModel = enturViewModel, mapViewState = mViewportState)
+                metAlerts(metAlertViewModel = metAlertViewModel)
+            }
+        }
+    }
+}
+
+@Composable
+fun VerticalDivider() {
+    Divider(
+        modifier = Modifier
+            .fillMaxHeight()
+            .width(2.dp),
+        color = Color.Gray
+    )
+}
+
+@Composable
+fun MapCard(mapScreenViewModel: MapScreenViewModel){
+    val dataState by mapScreenViewModel.HVUIState.collectAsState()
+    val isLoading by mapScreenViewModel.isPopupVisible.collectAsState()
+    Card(
+        shape = RoundedCornerShape(15.dp),
+        modifier = Modifier.fillMaxSize()
+    )
+    {
+        Box {
+            Column(
+                verticalArrangement = Arrangement.SpaceEvenly,
+                horizontalAlignment = Alignment.Start,
+                modifier = Modifier
+                    .background(Color.White)
+                    .padding(16.dp)
+                    .fillMaxSize()
+            ) {
+                if(isLoading){
+                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
+                        CircularProgressIndicator(modifier = Modifier)
+                    }
+                } else {
+                    Row(
+                        horizontalArrangement = Arrangement.SpaceBetween,
+                        modifier = Modifier.fillMaxWidth()
+                    ) {
+                        Row(verticalAlignment = Alignment.CenterVertically,
+                            horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+                            val painter = painterResource(id = R.drawable.thermometer)
+                            Image(painter = painter, contentDescription = "Temperature", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
+                            Column(horizontalAlignment = Alignment.Start) {
+                                Text(text = "Sjø-temp", fontFamily = FontFamily.Serif, fontSize = 12.sp)
+                                Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "temperature" }?.value?.toDouble()?.roundToInt()} °C")
+                            }
+                        }
+                        Row(verticalAlignment = Alignment.CenterVertically,
+                            horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+                            val painter = painterResource(id = R.drawable.wind)
+                            Image(painter = painter, contentDescription = "Wind", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
 
-                                                Column(horizontalAlignment = Alignment.Start) {
-                                                    Text(text = "Vind",fontFamily = FontFamily.Serif, fontSize = 12.sp)
-                                                    Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "wind_length" }?.value?.toDouble()?.roundToInt()} m/s")
-                                                }
-                                            }
-                                        }
-                                        Row(
-                                            horizontalArrangement = Arrangement.SpaceBetween,
-                                            modifier = Modifier.fillMaxWidth()
-                                        ) {
-                                            Row(verticalAlignment = Alignment.CenterVertically,
-                                                horizontalArrangement = Arrangement.spacedBy(8.dp),
-                                            ) {
-                                                val painter = painterResource(id = R.drawable.waves)
-                                                Image(painter = painter, contentDescription = "Current", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
-                                                Column(horizontalAlignment = Alignment.Start) {
-                                                    Text(text = "Strøm",fontFamily = FontFamily.Serif, fontSize = 12.sp)
-                                                    Text(text = "${String.format("%.1f", dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "current_length" }?.value?.toDouble())} m/s")
-                                                }
-                                            }
-                                            Row(verticalAlignment = Alignment.CenterVertically,
-                                                horizontalArrangement = Arrangement.spacedBy(8.dp)){
-                                                val painter = painterResource(id = R.drawable.salinity)
-                                                Image(painter = painter, contentDescription = "Salinity", modifier = Modifier.size(18.dp))
-                                                Column(horizontalAlignment = Alignment.Start) {
-                                                    Text(text = "Salt",fontFamily = FontFamily.Serif, fontSize = 12.sp)
-                                                    Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "salinity" }?.value?.toDouble()?.roundToInt()} ‰", textAlign = TextAlign.Center)
-                                                }
-                                            }
-                                        }
-                                    }
-                                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center){
-                                        Text("Detaljert varsel", modifier = Modifier.clickable {navController.navigate("DetailedWeather/${point}")}, textDecoration = TextDecoration.Underline)
-                                    }
-                                }
-                                IconButton(
-                                    onClick = {visible = false},
-                                    modifier = Modifier
-                                        .size(24.dp)  // Set the size of the IconButton to be small
-                                        .align(Alignment.TopStart)  // Align the button to the top-left corner of the Box
-                                ) {
-                                    Icon(
-                                        imageVector = Icons.Default.Clear,
-                                        contentDescription = "Close",
-                                        tint = Color.DarkGray
-                                    )
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    }
-}
-
+                            Column(horizontalAlignment = Alignment.Start) {
+                                Text(text = "Vind",fontFamily = FontFamily.Serif, fontSize = 12.sp)
+                                Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "wind_length" }?.value?.toDouble()?.roundToInt()} m/s")
+                            }
+                        }
+                    }
+                    Row(
+                        horizontalArrangement = Arrangement.SpaceBetween,
+                        modifier = Modifier.fillMaxWidth()
+                    ) {
+                        Row(verticalAlignment = Alignment.CenterVertically,
+                            horizontalArrangement = Arrangement.spacedBy(8.dp),
+                        ) {
+                            val painter = painterResource(id = R.drawable.waves)
+                            Image(painter = painter, contentDescription = "Current", modifier = Modifier.size(18.dp), Alignment.CenterEnd)
+                            Column(horizontalAlignment = Alignment.Start) {
+                                Text(text = "Strøm",fontFamily = FontFamily.Serif, fontSize = 12.sp)
+                                Text(text = "${String.format("%.1f", dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "current_length" }?.value?.toDouble())} m/s")
+                            }
+                        }
+                        Row(verticalAlignment = Alignment.CenterVertically,
+                            horizontalArrangement = Arrangement.spacedBy(8.dp)){
+                            val painter = painterResource(id = R.drawable.salinity)
+                            Image(painter = painter, contentDescription = "Salinity", modifier = Modifier.size(18.dp))
+                            Column(horizontalAlignment = Alignment.Start) {
+                                Text(text = "Salt",fontFamily = FontFamily.Serif, fontSize = 12.sp)
+                                Text(text = "${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == "salinity" }?.value?.toDouble()?.roundToInt()} ‰", textAlign = TextAlign.Center)
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
 
 fun getLocationMap(
     context: Context,
@@ -384,8 +403,6 @@
 ) {
     val fusedLocationClient: FusedLocationProviderClient =
         LocationServices.getFusedLocationProviderClient(context)
-    val sharedPreferences =
-        context.getSharedPreferences("MyPrefs", Context.MODE_PRIVATE) // User preferences
     if ((ActivityCompat.checkSelfPermission(
             context,
             Manifest.permission.ACCESS_FINE_LOCATION
@@ -395,23 +412,6 @@
                     Manifest.permission.ACCESS_COARSE_LOCATION
                 ) != PackageManager.PERMISSION_GRANTED)
     ) {
-
-        ActivityCompat.requestPermissions(
-            activity,
-            arrayOf(
-                Manifest.permission.ACCESS_FINE_LOCATION,
-                Manifest.permission.ACCESS_COARSE_LOCATION
-            ),
-            100
-        )
-    } else if (ActivityCompat.checkSelfPermission(
-            context,
-            Manifest.permission.ACCESS_FINE_LOCATION
-        ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
-            context,
-            Manifest.permission.ACCESS_COARSE_LOCATION
-        ) != PackageManager.PERMISSION_GRANTED
-    ) {
         ActivityCompat.requestPermissions(
             activity,
             arrayOf(
@@ -421,42 +421,47 @@
             100
         )
     } else {
-         fusedLocationClient.lastLocation
-                .addOnSuccessListener { location: Location? ->
-                    if (location != null) {
-                        locationCallback(location) // Call the callback with location
-                    }
-                }
-            return
-
+        fusedLocationClient.lastLocation
+            .addOnSuccessListener { location: Location? ->
+                if (location != null) {
+                    locationCallback(location) // Call the callback with location
+                }
+            }
+        return
     }
 }
 
-@RequiresApi(Build.VERSION_CODES.O)
 @Composable
 fun metAlerts(metAlertViewModel: MetAlertViewModel){
     val metAlertState by metAlertViewModel.MAUiState.collectAsState()
     val isPopupVisible by metAlertViewModel.isPopupVisible.collectAsState()
     val antallVarsler = metAlertState.MetAlerts?.features?.size
 
-    if(isPopupVisible){
-        Popup(
-            alignment = Alignment.TopCenter,
-            onDismissRequest = { metAlertViewModel.togglePopupVisibility() }, // Close popup when dismissed
-        ) {
+    AnimatedVisibility(
+        visible = isPopupVisible,
+        enter = slideInVertically(
+            initialOffsetY = { it },
+            animationSpec = tween(durationMillis = 300)
+        ) + fadeIn(animationSpec = tween(durationMillis = 300)),
+        exit = slideOutVertically(
+            targetOffsetY = { it },
+            animationSpec = tween(durationMillis = 300)
+        ) + fadeOut(animationSpec = tween(durationMillis = 300))
+    ) {
+        Box(modifier = Modifier
+            .fillMaxHeight()
+            .background(Color.Black.copy(alpha = 0.8f))
+            .fillMaxWidth(), contentAlignment = Alignment.Center)
+        {
             if(antallVarsler != null){
                 if(antallVarsler == 0){
-                    Box(modifier = Modifier.fillMaxHeight(0.83f)
-                        .background(Color.Black.copy(alpha = 0.7f))
-                        .fillMaxWidth(), contentAlignment = Alignment.Center) {
-                        Text(text = "Ingen farevarsler funnet for sjøen!", color = Color.White, textAlign = TextAlign.Center, fontWeight = FontWeight.Black)
-                    }
+                    Text(text = "Ingen farevarsler funnet for sjøen!", color = Color.White, textAlign = TextAlign.Center, fontWeight = FontWeight.Black)
                 } else {
                     LazyColumn(
                         modifier = Modifier
                             .background(Color.Black.copy(alpha = 0.7f))
                             .padding(16.dp)
-                            .fillMaxHeight(0.8f)
+                            .fillMaxSize()
                             .clickable { metAlertViewModel.togglePopupVisibility() }
                     ) {
                         items(antallVarsler){ metalertNr ->
@@ -468,7 +473,8 @@
             IconButton(
                 onClick = { metAlertViewModel.togglePopupVisibility() },
                 modifier = Modifier
-                    .size(35.dp)  // Set the size of the IconButton to be small
+                    .size(40.dp)
+                    .align(Alignment.TopStart)// Set the size of the IconButton to be small
             ) {
                 Icon(
                     imageVector = Icons.Default.Clear,
@@ -480,7 +486,6 @@
     }
 }
 
-@RequiresApi(Build.VERSION_CODES.O)
 @Composable
 fun ExpandableCard(metAlertState: MetAlersUiState, nr : Int) {
     var expanded by remember { mutableStateOf (false) }
@@ -649,7 +654,6 @@
     }
 }
 
-@RequiresApi(Build.VERSION_CODES.O)
 fun formatToNorwegianTime(isoDateTime: String): String { // Gjør dato-format til lesbart format
     val zonedDateTime = ZonedDateTime.parse(isoDateTime)
 
@@ -660,7 +664,7 @@
     return osloZone.format(formatter)
 }
 
-@OptIn(ExperimentalComposeUiApi::class, MapboxExperimental::class)
+@OptIn(ExperimentalComposeUiApi::class, MapboxExperimental::class, ExperimentalMaterial3Api::class)
 @Composable
 fun searchBar(enturViewModel : EnTurViewModel, mapViewState: MapViewportState){
     val isVisible by enturViewModel.isPopupVisible.collectAsState()
@@ -668,115 +672,113 @@
     val keyboardController = LocalSoftwareKeyboardController.current
     var newLocationName by remember{ mutableStateOf("") }
 
-    if(isVisible){
-        val scrollState = rememberScrollState()
-        Popup(
-            onDismissRequest = {},
-            properties = PopupProperties(
-                focusable = true,
-                dismissOnBackPress = false,
-                dismissOnClickOutside = false,
-                excludeFromSystemGesture = true,
-            )
-        )
-        {
-            Box(
-                modifier = Modifier
-                    .fillMaxSize()
-                    .background(Color.Transparent.copy(alpha = 0.8f))
-
-            ) {
-                Card (
-                    shape = RoundedCornerShape(20.dp),
-                    modifier = Modifier
-                        .align(Alignment.TopCenter)
-                        .padding(top = 72.dp)
-                        .fillMaxWidth(0.9f)
-                        .fillMaxHeight(0.5f),
-                    colors = CardDefaults.cardColors(containerColor = Color(0xFF1F3468))
-                ){
-                    Row(
-                        modifier = Modifier
-
-                    ) {
-                        IconButton(
-                            onClick = {
-                                enturViewModel.clearSuggestions()
-                                enturViewModel.toggleVisibility()
-                                newLocationName = ""
-                            }
-                        )
-                        {
-                            Icon(
-                                imageVector = Icons.Filled.Clear,
-                                contentDescription = "Tilbake",
-                                modifier = Modifier.size(40.dp), // Juster størrelsen etter behov
-                                tint = Color.White // Juster fargen etter ønske
-                            )
-                        }
-                    }
-                    Row(
-                        horizontalArrangement = Arrangement.Center ,
-                        verticalAlignment = Alignment.CenterVertically,
-                        modifier = Modifier
-                            .fillMaxSize()
-                    ){
-                        Column(
-                            modifier = Modifier
-                                .padding(top = 24.dp)
-                                .fillMaxSize(),
-
-                            horizontalAlignment = Alignment.CenterHorizontally,
-
-                            ) {
-                            TextField(
-                                value = newLocationName,
-
-                                onValueChange = {newLocationName = it
-                                    enturViewModel.fetchSuggestions(it)
-                                    if (newLocationName.isNotEmpty()){
-                                        enturViewModel.clearSuggestions()
-                                    }
-                                },
-                                shape = RoundedCornerShape(20.dp),
-                                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
-                                keyboardActions = KeyboardActions(onDone = {
-                                    if (newLocationName.isNotEmpty()){
-                                        newLocationName = ""
-                                        keyboardController?.hide()
-                                    }
+    val scrollState = rememberScrollState()
+    AnimatedVisibility(
+        visible = isVisible,
+        enter = slideInVertically(
+            initialOffsetY = { it },
+            animationSpec = tween(durationMillis = 300)
+        ) + fadeIn(animationSpec = tween(durationMillis = 300)),
+        exit = slideOutVertically(
+            targetOffsetY = { it },
+            animationSpec = tween(durationMillis = 300)
+        ) + fadeOut(animationSpec = tween(durationMillis = 300))
+    ) {
+        Box(
+            modifier = Modifier
+                .fillMaxSize()
+                .background(Color.Transparent.copy(alpha = 0.8f))
+        ) {
+            Card (
+                shape = RoundedCornerShape(5.dp),
+                modifier = Modifier
+                    .align(Alignment.TopCenter)
+                    .padding(top = 70.dp)
+                    .fillMaxSize(),
+                colors = CardDefaults.cardColors(containerColor = Color(0xFF171729))
+            ){
+                Row() {
+                    IconButton(
+                        onClick = {
+                            enturViewModel.clearSuggestions()
+                            enturViewModel.toggleVisibility()
+                            newLocationName = ""
+                        }
+                    ) {
+                    Icon(
+                        imageVector = Icons.Filled.Clear,
+                        contentDescription = "Tilbake",
+                        modifier = Modifier.size(40.dp), // Juster størrelsen etter behov
+                        tint = Color.White // Juster fargen etter ønske
+                    )
+                    }
+                }
+                Row(
+                    horizontalArrangement = Arrangement.Center ,
+                    verticalAlignment = Alignment.CenterVertically,
+                    modifier = Modifier
+                        .fillMaxSize()
+                ){
+                    Column(
+                        modifier = Modifier
+                            .padding(top = 24.dp)
+                            .fillMaxSize(),
+                        horizontalAlignment = Alignment.CenterHorizontally,
+                        ) {
+                        TextField(
+                            value = newLocationName,
+                            onValueChange = {newLocationName = it
+                                enturViewModel.fetchSuggestions(it)
+                                if (newLocationName.isNotEmpty()){
+                                    enturViewModel.clearSuggestions()
+                                }
+                            },
+                            shape = RoundedCornerShape(20.dp),
+                            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
+                            keyboardActions = KeyboardActions(onDone = {
+                                if (newLocationName.isNotEmpty()){
+                                    newLocationName = ""
+                                    keyboardController?.hide()
                                 }
-                                ),
-                                modifier = Modifier
-                                    .fillMaxWidth(0.9f),
-                                label = { Text("Søk")},
+                            }),
+                            modifier = Modifier
+                                .fillMaxWidth(0.9f),
+                            label = { Text("Søk")},
+                            colors = TextFieldDefaults.textFieldColors(
+                                focusedIndicatorColor = Color.Transparent,
+                                unfocusedIndicatorColor = Color.Transparent,
+                                disabledIndicatorColor = Color.Transparent
                             )
-                            Column(
-                                modifier = Modifier
-                                    .verticalScroll(scrollState)
-                                    .padding(3.dp)
-                            ) {
-                                lUIState.suggestion?.forEach{suggestion->
-                                    Text(
-                                        text = suggestion.properties.label,
-                                        modifier = Modifier
-                                            .background(Color(0xFFCFE3F3))
-                                            .fillMaxWidth(0.8f)
-                                            .clickable {
-                                                newLocationName = suggestion.properties.label
-                                                enturViewModel.clearSuggestions()
-                                                val kordinatString =
-                                                    suggestion.geometry.coordinates[1] + "," + suggestion.geometry.coordinates[0]
-                                                val kordinat = kordinatString.split(",")
-                                                val point = Point.fromLngLat(kordinat[0].toDouble(), kordinat[1].toDouble())
-                                                enturViewModel.toggleVisibility()
-                                                mapViewState.setCameraOptions {
-                                                    center(point)
-                                                }
-                                            }
-                                            .padding(8.dp)
-                                    )
-                                }
+                        )
+                        Column(
+                            modifier = Modifier
+                                .verticalScroll(scrollState)
+                                .padding(3.dp)
+                        ) {
+                            lUIState.suggestion?.forEach{suggestion->
+                                Text(
+                                    text = suggestion.properties.label,
+                                    modifier = Modifier
+                                        .background(Color(0xFFCFE3F3))
+                                        .fillMaxWidth(0.8f)
+                                        .clickable {
+                                            newLocationName = suggestion.properties.label
+                                            enturViewModel.clearSuggestions()
+                                            val kordinatString =
+                                                suggestion.geometry.coordinates[1] + "," + suggestion.geometry.coordinates[0]
+                                            val kordinat = kordinatString.split(",")
+                                            val point = Point.fromLngLat(
+                                                kordinat[1].toDouble(),
+                                                kordinat[0].toDouble()
+                                            )
+                                            enturViewModel.toggleVisibility()
+                                            mapViewState.setCameraOptions {
+                                                zoom(12.0)
+                                                center(point)
+                                            }
+                                        }
+                                        .padding(8.dp)
+                                )
                             }
                         }
                     }
@@ -784,5 +786,4 @@
             }
         }
     }
-}
-
+}
\ No newline at end of file
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/BottomBar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.home\n\nimport android.annotation.SuppressLint\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Home\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material.icons.filled.Settings\nimport androidx.compose.material.icons.outlined.Home\nimport androidx.compose.ui.res.vectorResource\nimport androidx.compose.material.icons.outlined.Info\nimport androidx.compose.material.icons.outlined.LocationOn\nimport androidx.compose.material.icons.outlined.Settings\nimport androidx.compose.material3.Badge\nimport androidx.compose.material3.BadgedBox\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.NavigationBar\nimport androidx.compose.material3.NavigationBarItem\nimport androidx.compose.material3.NavigationBarItemDefaults\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.res.painterResource\nimport androidx.navigation.NavController\nimport no.uio.ifi.in2000.prosjekt.R\n\ndata class BottomNavigationItem(\n    val title : String,\n    val selectedIcon : ImageVector,\n    val unselectedIcon : ImageVector,\n    val hasNews : Boolean,\n    val badgeCount : Int? = null\n\n)\n\n@Composable\nfun loadImageVector(resourceId: Int): ImageVector {\n    // Use vectorResource for vector drawables\n    return ImageVector.vectorResource(resourceId)\n}\n@SuppressLint(\"UnusedMaterial3ScaffoldPaddingParameter\")\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun RunBottomBar(navController: NavController){\n\n    //liste med elementer\n    val items = listOf(\n        BottomNavigationItem(\n            title = \"Hjem\",\n            selectedIcon = Icons.Filled.Home,\n            unselectedIcon = Icons.Filled.Home,\n            hasNews = false\n        ),\n        BottomNavigationItem(\n            title = \"Lær\",\n            selectedIcon = loadImageVector(resourceId = R.drawable.learn),\n            unselectedIcon = loadImageVector(resourceId = R.drawable.learn),\n            hasNews = false\n        ),\n        BottomNavigationItem(\n            title = \"Kart\",\n            selectedIcon = Icons.Outlined.LocationOn,\n            unselectedIcon = Icons.Outlined.LocationOn,\n            hasNews = false\n        ),\n        BottomNavigationItem(\n            title = \"Innstillinger\",\n            selectedIcon = Icons.Outlined.Settings,\n            unselectedIcon = Icons.Outlined.Settings,\n            hasNews = false\n        )\n    )\n    var selectedItemIndex by rememberSaveable {\n        mutableIntStateOf(0)\n    }\n    NavigationBar(containerColor = Color(0xFFCFE3F3)) {\n        items.forEachIndexed { index, item ->\n            NavigationBarItem(\n                colors = NavigationBarItemDefaults.colors(Color(0xFF1F3468)),\n                selected = selectedItemIndex == index,\n                onClick = {\n                    selectedItemIndex = index\n                    navController.navigate(item.title)\n                },\n                label = { Text(text = item.title) },\n                icon = {\n                    BadgedBox(\n                        badge = {\n                            if(item.badgeCount != null){\n                                Badge{\n                                    Text(text = item.badgeCount.toString())\n                                }}\n                            else if(item.hasNews){\n                                Badge()\n                            }\n                        }\n\n                    ) {\n\n\n                        Icon(\n                            imageVector = if (index == selectedItemIndex){\n                                item.selectedIcon\n                            }\n                            else{\n                                item.unselectedIcon\n                            },\n                            contentDescription = item.title\n\n                        )\n                    }\n\n                }\n            )\n\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/BottomBar.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/BottomBar.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/BottomBar.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/BottomBar.kt	(date 1715443589424)
@@ -70,9 +70,9 @@
             hasNews = false
         ),
         BottomNavigationItem(
-            title = "Innstillinger",
-            selectedIcon = Icons.Outlined.Settings,
-            unselectedIcon = Icons.Outlined.Settings,
+            title = "Manual",
+            selectedIcon = loadImageVector(resourceId = R.drawable.book),
+            unselectedIcon = loadImageVector(resourceId = R.drawable.book),
             hasNews = false
         )
     )
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionManualScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.InstructionManual\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.foundation.lazy.grid.items\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Home\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.graphics.ColorFilter.Companion.tint\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavController\nimport com.mapbox.maps.extension.style.expressions.dsl.generated.image\nimport no.uio.ifi.in2000.prosjekt.R\nimport no.uio.ifi.in2000.prosjekt.ui.InfoScreen.InfoCard\n\n\n\ndata class InstructionIcons(\n    val list : List<InstructionUI> = listOf(\n        InstructionUI(\"1\", \"Hjemskjerm\", Icons.Filled.Home),\n        InstructionUI(\"2\", \"Kart\", Icons.Filled.LocationOn)\n    )\n)\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InstructionManualScreen(navController : NavController, instructionIcons: InstructionIcons = InstructionIcons()) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFFBEDDF5)\n                ),\n                navigationIcon = {\n                    IconButton(\n                        onClick = { navController.popBackStack() }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color.Black\n                        )\n                    }\n                },\n                title = { Text(text = \"Instruksjonsmanual!\") })\n        },\n\n        ) { innerPadding ->\n        Column(\n            modifier = Modifier\n                .background(\n                    Color(0xFF1F3468)\n\n                )\n                .padding(top = 65.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        )\n        {\n            val img = painterResource(id = R.drawable.learn)\n            Icon(\n                imageVector = Icons.Filled.Info,\n                contentDescription = \"info\",\n                tint = Color(0xFFBEDDF5),\n                modifier = Modifier.size(100.dp)\n            )\n            LazyVerticalGrid(\n                modifier = Modifier.fillMaxSize(),\n                columns = GridCells.Fixed(1), // Use 2 columns instead of 4\n                horizontalArrangement = Arrangement.spacedBy(16.dp), // Space between columns\n                verticalArrangement = Arrangement.spacedBy(16.dp), // Space between rows\n                contentPadding = PaddingValues(16.dp), // Padding around the grid\n                content = {\n                    items(instructionIcons.list) { instructionData ->\n                        InstructionCard(navController, instructionData.id , instructionData)\n\n                    }\n                }\n            )\n        }\n\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InstructionCard(navController : NavController, id: String, instructionUI: InstructionUI) {\n    Card(\n        modifier = Modifier\n            //.fillMaxWidth()\n            .padding(10.dp), // Add padding to create space around the card\n        onClick = {\n            navController.navigate(\"InfoCard/$id\")\n        }\n    ) {\n\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .size(75.dp)\n                .background(Color(0xFFBEDDF5))\n\n\n        )\n        {\n            Text(\n                text = instructionUI.name,\n                fontSize = 12.sp,\n                color = Color.Black,\n\n                fontFamily = FontFamily.SansSerif,\n                fontWeight = FontWeight.Bold\n                ,\n                modifier = Modifier\n                    .padding(8.dp)\n                    .align(Alignment.CenterHorizontally) // Padding inside the column for the text\n            )\n\n            Icon(\n                modifier = Modifier\n                .align(Alignment.CenterHorizontally)\n                .size(50.dp), imageVector = instructionUI.icon, contentDescription = \"Icon\")\n\n        }\n    }\n}\n\n\n\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun HomeScreenManuals(navController: NavController){\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFFBEDDF5)\n                ),\n                navigationIcon = {\n                    IconButton(\n                        onClick = { navController.popBackStack() }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color.Black\n                        )\n                    }\n                },\n                title = { Text(text = \"Hjemskjerm!\") })\n        },\n\n        ) { innerPadding ->\n\n\n    Spacer(Modifier.size(16.dp))\n    Column(\n        Modifier.padding(top = 65.dp),\n        verticalArrangement = Arrangement.spacedBy(10.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(\"Velkommen til Havblikk! Denne veiledningen vil hjelpe deg med å navigere gjennom appen og bruke dens funksjoner effektivt.\")\n\n        Spacer(Modifier.size(16.dp))\n\n        ManualStep(\n            title = \"Legge til et nytt sted\",\n            description = \"Trykk på pluss-tegnet (+) som du finner på hovedskjermen under teksten 'Legg til dine favorittsteder!'. Deretter angir du nødvendig informasjon om stedet.\",\n            imagePainter = painterResource(id = R.drawable.add)\n        )\n\n        ManualStep(\n            title = \"Søke etter et sted\",\n            description = \"Bruk søkefeltet på toppen av hovedskjermen, skriv inn navnet på stedet du ønsker å finne.\",\n            imagePainter = painterResource(id = R.drawable.search)\n        )\n\n        ManualStep(\n            title = \"Administrere favorittsteder\",\n            description = \"Sveip kortet til siden for å vise en søppelbøtte-ikon. Du kan fortsette å dra for å slette eller trykke på ikonet for å bekrefte slettingen.\",\n            imagePainter = painterResource(id = R.drawable.trashcan)\n        )\n\n        ManualStep(\n            title = \"Posisjonsdeling\",\n            description = \"Hvis du har aktivert posisjonsdeling, vil du automatisk se en boks på skjermen som viser din nåværende posisjon.\",\n            imagePainter = painterResource(id = R.drawable.marker)\n        )\n\n        Spacer(modifier = Modifier.size(16.dp))\n\n        Text(\"Takk for at du bruker Havblikk. Vi håper denne veiledningen gjør din opplevelse med appen enklere og mer givende.\")\n    }\n}\n}\n\n\n@Composable\nfun ManualStep(title: String, description: String, imagePainter: Painter) {\n    Card(\n        modifier = Modifier.fillMaxWidth(),\n        // elevation = 4.dp\n    ) {\n        Row(\n            modifier = Modifier.padding(16.dp),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Image(\n                painter = imagePainter,\n                contentDescription = title,\n                modifier = Modifier.size(40.dp)\n            )\n            Spacer(Modifier.width(16.dp))\n            Column {\n                Text(title)\n                Text(description)\n            }\n        }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionManualScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionManualScreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionManualScreen.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionManualScreen.kt	(date 1715443639816)
@@ -1,5 +1,9 @@
 package no.uio.ifi.in2000.prosjekt.ui.InstructionManual
 
+<<<<<<< HEAD
+=======
+import android.annotation.SuppressLint
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.Arrangement
@@ -39,6 +43,10 @@
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.font.FontFamily
 import androidx.compose.ui.text.font.FontWeight
+<<<<<<< HEAD
+=======
+import androidx.compose.ui.text.style.TextAlign
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import androidx.navigation.NavController
@@ -50,8 +58,13 @@
 
 data class InstructionIcons(
     val list : List<InstructionUI> = listOf(
+<<<<<<< HEAD
         InstructionUI("1", "Hjemskjerm", Icons.Filled.Home),
         InstructionUI("2", "Kart", Icons.Filled.LocationOn)
+=======
+        InstructionUI("0", "Hjemskjerm", Icons.Filled.Home),
+        InstructionUI("1", "Kart", Icons.Filled.LocationOn)
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
     )
 )
 
@@ -82,7 +95,11 @@
         Column(
             modifier = Modifier
                 .background(
+<<<<<<< HEAD
                     Color(0xFF1F3468)
+=======
+                    Color(0xFF171729)
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
 
                 )
                 .padding(top = 65.dp),
@@ -90,13 +107,27 @@
             horizontalAlignment = Alignment.CenterHorizontally
         )
         {
+<<<<<<< HEAD
             val img = painterResource(id = R.drawable.learn)
+=======
+
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
             Icon(
                 imageVector = Icons.Filled.Info,
                 contentDescription = "info",
                 tint = Color(0xFFBEDDF5),
                 modifier = Modifier.size(100.dp)
             )
+<<<<<<< HEAD
+=======
+            Text(
+                "Velkommen til Havblikk! Denne veiledningen vil hjelpe deg med å navigere gjennom appen og bruke dens funksjoner effektivt. Trykk på et kortene under for å få mer informasjon om den skjermen.",
+                textAlign = TextAlign.Center,
+                //style = MaterialTheme.typography.body1,
+                modifier = Modifier.padding(bottom = 16.dp),
+                color = Color(0xFFFFFFFF)
+            )
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
             LazyVerticalGrid(
                 modifier = Modifier.fillMaxSize(),
                 columns = GridCells.Fixed(1), // Use 2 columns instead of 4
@@ -104,12 +135,35 @@
                 verticalArrangement = Arrangement.spacedBy(16.dp), // Space between rows
                 contentPadding = PaddingValues(16.dp), // Padding around the grid
                 content = {
+<<<<<<< HEAD
                     items(instructionIcons.list) { instructionData ->
                         InstructionCard(navController, instructionData.id , instructionData)
 
                     }
                 }
             )
+=======
+                    item {
+                        InstructionCard(navController, "0")
+
+                    }
+                    item{
+                        InstructionCard(navController, "1")
+                    }
+                    item{
+                        Text(
+                            "Takk for at du bruker Havblikk. Vi håper denne veiledningen gjør din opplevelse med appen enklere og mer givende.",
+                            textAlign = TextAlign.Center,
+                            //style = MaterialTheme.typography.body1,
+                            modifier = Modifier.padding(top = 16.dp),
+                            color = Color(0xFFFFFFFF)
+                        )
+                    }
+
+                }
+            )
+
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
         }
 
     }
@@ -117,6 +171,7 @@
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
+<<<<<<< HEAD
 fun InstructionCard(navController : NavController, id: String, instructionUI: InstructionUI) {
     Card(
         modifier = Modifier
@@ -124,6 +179,15 @@
             .padding(10.dp), // Add padding to create space around the card
         onClick = {
             navController.navigate("InfoCard/$id")
+=======
+fun InstructionCard(navController : NavController, id: String, instructionUI: InstructionUI = InstructionIcons().list[id.toInt()]) {
+    Card(
+        modifier = Modifier
+            .fillMaxWidth()
+            .padding(10.dp), // Add padding to create space around the card
+        onClick = {
+            navController.navigate("InstructionCard/$id")
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
         }
     ) {
 
@@ -151,8 +215,13 @@
 
             Icon(
                 modifier = Modifier
+<<<<<<< HEAD
                 .align(Alignment.CenterHorizontally)
                 .size(50.dp), imageVector = instructionUI.icon, contentDescription = "Icon")
+=======
+                    .align(Alignment.CenterHorizontally)
+                    .size(50.dp), imageVector = instructionUI.icon, contentDescription = "Icon")
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
 
         }
     }
@@ -161,7 +230,76 @@
 
 
 
+<<<<<<< HEAD
 
+=======
+@OptIn(ExperimentalMaterial3Api::class)
+@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
+@Composable
+fun MapUserManualScreen(navController: NavController) {
+    Scaffold(
+        topBar = {
+            TopAppBar(
+                colors = TopAppBarDefaults.topAppBarColors(
+                    containerColor = Color(0xFFBEDDF5)
+                ),
+                navigationIcon = {
+                    IconButton(
+                        onClick = { navController.popBackStack() }
+                    ) {
+                        Icon(
+                            imageVector = Icons.Filled.ArrowBack,
+                            contentDescription = "Back",
+                            tint = Color.Black
+                        )
+                    }
+                },
+                title = { Text(text = "Kartskjerm!") })
+        },) { innerPadding->
+        LazyColumn(Modifier.padding(top = 65.dp),
+            verticalArrangement = Arrangement.spacedBy(10.dp),
+            horizontalAlignment = Alignment.CenterHorizontally,
+            content = {
+                items(1){
+        Column(
+            modifier = Modifier.padding(16.dp),
+            verticalArrangement = Arrangement.spacedBy(10.dp),
+            horizontalAlignment = Alignment.CenterHorizontally
+        ) {
+
+            Text("Utforsk hvordan du bruker kartfunksjonene i appen.")
+
+
+
+            ManualStep(
+                title = "Søke etter steder",
+                description = "Skriv inn i søkefeltet for å gå direkte til et sted på kartet.",
+                imagePainter = painterResource(id = R.drawable.search)
+            )
+
+            ManualStep(
+                title = "Gå til din posisjon",
+                description = "Trykk på posisjonsikonet for å sentrere kartet på din nåværende posisjon.",
+                imagePainter = painterResource(id = R.drawable.marker)
+            )
+
+            ManualStep(
+                title = "Se varsler",
+                description = "Trykk på varselikonet for å se alle aktive varsler langs kysten.",
+                imagePainter = painterResource(id = R.drawable.warning)
+            )
+
+            ManualStep(
+                title = "Utforske punkter",
+                description = "Trykk på et hvilket som helst punkt på kartet for å få mer informasjon om det. Detaljert informasjon inkluderer UV, værvarsel fremover i tid, og mer.",
+                imagePainter = painterResource(id = R.drawable.marker)
+            )
+        }
+    }
+})
+    }
+}
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun HomeScreenManuals(navController: NavController){
@@ -188,6 +326,7 @@
         ) { innerPadding ->
 
 
+<<<<<<< HEAD
     Spacer(Modifier.size(16.dp))
     Column(
         Modifier.padding(top = 65.dp),
@@ -227,6 +366,53 @@
         Text("Takk for at du bruker Havblikk. Vi håper denne veiledningen gjør din opplevelse med appen enklere og mer givende.")
     }
 }
+=======
+
+        LazyColumn(Modifier.padding(top = 65.dp),
+            verticalArrangement = Arrangement.spacedBy(10.dp),
+            horizontalAlignment = Alignment.CenterHorizontally,
+            content = {
+                items(1){
+
+            Column(
+            modifier = Modifier.padding(16.dp),
+            verticalArrangement = Arrangement.spacedBy(10.dp),
+            horizontalAlignment = Alignment.CenterHorizontally
+        ) {
+                //Spacer(Modifier.size(50.dp))
+                Text("Utforsk hvordan du bruker hjemskjermfunksjonene i appen.")
+
+            ManualStep(
+                title = "Legge til et nytt sted",
+                description = "Trykk på pluss-tegnet (+) som du finner på hovedskjermen under teksten 'Legg til dine favorittsteder!'. Deretter angir du nødvendig informasjon om stedet.",
+                imagePainter = painterResource(id = R.drawable.add)
+            )
+
+            ManualStep(
+                title = "Søke etter et sted",
+                description = "Bruk søkefeltet på toppen av hovedskjermen, skriv inn navnet på stedet du ønsker å finne.",
+                imagePainter = painterResource(id = R.drawable.search)
+            )
+
+            ManualStep(
+                title = "Administrere favorittsteder",
+                description = "Sveip kortet til siden for å vise en søppelbøtte-ikon. Du kan fortsette å dra for å slette eller trykke på ikonet for å bekrefte slettingen.",
+                imagePainter = painterResource(id = R.drawable.trashcan)
+            )
+
+            ManualStep(
+                title = "Posisjonsdeling",
+                description = "Hvis du har aktivert posisjonsdeling, vil du automatisk se en boks på skjermen som viser din nåværende posisjon.",
+                imagePainter = painterResource(id = R.drawable.marker)
+            )
+
+            Spacer(modifier = Modifier.size(16.dp))
+
+        }
+    }})
+    }
+
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
 }
 
 
@@ -252,5 +438,9 @@
             }
         }
     }
+<<<<<<< HEAD
 }
 
+=======
+}
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.SharedPreferences\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.os.Build\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.result.ActivityResultLauncher\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.PreviewParameter\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea.DWSscreen\nimport no.uio.ifi.in2000.prosjekt.ui.InfoCards.InfoCards\nimport no.uio.ifi.in2000.prosjekt.ui.InfoScreen.InfoScreen\nimport no.uio.ifi.in2000.prosjekt.ui.InstructionManual.InstructionManualScreen\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MapScreen\nimport no.uio.ifi.in2000.prosjekt.ui.Settings.SettingsScreen\nimport no.uio.ifi.in2000.prosjekt.ui.home.HomeScreen\nimport no.uio.ifi.in2000.prosjekt.ui.home.HomeScreenViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederScreen\nimport no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme\nimport org.osmdroid.config.Configuration\n\nclass MainActivity : ComponentActivity() {\n    private lateinit var requestPermissionLauncher: ActivityResultLauncher<String>\n    private lateinit var sharedPreferences: SharedPreferences\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        requestPermissionLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->\n            if (isGranted) {\n                // Permission was granted\n                // Proceed with accessing the location or enabling location-based features\n                saveLocationPermission(true)\n            } else {\n                saveLocationPermission(false)\n            }\n            //initializeOSMdroidConfiguration()\n        }\n\n        sharedPreferences = getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE)\n\n        val isLocationPermissionGranted = sharedPreferences.getBoolean(\"location_permission_enabled\", false)\n        if (!isLocationPermissionGranted) {\n            // Request location permission only if it's not already granted\n        }\n\n        setContent {\n            MyApplicationTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    HavvarselApp(requestPermission = { requestLocationPermission() }, this)\n                }\n            }\n        }\n    }\n    private fun requestLocationPermission() {\n        // Trigger the permission request\n        requestPermissionLauncher.launch(\"android.permission.ACCESS_FINE_LOCATION\")    }\n    private fun saveLocationPermission(isGranted: Boolean) {\n        // Save the user's answer regarding location permission\n        sharedPreferences.edit().putBoolean(\"location_permission_enabled\", isGranted).apply()\n    }\n//    private fun initializeOSMdroidConfiguration() {\n//        val context = this\n//        val sharedPreferences = context.getSharedPreferences(\"OSMdroid\", Context.MODE_PRIVATE)\n//        Configuration.getInstance().load(context, sharedPreferences)\n//    }\n}\n\n\n\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun HavvarselApp(requestPermission: () -> Unit, activity: Activity) {\n    MyApplicationTheme {\n        val navController = rememberNavController()\n\n        NavHost(navController, startDestination = \"hjem\") {\n            composable(\"hjem\") {\n                HomeScreen(activity, navController)\n            }\n            composable(\"infoStederScreen/{cordinates}/{sted}\") { backStackEntry ->\n                InfoStederScreen(\n                    coordinate = backStackEntry.arguments?.getString(\"cordinates\") ?: \"59.15,10.75\",\n                    sted = backStackEntry.arguments?.getString(\"sted\") ?: \"Oslo\",\n                    navController\n                )\n            }\n            composable(\"Kart\") {\n                MapScreen(activity, navController)\n            }\n            composable(\"Lær\") {\n                InfoScreen(navController = navController)\n            }\n            composable(\"InfoCard/{id}\") { backStackEntry ->\n                InfoCards(id = backStackEntry.arguments?.getString(\"id\"), navController)\n            }\n            composable(\"Innstillinger\"){\n                InstructionManualScreen(navController)\n            }\n            composable(\"DetailedWeather/{coordinates}\"){backStackEntry ->\n                DWSscreen(navController, coordinate = backStackEntry.arguments?.getString(\"cordinates\") ?: \"59.15,10.75\",\n                )\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt	(date 1715443642255)
@@ -32,7 +32,13 @@
 import no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea.DWSscreen
 import no.uio.ifi.in2000.prosjekt.ui.InfoCards.InfoCards
 import no.uio.ifi.in2000.prosjekt.ui.InfoScreen.InfoScreen
+<<<<<<< HEAD
 import no.uio.ifi.in2000.prosjekt.ui.InstructionManual.InstructionManualScreen
+=======
+import no.uio.ifi.in2000.prosjekt.ui.InstructionManual.HomeScreenManuals
+import no.uio.ifi.in2000.prosjekt.ui.InstructionManual.InstructionManualScreen
+import no.uio.ifi.in2000.prosjekt.ui.InstructionManual.MapUserManualScreen
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
 import no.uio.ifi.in2000.prosjekt.ui.Map.MapScreen
 import no.uio.ifi.in2000.prosjekt.ui.Settings.SettingsScreen
 import no.uio.ifi.in2000.prosjekt.ui.home.HomeScreen
@@ -120,13 +126,28 @@
             composable("InfoCard/{id}") { backStackEntry ->
                 InfoCards(id = backStackEntry.arguments?.getString("id"), navController)
             }
+<<<<<<< HEAD
             composable("Innstillinger"){
+=======
+            composable("Manual"){
+>>>>>>> 16845349b606c06a209a27b2f2589d8a1c6508e3
                 InstructionManualScreen(navController)
             }
             composable("DetailedWeather/{coordinates}"){backStackEntry ->
-                DWSscreen(navController, coordinate = backStackEntry.arguments?.getString("cordinates") ?: "59.15,10.75",
+                DWSscreen(navController, coordinate = backStackEntry.arguments?.getString("coordinates") ?: "59.15,10.75",
                 )
             }
+            composable("InstructionCard/{id}"){backStackEntry ->
+                     run {
+                        val id = backStackEntry.arguments?.getString("id")
+                        if (id == "0") {
+                            HomeScreenManuals(navController = navController)
+                        }
+                         else{
+                            MapUserManualScreen(navController)
+                        }
+                    }
         }
     }
-}
\ No newline at end of file
+    }
+}
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionUI.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionUI.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionUI.kt
new file mode 100644
--- /dev/null	(date 1715443589423)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InstructionManual/InstructionUI.kt	(date 1715443589423)
@@ -0,0 +1,9 @@
+package no.uio.ifi.in2000.prosjekt.ui.InstructionManual
+
+import androidx.compose.ui.graphics.vector.ImageVector
+
+data class InstructionUI(
+    val id : String,
+    val name : String,
+    val icon : ImageVector
+)
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableDoubleStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport com.mapbox.geojson.Point\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport org.osmdroid.api.IGeoPoint\nimport org.osmdroid.util.GeoPoint\n\nclass MapViewModel : ViewModel() {\n    // Hold state for center and zoom\n    var mapCenter: Point by mutableStateOf(Point.fromLngLat(11.0, 59.0))\n    var zoomLevel: Double by mutableDoubleStateOf(9.0) // Default or restored value\n    private var _centerPoint = MutableStateFlow(Point.fromLngLat(11.0, 59.0))\n    var centerPoint: StateFlow<Point> = _centerPoint.asStateFlow()\n    // Update methods are only called when necessary, not on every user interaction\n    fun updateMapCenter(center: Point) {\n        _centerPoint.value = center\n    }\n    fun updateZoomLevel(zoom: Double) {\n        zoomLevel = zoom\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt	(date 1715443589424)
@@ -11,18 +11,21 @@
 import kotlinx.coroutines.flow.asStateFlow
 import org.osmdroid.api.IGeoPoint
 import org.osmdroid.util.GeoPoint
-
+data class cameraSettings(
+    var center: Point,
+    var zoom: Double
+)
 class MapViewModel : ViewModel() {
     // Hold state for center and zoom
-    var mapCenter: Point by mutableStateOf(Point.fromLngLat(11.0, 59.0))
-    var zoomLevel: Double by mutableDoubleStateOf(9.0) // Default or restored value
-    private var _centerPoint = MutableStateFlow(Point.fromLngLat(11.0, 59.0))
-    var centerPoint: StateFlow<Point> = _centerPoint.asStateFlow()
-    // Update methods are only called when necessary, not on every user interaction
+    private var _camera = MutableStateFlow(cameraSettings(Point.fromLngLat(10.0, 59.0), 10.0))
+    var camera: StateFlow<cameraSettings> = _camera.asStateFlow()
+    init {
+
+    }
     fun updateMapCenter(center: Point) {
-        _centerPoint.value = center
+        _camera.value.center = center
     }
     fun updateZoomLevel(zoom: Double) {
-        zoomLevel = zoom
+        _camera.value.zoom = zoom
     }
 }
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\nimport android.os.Build\nimport android.provider.ContactsContract.Data\nimport androidx.annotation.RequiresApi\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository\nimport no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository\nimport no.uio.ifi.in2000.prosjekt.Model.BigDataCloud\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.WindCurrentProjection\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.HavvarselUIState\nimport java.time.LocalDate\nimport java.time.LocalDateTime\nimport java.time.ZoneId\nimport java.time.format.DateTimeFormatter\n\ndata class DataUIState(\n    val dataProjectionMain: DataProjectionMain? = DataProjectionMain(),\n    val bigDataCloud: BigDataCloud? = BigDataCloud(),\n)\nclass MapScreenViewModel: ViewModel() {\n    private val _isPopupVisible = MutableStateFlow(false)\n    val isPopupVisible: StateFlow<Boolean> = _isPopupVisible.asStateFlow()\n\n    private val havvarselRepository: HavvarselRepository = HavvarselRepository()\n    private val bigDataCloudDataRepository: BigDataCloudRepository = BigDataCloudRepository()\n\n    private val _HVUIState = MutableStateFlow(DataUIState())\n    val HVUIState: StateFlow<DataUIState> = _HVUIState.asStateFlow()\n    \n    private val currentDateTime = LocalDateTime.now()\n    private val norwegianTimeZone = ZoneId.of(\"Europe/Oslo\")\n    private val norwegianDateTime = currentDateTime.atZone(norwegianTimeZone).toLocalDateTime()\n    private val roundedDateTime = norwegianDateTime.withMinute(0).withSecond(0).withNano(0)\n    private val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\")\n    private val formattedDateTime = formatter.format(roundedDateTime)\n    private val oneHourMoreDateTime = roundedDateTime.plusHours(1)\n    private val formattedOneHourMoreDateTime = formatter.format(oneHourMoreDateTime)\n\n    private val yesterdaysDate = LocalDate.now().minusDays(1).toString() // Eks-output = 2024-03-20\n    private val tomorrow = LocalDate.now().plusDays(1).toString()\n    init {\n\n    }\n    fun getNewData(lat : String, lon : String){\n        togglePopupVisibility()\n        viewModelScope.launch {\n            _HVUIState.update {\n                it.copy(\n                    dataProjectionMain = havvarselRepository.getHavvarselDataProjection(listOf(\"temperature\", \"salinity\",\"Uwind\",\"Vwind\",\"wind_direction\",\"wind_length\",\"wind_northwards\",\"wind_eastwards\",\"w\",\"current_direction\",\"current_length\",\"tke\",\"u_eastward\",\"v_northward\"), lon, lat, \"0\", formattedDateTime, formattedOneHourMoreDateTime),\n                    bigDataCloud = bigDataCloudDataRepository.getBigDataCloud(lat, lon),\n                )\n            }\n            togglePopupVisibility()\n        }\n    }\n    fun togglePopupVisibility() {\n        _isPopupVisible.value = !_isPopupVisible.value\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreenViewModel.kt	(date 1715443589423)
@@ -21,20 +21,17 @@
 import java.time.ZoneId
 import java.time.format.DateTimeFormatter
 
-data class DataUIState(
-    val dataProjectionMain: DataProjectionMain? = DataProjectionMain(),
-    val bigDataCloud: BigDataCloud? = BigDataCloud(),
-)
+data class DataUIStateHav(
+    val dataProjectionMain: DataProjectionMain? = DataProjectionMain())
 class MapScreenViewModel: ViewModel() {
     private val _isPopupVisible = MutableStateFlow(false)
     val isPopupVisible: StateFlow<Boolean> = _isPopupVisible.asStateFlow()
 
     private val havvarselRepository: HavvarselRepository = HavvarselRepository()
-    private val bigDataCloudDataRepository: BigDataCloudRepository = BigDataCloudRepository()
 
-    private val _HVUIState = MutableStateFlow(DataUIState())
-    val HVUIState: StateFlow<DataUIState> = _HVUIState.asStateFlow()
-    
+    private val _HVUIState = MutableStateFlow(DataUIStateHav())
+    val HVUIState: StateFlow<DataUIStateHav> = _HVUIState.asStateFlow()
+
     private val currentDateTime = LocalDateTime.now()
     private val norwegianTimeZone = ZoneId.of("Europe/Oslo")
     private val norwegianDateTime = currentDateTime.atZone(norwegianTimeZone).toLocalDateTime()
@@ -43,9 +40,6 @@
     private val formattedDateTime = formatter.format(roundedDateTime)
     private val oneHourMoreDateTime = roundedDateTime.plusHours(1)
     private val formattedOneHourMoreDateTime = formatter.format(oneHourMoreDateTime)
-
-    private val yesterdaysDate = LocalDate.now().minusDays(1).toString() // Eks-output = 2024-03-20
-    private val tomorrow = LocalDate.now().plusDays(1).toString()
     init {
 
     }
@@ -55,7 +49,6 @@
             _HVUIState.update {
                 it.copy(
                     dataProjectionMain = havvarselRepository.getHavvarselDataProjection(listOf("temperature", "salinity","Uwind","Vwind","wind_direction","wind_length","wind_northwards","wind_eastwards","w","current_direction","current_length","tke","u_eastward","v_northward"), lon, lat, "0", formattedDateTime, formattedOneHourMoreDateTime),
-                    bigDataCloud = bigDataCloudDataRepository.getBigDataCloud(lat, lon),
                 )
             }
             togglePopupVisibility()
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/HomeScreenViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.home\n\nimport android.app.Application\nimport android.content.Context\nimport android.os.Build\nimport android.util.Log\nimport androidx.annotation.RequiresApi\nimport androidx.datastore.core.DataStore\nimport androidx.datastore.preferences.core.Preferences\nimport androidx.datastore.preferences.core.edit\nimport androidx.datastore.preferences.core.stringPreferencesKey\nimport androidx.datastore.preferences.preferencesDataStore\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport io.ktor.serialization.kotlinx.json.json\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.first\nimport kotlinx.coroutines.flow.map\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport kotlinx.coroutines.launch\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.modules.SerializersModule\nimport no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository\nimport no.uio.ifi.in2000.prosjekt.Data.EnTur.EnTurRepository\nimport no.uio.ifi.in2000.prosjekt.Data.GeoNorge.GeoNorgeRepository\nimport no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository\nimport no.uio.ifi.in2000.prosjekt.Data.WeatherForecast.LocationForecastRepository\nimport no.uio.ifi.in2000.prosjekt.Model.BigDataCloud\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.FeaturesEnTur\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\nimport no.uio.ifi.in2000.prosjekt.ui.home.DataStoreManager.LOCATION_UI_STATE_KEY\nimport no.uio.ifi.in2000.prosjekt.ui.home.DataStoreManager.dataStore\nimport java.time.ZoneOffset\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\n\n\n\n\nobject DataStoreManager {\n    val LOCATION_UI_STATE_KEY = stringPreferencesKey(\"location_ui_state\")\n\n    val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = \"Cities\")\n}\n@Serializable\ndata class CombinedWeatherData(\n    val weatherData: WeatherData?,\n    val dataProjectionMain: DataProjectionMain?,\n    val bigDataCloud: BigDataCloud?,\n    val enTurLocationName: String? = null  // Legg til et felt for stedsnavnet fra EnTur API\n\n\n\n)\n@Serializable\ndata class LocationUIState(\n    //val locationDataMap: Map<String, WeatherData?> = emptyMap(),\n    //val seaTempratureMap: Map<String, Temperature?> = emptyMap(),\n    val combinedDataMap: Map<String, CombinedWeatherData> = emptyMap(),\n    val suggestion: List<FeaturesEnTur>? = emptyList()\n)\nval json = Json {\n    serializersModule = SerializersModule {\n        // If you have custom serializers, you can include them here\n    }\n    ignoreUnknownKeys = true // Useful for backward compatibility\n    encodeDefaults = true\n}\nfun serializeLocationUIState(state: LocationUIState): String {\n    return json.encodeToString(LocationUIState.serializer(), state)\n}\n\nfun deserializeLocationUIState(serializedData: String): LocationUIState {\n    return json.decodeFromString(LocationUIState.serializer(), serializedData)\n}\nsuspend fun Context.saveLocationUIState(state: LocationUIState) {\n    val serializedState = serializeLocationUIState(state)\n    dataStore.edit { preferences ->\n        preferences[LOCATION_UI_STATE_KEY] = serializedState\n    }\n}\nsuspend fun Context.loadLocationUIState(): LocationUIState? {\n    // This assumes you have an extension function or a utility to read from DataStore and deserialize\n    val preferences = dataStore.data.first() // Use .first() to get the current value, be mindful of the thread it's called on\n    val serializedState = preferences[LOCATION_UI_STATE_KEY]\n    return if (serializedState != null) deserializeLocationUIState(serializedState) else null\n}\n\nval Context.locationUIStateFlow: Flow<LocationUIState?>\n    get() = dataStore.data\n        .map { preferences ->\n            val serializedState = preferences[LOCATION_UI_STATE_KEY] ?: return@map null\n            deserializeLocationUIState(serializedState)\n        }\n\n@RequiresApi(Build.VERSION_CODES.O)\nclass HomeScreenViewModel(application: Application): AndroidViewModel(application){\n    private val locationForecastrepository: LocationForecastRepository = LocationForecastRepository()\n    private val havvarselRepository: HavvarselRepository = HavvarselRepository()\n    private  val bigDataCloudDataRepository: BigDataCloudRepository = BigDataCloudRepository()\n    private  val geoNorgeRepository: GeoNorgeRepository = GeoNorgeRepository()\n    private val enTurRepository: EnTurRepository = EnTurRepository()\n\n\n    private val _locationUIstate = MutableStateFlow(LocationUIState())\n    val locationUIState: StateFlow<LocationUIState> = _locationUIstate.asStateFlow()\n\n    init {\n        viewModelScope.launch {\n            val appContext = getApplication<Application>()\n            val storedState = appContext.loadLocationUIState()\n            if(storedState?.combinedDataMap == null) {\n                fetchWeatherData(\n                    listOf(\n                        Pair(\"59.9025\", \"10.7539\"),\n                        Pair(\"60.391\", \"5.3221\"),\n                        Pair(\"61.391\", \"5.3221\")\n                    )\n                )\n            }\n            else{\n                _locationUIstate.value = storedState\n            }}\n    }\n    fun triggerSaveState(context: Context, state: LocationUIState) {\n        viewModelScope.launch {\n            context.saveLocationUIState(state)\n        }\n    }\n\n    fun fetchSuggestions(locationName: String){\n        viewModelScope.launch {\n            val suggestionsTemp = enTurRepository.getEnTurAPI(locationName)?.features\n            Log.d(\"Suggestions\", \"Fetched ${suggestionsTemp?.size} suggestions\")\n            //_suggestionsUIstate.value = suggestionsTemp\n            _locationUIstate.update {currenState ->\n                currenState.copy(suggestion = suggestionsTemp)\n            }\n\n        }\n    }\n\n    fun clearSuggestions(){\n        viewModelScope.launch {\n            _locationUIstate.update {currenState ->\n                currenState.copy(suggestion = emptyList())\n            }\n        }\n    }\n\n    private fun fetchWeatherData(locations: List<Pair<String,String>>){\n        locations.forEach{location ->\n            viewModelScope.launch {\n                val weatherData = locationForecastrepository.getLocationForecast(location.first, location.second, null)\n\n                val nowWithOffset = ZonedDateTime.now(ZoneOffset.of(\"+01:00\"))\n                val oneHourLater = nowWithOffset.plusHours(1)\n                val formattedOneHourLater = oneHourLater.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)\n                val formattedNow = nowWithOffset.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)\n\n\n                val seaTemperatureAndSalinity = havvarselRepository.getHavvarselDataProjection(listOf(\"temperature\", \"salinity\"),location.second,location.first,null,formattedOneHourLater,formattedNow)\n                val bigDataCloudData = bigDataCloudDataRepository.getBigDataCloud(location.first, location.second)\n\n\n                _locationUIstate.update {currentState ->\n                    val updatedMap = currentState.combinedDataMap.toMutableMap()\n                    val locationKey = \"${location.first}, ${location.second}\"\n\n                    updatedMap[locationKey] = CombinedWeatherData(weatherData, seaTemperatureAndSalinity, bigDataCloudData)\n                    currentState.copy(combinedDataMap = updatedMap)\n                }\n            }\n        }\n    }\n    private fun addWeatherData(locationKey: String, weatherData: CombinedWeatherData){\n        _locationUIstate.update {currenState->\n            val updatedMap = currenState.combinedDataMap.toMutableMap().apply {\n                put(locationKey, weatherData)\n            }\n            currenState.copy(combinedDataMap = updatedMap)\n        }\n    }\n\n    fun addLocationByName(locationName: String, context: Context){\n        viewModelScope.launch {\n\n            val findSuggestion = _locationUIstate.value.suggestion?.find {\n                (it.properties.label == locationName)\n            }\n            val cordinates = findSuggestion?.geometry?.coordinates\n            val weatherData = locationForecastrepository.getLocationForecast(cordinates?.get(1).toString(), cordinates?.get(0).toString(), null)\n\n            val nowWithOffset = ZonedDateTime.now(ZoneOffset.of(\"+01:00\"))\n            val oneHourLater = nowWithOffset.plusHours(1)\n            val formattedOneHourLater = oneHourLater.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)\n            val formattedNow = nowWithOffset.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)\n\n            val seaTemperatureAndSalinity = havvarselRepository.getHavvarselDataProjection(listOf(\"temperature\", \"salinity\"),cordinates?.get(0).toString(),cordinates?.get(1).toString(),null,formattedOneHourLater,formattedNow)\n            val bigDataCloudData = bigDataCloudDataRepository.getBigDataCloud(cordinates?.get(1).toString(), cordinates?.get(0).toString())\n\n            addWeatherData(\"${cordinates?.get(1)}, ${cordinates?.get(0)}\", CombinedWeatherData(weatherData, seaTemperatureAndSalinity, bigDataCloudData, findSuggestion?.properties?.label))\n            triggerSaveState(context, locationUIState.value)\n        }\n    }\n    fun deleteLocation(locationCordinate: String){\n        _locationUIstate.update {currenState ->\n            val updatedMap = currenState.combinedDataMap.toMutableMap().apply {\n                remove(locationCordinate)\n            }\n            currenState.copy(combinedDataMap = updatedMap)\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/HomeScreenViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/HomeScreenViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/HomeScreenViewModel.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/HomeScreenViewModel.kt	(date 1715443589425)
@@ -11,13 +11,13 @@
 import androidx.datastore.preferences.core.stringPreferencesKey
 import androidx.datastore.preferences.preferencesDataStore
 import androidx.lifecycle.AndroidViewModel
-import androidx.lifecycle.ViewModel
+
 import androidx.lifecycle.viewModelScope
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.asStateFlow
 import kotlinx.coroutines.flow.update
-import io.ktor.serialization.kotlinx.json.json
+
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.first
 import kotlinx.coroutines.flow.map
@@ -56,8 +56,6 @@
     val bigDataCloud: BigDataCloud?,
     val enTurLocationName: String? = null  // Legg til et felt for stedsnavnet fra EnTur API
 
-
-
 )
 @Serializable
 data class LocationUIState(
@@ -117,17 +115,23 @@
             val appContext = getApplication<Application>()
             val storedState = appContext.loadLocationUIState()
             if(storedState?.combinedDataMap == null) {
-                fetchWeatherData(
-                    listOf(
-                        Pair("59.9025", "10.7539"),
-                        Pair("60.391", "5.3221"),
-                        Pair("61.391", "5.3221")
-                    )
+                val locMap = hashMapOf<Pair<String, String>, String?>(
+                    Pair("59.206048", "11.148937") to "Oslo",
+                    Pair("60.391789", "5.326067") to "Bergen"
                 )
             }
             else{
-                _locationUIstate.value = storedState
-            }}
+
+                val locationDataMap: Map<Pair<String, String>, String?> = storedState.combinedDataMap.map { (key, value) ->
+                    val coordinates = key.split(",").let {
+                        Pair(it[0].trim(), it[1].trim()) // Ensuring there is no extra whitespace
+                    }
+                    coordinates to value.enTurLocationName
+                }.toMap()
+                fetchWeatherData(locationDataMap)
+
+            }
+        }
     }
     fun triggerSaveState(context: Context, state: LocationUIState) {
         viewModelScope.launch {
@@ -155,11 +159,10 @@
         }
     }
 
-    private fun fetchWeatherData(locations: List<Pair<String,String>>){
-        locations.forEach{location ->
+    private fun fetchWeatherData(locations: Map<Pair<String,String>, String?>){
+        locations.forEach{(location, name) ->
             viewModelScope.launch {
                 val weatherData = locationForecastrepository.getLocationForecast(location.first, location.second, null)
-
                 val nowWithOffset = ZonedDateTime.now(ZoneOffset.of("+01:00"))
                 val oneHourLater = nowWithOffset.plusHours(1)
                 val formattedOneHourLater = oneHourLater.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
@@ -174,7 +177,7 @@
                     val updatedMap = currentState.combinedDataMap.toMutableMap()
                     val locationKey = "${location.first}, ${location.second}"
 
-                    updatedMap[locationKey] = CombinedWeatherData(weatherData, seaTemperatureAndSalinity, bigDataCloudData)
+                    updatedMap[locationKey] = CombinedWeatherData(weatherData, seaTemperatureAndSalinity, bigDataCloudData, name)
                     currentState.copy(combinedDataMap = updatedMap)
                 }
             }
Index: app/src/main/res/drawable-anydpi/mylocationgoogle2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable-anydpi/mylocationgoogle2.xml b/app/src/main/res/drawable-anydpi/mylocationgoogle2.xml
new file mode 100644
--- /dev/null	(date 1715443589428)
+++ b/app/src/main/res/drawable-anydpi/mylocationgoogle2.xml	(date 1715443589428)
@@ -0,0 +1,11 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="960"
+    android:viewportHeight="960"
+    android:tint="#333333"
+    android:alpha="0.6">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M434.33,944.67L434.33,868Q299,853 202.5,756.17Q106,659.33 92,525.67L15.33,525.67L15.33,434.33L92,434.33Q107,299 203.83,202.5Q300.67,106 434.33,92L434.33,15.33L525.67,15.33L525.67,92Q659.33,106 756.17,202.5Q853,299 868,434.33L944.67,434.33L944.67,525.67L868,525.67Q854,659.33 757.5,756.17Q661,853 525.67,868L525.67,944.67L434.33,944.67ZM479.89,766Q598.67,766 682.33,682.45Q766,598.9 766,480.11Q766,361.33 682.45,277.67Q598.9,194 480.11,194Q361.33,194 277.67,277.55Q194,361.1 194,479.89Q194,598.67 277.55,682.33Q361.1,766 479.89,766ZM480,633.33Q416,633.33 371.33,588.67Q326.67,544 326.67,480Q326.67,416 371.33,371.33Q416,326.67 480,326.67Q544,326.67 588.67,371.33Q633.33,416 633.33,480Q633.33,544 588.67,588.67Q544,633.33 480,633.33Z"/>
+</vector>
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.home\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.os.Build\nimport android.util.Log\nimport androidx.annotation.RequiresApi\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.expandVertically\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.shrinkVertically\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.gestures.detectHorizontalDragGestures\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.heightIn\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Delete\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\n\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\n\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.platform.LocalSoftwareKeyboardController\nimport androidx.compose.ui.text.input.ImeAction\n\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.ui.window.PopupProperties\nimport androidx.core.app.ActivityCompat\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport kotlinx.coroutines.delay\n\nimport no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme\nimport kotlin.math.abs\nimport kotlin.math.round\nimport kotlin.math.roundToInt\n\n@OptIn(ExperimentalComposeUiApi::class)\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun HomeScreen(activity: Activity, navController: NavController, homeScreenViewModel: HomeScreenViewModel = viewModel()) {\n    val context = LocalContext.current\n    val keyboardController = LocalSoftwareKeyboardController.current\n    var text by remember { mutableStateOf(\"\") }\n    val weatherState = homeScreenViewModel.locationUIState.collectAsState()\n\n    // En liste som tar inn slettede WeatherBox-objekter. De slettes fra lista kort tid etter de kommer inn, slik at man kan legge til samme sted igjen.\n    val deletedItem = remember { mutableStateListOf<String>() }\n    var boxCount by remember { mutableIntStateOf(weatherState.value.combinedDataMap.size) }\n\n    var showSuggestions by remember { mutableStateOf(false) }\n\n\n    // Oppdaterer antall elementer til mapen hele tiden, pga kan maks legge til tre favorittsteder.\n    LaunchedEffect(weatherState.value) {\n        boxCount = weatherState.value.combinedDataMap.size\n    }\n\n    Box( // lager en box, slik at lazycolumn kan overskride de andre UI-komponentene i appen.\n    ) {\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .background(Color(0xFF1F3468)),\n            horizontalAlignment = Alignment.CenterHorizontally\n\n        ) {\n            Spacer(modifier = Modifier.weight(1f))\n            TextField(\n                value = text,\n                onValueChange = { newValue ->\n                    text = newValue\n                    showSuggestions = newValue.isNotEmpty()\n                    if (newValue.isNotEmpty()) {\n                        homeScreenViewModel.fetchSuggestions(newValue)\n                    }\n                },\n                trailingIcon = {\n                    Icon(\n                        imageVector = Icons.Filled.LocationOn,\n                        contentDescription = \"Location\",\n                        modifier = Modifier.clickable { getLocation(context, activity, navController) }\n                    )\n                },\n                label = { Text(\"Skriv her\") },\n                modifier = Modifier\n                    .fillMaxWidth(0.9f),\n                shape = RoundedCornerShape(20.dp),\n                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() })\n            )\n\n            Spacer(modifier = Modifier.weight(0.2f))\n\n            Text(text = \"Legg til dine favorittsteder!\", color = Color.White)\n\n            // To lambda-funksjoner, som legger og fjerner til fra deleteItems-list.\n            val addToDeletedItem: (String) -> Unit = {item ->\n                deletedItem.add(item)\n            }\n            val deleteDeletedItem: (String) -> Unit = {item->\n                deletedItem.remove(item)\n            }\n            Column(\n                modifier = Modifier\n                    .fillMaxWidth(1f)\n                    .fillMaxHeight(0.5f)\n                //.background(Color.Black)\n            ) {\n                weatherState.value.combinedDataMap.forEach { (locationKey, weatherData) ->\n                    key(locationKey) {\n                        CustomSwipeToDeleteContainer(\n                            item = locationKey,\n                            onDelete = { location ->\n                                homeScreenViewModel.deleteLocation(location)\n                                homeScreenViewModel.triggerSaveState(context, homeScreenViewModel.locationUIState.value)\n                            },\n                            content = { location ->\n                                WeatherBox(\n                                    location = location,\n                                    combinedWeatherData = weatherData,\n                                    navController = navController,\n                                    addToDeletedItem = addToDeletedItem,\n                                    homeScreenViewModel = homeScreenViewModel,\n                                    deleteDeletedItem = deleteDeletedItem\n                                )\n                            }\n                        )\n                    }\n                }\n                AnimatedVisibility(\n                    visible = boxCount < 3,\n                    enter = expandVertically(),\n                    exit = shrinkVertically(animationSpec = tween(1000)),\n                ) {\n                    AddLocationUi(homeScreenViewModel = homeScreenViewModel)\n                }\n\n            }\n\n            Spacer(modifier = Modifier.weight(0.5f))\n            RunBottomBar(navController = navController) //Kjører navigationbar\n        }\n        if (showSuggestions) {\n            LazyColumn(\n                modifier = Modifier\n                    //.offset(y = 100.dp)\n                    .padding(top = 230.dp)\n                    .fillMaxWidth(0.8f)\n                    .background(Color(0xFFCFE3F3))\n                    .heightIn(max = 250.dp)\n                    .align(Alignment.TopCenter)\n\n            ) {\n                items(weatherState.value.suggestion ?: emptyList()) { suggestion ->\n                    Text(\n                        text = suggestion.properties.label,\n                        modifier = Modifier\n                            .fillMaxWidth()\n                            .clickable {\n                                text = suggestion.properties.label\n                                showSuggestions = false\n                                homeScreenViewModel.clearSuggestions()\n                                Log.d(\"kordinater\", suggestion.geometry.coordinates.toString())\n                                val kordinatString =\n                                    suggestion.geometry.coordinates[1] + \", \" + suggestion.geometry.coordinates[0]\n                                navController.navigate(\"infoStederScreen/${kordinatString}/${text}\")\n\n                            }\n                            .padding(8.dp),\n                    )\n                }\n            }\n        }\n    }\n}\nprivate const val REQUEST_LOCATION_PERMISSION_CODE = 0\n\nfun getLocation(context : Context, activity: Activity, navController: NavController){\n    var fusedLocationClient : FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)\n    val sharedPreferences = context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE) // User preferences\n    val isLocationPermissionGranted = sharedPreferences.getBoolean(\"location_permission_enabled\", false)\n    if (!isLocationPermissionGranted && (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED ||\n                ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {\n        navController.navigate(\"Settings\")\n\n        ActivityCompat.requestPermissions(\n            activity,\n            arrayOf<String>(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ),\n            100\n        )\n    }\n    else if(ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_FINE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_COARSE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED){\n        ActivityCompat.requestPermissions(\n            activity,\n            arrayOf<String>(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ),\n            100\n        )\n\n    }\n    else{\n        if(isLocationPermissionGranted) {\n\n            fusedLocationClient.lastLocation\n                .addOnSuccessListener { location: Location? ->\n                    Log.d(\"Location\", location.toString())\n                }\n\n            return\n        }\n        else{\n            navController.navigate(\"Innstillinger\")\n        }\n    }\n}\n@Composable\n@ExperimentalMaterial3Api\nfun CustomSwipeToDismiss(\n    onSwiped: () -> Unit,\n    onDeleted: () -> Unit,\n    background: @Composable RowScope.() -> Unit,\n    dismissContent: @Composable RowScope.() -> Unit,\n    modifier: Modifier = Modifier,\n) {\n    var isSwiped by remember {\n        mutableStateOf(false)\n    }\n\n    var offsetX by remember { mutableFloatStateOf(0f) }\n    val animatedOffset by animateFloatAsState(targetValue = offsetX, label = \"\")\n    val screenWidth = LocalConfiguration.current.screenWidthDp\n    val screenWidthPx = with(LocalDensity.current) { screenWidth.dp.toPx() }\n\n    Box(\n        modifier.pointerInput(Unit) {\n\n            detectHorizontalDragGestures(\n                onHorizontalDrag = { change, dragAmount ->\n                    change.consume()\n\n                    // If the background is revealed, allow the user to swipe it back out to the right\n                    if (dragAmount > 0f) {\n                        if (isSwiped && offsetX < 0f) {\n                            if ((offsetX + dragAmount) > 0f) {\n                                offsetX = 0f\n                            } else {\n                                offsetX += dragAmount\n                            }\n                        }\n                        return@detectHorizontalDragGestures\n                    }\n\n                    // Store swipe offset from right to left\n                    offsetX += dragAmount\n                },\n                onDragEnd = {\n                    val absOffsetX = abs(offsetX) // compare using positive value\n\n                    // If the user has dragged the item more than half of the screen width, delete it\n                    if (absOffsetX >= screenWidthPx / 2 && absOffsetX < screenWidthPx) {\n                        offsetX = -(screenWidthPx)\n                        onDeleted()\n                    }\n\n                    // If the user has dragged the item more than a fifth of the screen width, swipe it to reveal background\n                    else if (absOffsetX >= screenWidthPx / 5 && absOffsetX < screenWidthPx / 2) {\n                        offsetX = -(60.dp.toPx())\n                        isSwiped = true\n                        onSwiped()\n                    } else {\n                        offsetX = 0f\n                    }\n                }\n            )\n        }\n    ) {\n        Row(\n            content = background, modifier = Modifier\n                .matchParentSize()\n                .clickable {\n                    offsetX = -(screenWidthPx)\n                    onDeleted()\n                }\n        )\n        Row(content = dismissContent,\n            modifier = Modifier.offset {\n                IntOffset(animatedOffset.roundToInt(), 0)\n            })\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun <T> CustomSwipeToDeleteContainer(\n    item: T, onDelete: (T) -> Unit, animationDuration: Int = 500, content: @Composable (T) -> Unit\n) {\n\n    var isRemoved by remember {\n        mutableStateOf(false)\n    }\n    var isActive by remember {\n        mutableStateOf(false)\n    }\n\n    LaunchedEffect(isRemoved) {\n        if (isRemoved) {\n            delay(animationDuration.toLong())\n            onDelete(item)\n        }\n    }\n\n    AnimatedVisibility(\n        visible = !isRemoved, exit = shrinkVertically(\n            animationSpec = tween(durationMillis = animationDuration), shrinkTowards = Alignment.Top\n        ) + fadeOut()\n    ) {\n        CustomSwipeToDismiss(\n            onSwiped = {\n                isActive = true\n            },\n            onDeleted = {\n                isRemoved = true\n            },\n            background = {\n                CustomDeleteBackground()\n\n\n            },\n            dismissContent = { content(item) },\n        )\n    }\n}\n\n@Composable\nfun CustomDeleteBackground(\n) {\n    Card(\n        modifier = Modifier\n            .padding(8.dp)\n            .fillMaxWidth(1f)\n            .height(80.dp), // Setter akkurat likt som WeatherBox, slik at den røde bakgrunnsfargen ikke er synlig når brukeren ikke swiper.\n        colors = CardDefaults.cardColors(Color.Red)\n    ) {\n        // Lager en Box for å plassere ikonet på høyre siden.\n        Box(\n            contentAlignment = Alignment.CenterEnd,\n            modifier = Modifier\n                .fillMaxSize() // Fyll hele Card\n        ) {\n            Icon(\n                imageVector = Icons.Default.Delete,\n                contentDescription = \"Slett\",\n                modifier = Modifier\n                    .padding(16.dp), // Padding inne i Box\n                tint = Color.White\n            )\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun WeatherBox(location: String,\n               combinedWeatherData: CombinedWeatherData?,\n               navController: NavController,\n               addToDeletedItem: (String) -> Unit,\n               homeScreenViewModel: HomeScreenViewModel,\n               deleteDeletedItem: (String) -> Unit)\n{\n    val context = LocalContext.current\n    val sted = combinedWeatherData?.bigDataCloud?.city\n    val placeName = combinedWeatherData?.enTurLocationName\n    val placeNameSplit = placeName?.split(\",\")\n\n    Card(\n        modifier = Modifier\n            .padding(8.dp)\n            .fillMaxWidth(1f)\n            .heightIn(min = 80.dp)\n            .clickable {\n                Log.d(\"Cordinates\", location)\n                navController.navigate(\"infoStederScreen/${location}/${sted}\")\n            },\n        colors = CardDefaults.cardColors(\n            containerColor = Color(0xFFBEDDF5)\n        )\n    ) {\n        Row(\n            modifier = Modifier\n                .heightIn(min = 80.dp)\n                .fillMaxWidth(),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Column(modifier = Modifier.weight(0.27f).background(Color(0xFFBEDDF5)).padding(10.dp)) {\n\n                    if (placeNameSplit != null) {\n                        Text(\n\n                            text = if(placeNameSplit.size > 1)\"\" + (placeNameSplit?.get(1) ?: \"\") else \"Sted\",\n                            color = Color.Black,\n                            style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp)\n                        )\n                    }\n\n                    Text(\n                        text = placeNameSplit?.get(0) ?: \"\",\n                        color = Color.Black,\n                        style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                    )\n                }\n\n            val airTemperature = combinedWeatherData?.weatherData?.properties?.timeseries?.firstOrNull()?.data?.instant?.details?.get(\"air_temperature\")\n           // Spacer(modifier = Modifier.weight(1f)) // Legger til horisontalt mellomrom\n            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {\n                Text(\n                    text = \"LuftTemp:\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp)\n                )\n                Text(\n                    text = \"${airTemperature}°C\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                )\n            }\n            //Spacer(modifier = Modifier.weight(1f))\n\n            val seaTemperature = combinedWeatherData?.dataProjectionMain?.data?.get(0)?.data?.find{it.key == \"temperature\"}?.value\n            val doubleSeaTemperature = seaTemperature?.toDouble()\n            val roundSeaTemperature = doubleSeaTemperature?.let{ round(it)}\n            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {\n                Text(\n                    text = \"SjøTemp:\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp)\n                )\n                Text(\n                    text = \"${roundSeaTemperature}°C\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                )\n            }\n           // Spacer(modifier = Modifier.weight(1f))\n            val seaSalinity = combinedWeatherData?.dataProjectionMain?.data?.get(0)?.data?.find{it.key == \"salinity\"}?.value\n            val doubleSeaSalinity = seaSalinity?.toDouble()\n            val roundSeaSalinity = doubleSeaSalinity?.let{ round(it)}\n            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {\n                Text(\n                    text = \"Salinity:\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp),\n\n                )\n                Text(\n                    text = \"${roundSeaSalinity}‰\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                )\n            }\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun AddLocationUi(homeScreenViewModel: HomeScreenViewModel){\n    val context = LocalContext.current\n    var showInput by remember { mutableStateOf(false) }\n    var newLocationName by remember{ mutableStateOf(\"\") }\n    val keyboardController = LocalSoftwareKeyboardController.current\n\n    val locationUIState by homeScreenViewModel.locationUIState.collectAsState()\n\n\n    if (!showInput){\n        Card(\n            modifier = Modifier\n                .padding(8.dp)\n                .heightIn(min = 80.dp)\n                .fillMaxWidth(1f),\n            colors = CardDefaults.cardColors(\n                containerColor = Color.White\n            )\n        ) {\n            Row(\n                modifier = Modifier\n                    .heightIn(min = 80.dp)\n                    .fillMaxWidth(),\n                horizontalArrangement = Arrangement.Center ,\n                verticalAlignment = Alignment.CenterVertically\n            ){\n                IconButton(\n                    onClick = { showInput = true }\n                )\n                {\n                    Icon(\n                        imageVector = Icons.Filled.Add,\n                        contentDescription = \"Legg til\",\n                        modifier = Modifier.size(40.dp),\n                        tint = Color.Black\n                    )\n\n                }\n            }\n        }\n    }else{\n        val scrollState = rememberScrollState()\n        Popup(\n            onDismissRequest = {},\n            properties = PopupProperties(\n                focusable = true,\n                dismissOnBackPress = false,\n                dismissOnClickOutside = false,\n                excludeFromSystemGesture = true,\n            )\n        )\n        {\n            Box(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .background(Color.Transparent.copy(alpha = 0.8f))\n\n            ) {\n                Card (\n                    shape = RoundedCornerShape(20.dp),\n                    modifier = Modifier\n                        .align(Alignment.TopCenter)\n                        .padding(top = 72.dp)\n                        .fillMaxWidth(0.9f)\n                        .fillMaxHeight(0.5f),\n                    colors = CardDefaults.cardColors(containerColor = Color(0xFF1F3468))\n\n\n                ){\n                    Row(\n                        modifier = Modifier\n\n                    ) {\n                        IconButton(\n                            onClick = {\n                                showInput = false\n                                homeScreenViewModel.clearSuggestions()\n                                newLocationName = \"\"\n                            }\n                        )\n                        {\n                            Icon(\n                                imageVector = Icons.Filled.Clear,\n                                contentDescription = \"Tilbake\",\n                                modifier = Modifier.size(40.dp), // Juster størrelsen etter behov\n                                tint = Color.White // Juster fargen etter ønske\n                            )\n                        }\n                    }\n                    Row(\n                        horizontalArrangement = Arrangement.Center ,\n                        verticalAlignment = Alignment.CenterVertically,\n                        modifier = Modifier\n                            .fillMaxSize()\n                    ){\n                        Column(\n                            modifier = Modifier\n                                .padding(top = 24.dp)\n                                .fillMaxSize(),\n\n                            horizontalAlignment = Alignment.CenterHorizontally,\n\n                            ) {\n                            TextField(\n                                value = newLocationName,\n\n                                onValueChange = {newLocationName = it\n                                    homeScreenViewModel.fetchSuggestions(it)\n                                    if (newLocationName.isNotEmpty()){\n                                        homeScreenViewModel.clearSuggestions()\n                                    }\n\n                                },\n\n                                shape = RoundedCornerShape(20.dp),\n                                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                                keyboardActions = KeyboardActions(onDone = {\n                                    if (newLocationName.isNotEmpty()){\n                                        homeScreenViewModel.addLocationByName(newLocationName, context)\n                                        newLocationName = \"\"\n                                        showInput = false\n                                        keyboardController?.hide()\n                                    }\n                                }\n                                ),\n                                modifier = Modifier\n                                    .fillMaxWidth(0.9f),\n                                label = { Text(\"Legg til favorittsted!\")},\n                            )\n                            Column(\n                                modifier = Modifier\n                                    .verticalScroll(scrollState)\n                                    .padding(3.dp)\n\n\n                            ) {\n                                locationUIState.suggestion?.forEach{suggestion->\n                                    Text(\n                                        text = suggestion.properties.label,\n                                        modifier = Modifier\n                                            .background(Color(0xFFCFE3F3))\n                                            .fillMaxWidth(0.8f)\n                                            .clickable {\n                                                newLocationName = suggestion.properties.label\n                                                homeScreenViewModel.addLocationByName(\n                                                    newLocationName, context\n                                                )\n\n                                                homeScreenViewModel.clearSuggestions()\n                                                showInput = false\n\n                                            }\n                                            .padding(8.dp)\n                                    )\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt	(date 1715443589425)
@@ -14,12 +14,16 @@
 import androidx.compose.animation.expandVertically
 import androidx.compose.animation.fadeOut
 import androidx.compose.animation.shrinkVertically
+import androidx.compose.foundation.ExperimentalFoundationApi
+import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.gestures.detectHorizontalDragGestures
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
+
+
 import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.RowScope
 import androidx.compose.foundation.layout.Spacer
@@ -31,6 +35,7 @@
 import androidx.compose.foundation.layout.offset
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.layout.width
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.lazy.items
 import androidx.compose.foundation.rememberScrollState
@@ -48,16 +53,18 @@
 import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.Icon
 import androidx.compose.material3.IconButton
+import androidx.compose.material3.Scaffold
 import androidx.compose.material3.Text
 import androidx.compose.material3.TextField
+import androidx.compose.material3.TopAppBar
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.SideEffect
 import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.key
 import androidx.compose.runtime.mutableFloatStateOf
 import androidx.compose.runtime.mutableIntStateOf
-import androidx.compose.runtime.mutableStateListOf
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
 
@@ -66,105 +73,119 @@
 import androidx.compose.ui.ExperimentalComposeUiApi
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.toArgb
 
 import androidx.compose.ui.input.pointer.pointerInput
+import androidx.compose.ui.layout.ContentScale
+import androidx.compose.ui.layout.onGloballyPositioned
 import androidx.compose.ui.platform.LocalConfiguration
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.platform.LocalDensity
 import androidx.compose.ui.platform.LocalSoftwareKeyboardController
+import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.input.ImeAction
 
-import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.IntOffset
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import androidx.compose.ui.window.Popup
 import androidx.compose.ui.window.PopupProperties
 import androidx.core.app.ActivityCompat
+import androidx.core.view.WindowCompat
 import androidx.lifecycle.viewmodel.compose.viewModel
 import androidx.navigation.NavController
 import com.google.android.gms.location.FusedLocationProviderClient
 import com.google.android.gms.location.LocationServices
 import kotlinx.coroutines.delay
+import no.uio.ifi.in2000.prosjekt.R
 
-import no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme
+
 import kotlin.math.abs
 import kotlin.math.round
 import kotlin.math.roundToInt
 
-@OptIn(ExperimentalComposeUiApi::class)
-@RequiresApi(Build.VERSION_CODES.O)
+@Composable
+fun Logo(){
+    Column(
+        modifier = Modifier
+    ) {
+        Image(
+            painter = painterResource(id = R.drawable.logo),
+            contentDescription = "Logo",
+            modifier = Modifier
+                .fillMaxWidth()
+                .fillMaxHeight(),
+
+            contentScale = ContentScale.FillWidth
+        )
+    }
+}
 @Composable
+@OptIn(ExperimentalComposeUiApi::class, ExperimentalFoundationApi::class,
+    ExperimentalMaterial3Api::class
+)
 fun HomeScreen(activity: Activity, navController: NavController, homeScreenViewModel: HomeScreenViewModel = viewModel()) {
     val context = LocalContext.current
     val keyboardController = LocalSoftwareKeyboardController.current
     var text by remember { mutableStateOf("") }
     val weatherState = homeScreenViewModel.locationUIState.collectAsState()
-
-    // En liste som tar inn slettede WeatherBox-objekter. De slettes fra lista kort tid etter de kommer inn, slik at man kan legge til samme sted igjen.
-    val deletedItem = remember { mutableStateListOf<String>() }
-    var boxCount by remember { mutableIntStateOf(weatherState.value.combinedDataMap.size) }
-
+    val boxCount by remember { mutableIntStateOf(weatherState.value.combinedDataMap.size) }
     var showSuggestions by remember { mutableStateOf(false) }
 
-
-    // Oppdaterer antall elementer til mapen hele tiden, pga kan maks legge til tre favorittsteder.
-    LaunchedEffect(weatherState.value) {
-        boxCount = weatherState.value.combinedDataMap.size
-    }
-
-    Box( // lager en box, slik at lazycolumn kan overskride de andre UI-komponentene i appen.
-    ) {
-        Column(
-            modifier = Modifier
-                .fillMaxWidth()
-                .background(Color(0xFF1F3468)),
-            horizontalAlignment = Alignment.CenterHorizontally
+    Scaffold(
+        bottomBar = { RunBottomBar(navController = navController)} // Setter bottomBar i Scaffold
+    ) { paddingValues ->
+        Box(
+            modifier = Modifier
+                .fillMaxSize()
+                .padding(bottom = paddingValues.calculateBottomPadding()) // Gir plass for BottomBar
+        ) {
+            LazyColumn(
+                modifier = Modifier
+                    .fillMaxSize()
+                    .background(Color(0xFF171729)),
+                horizontalAlignment = Alignment.CenterHorizontally
+            ) {
+                item {
+                    Logo()
+                }
 
-        ) {
-            Spacer(modifier = Modifier.weight(1f))
-            TextField(
-                value = text,
-                onValueChange = { newValue ->
-                    text = newValue
-                    showSuggestions = newValue.isNotEmpty()
-                    if (newValue.isNotEmpty()) {
-                        homeScreenViewModel.fetchSuggestions(newValue)
-                    }
-                },
-                trailingIcon = {
-                    Icon(
-                        imageVector = Icons.Filled.LocationOn,
-                        contentDescription = "Location",
-                        modifier = Modifier.clickable { getLocation(context, activity, navController) }
-                    )
-                },
-                label = { Text("Skriv her") },
-                modifier = Modifier
-                    .fillMaxWidth(0.9f),
-                shape = RoundedCornerShape(20.dp),
-                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
-                keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() })
-            )
-
-            Spacer(modifier = Modifier.weight(0.2f))
-
-            Text(text = "Legg til dine favorittsteder!", color = Color.White)
-
-            // To lambda-funksjoner, som legger og fjerner til fra deleteItems-list.
-            val addToDeletedItem: (String) -> Unit = {item ->
-                deletedItem.add(item)
-            }
-            val deleteDeletedItem: (String) -> Unit = {item->
-                deletedItem.remove(item)
-            }
-            Column(
-                modifier = Modifier
-                    .fillMaxWidth(1f)
-                    .fillMaxHeight(0.5f)
-                //.background(Color.Black)
-            ) {
-                weatherState.value.combinedDataMap.forEach { (locationKey, weatherData) ->
+                //item {Spacer(modifier = Modifier.height(30.dp))}
+
+                stickyHeader {
+                    TextField(
+                        value = text,
+                        onValueChange = { newValue ->
+                            text = newValue
+                            showSuggestions = newValue.isNotEmpty()
+                            if (newValue.isNotEmpty()) {
+                                homeScreenViewModel.fetchSuggestions(newValue)
+                            }
+                        },
+                        trailingIcon = {
+                            Icon(
+                                imageVector = Icons.Filled.LocationOn,
+                                contentDescription = "Location",
+                                modifier = Modifier.clickable {
+                                    getLocation(context, activity, navController){ location: Location ->
+
+                                    } }
+                            )
+                        },
+                        label = { Text("Skriv her") },
+                        modifier = Modifier
+                            .fillMaxWidth(0.9f),
+                        shape = RoundedCornerShape(20.dp),
+                        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
+                        keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() })
+                    )
+                }
+                item{
+                    Spacer(modifier = Modifier.height(8.dp))
+                }
+                item { Text(text = "Legg til dine favorittsteder!", color = Color.White)}
+
+                items(weatherState.value.combinedDataMap.entries.toList()) { (locationKey, weatherData) ->
                     key(locationKey) {
                         CustomSwipeToDeleteContainer(
                             item = locationKey,
@@ -177,55 +198,97 @@
                                     location = location,
                                     combinedWeatherData = weatherData,
                                     navController = navController,
-                                    addToDeletedItem = addToDeletedItem,
                                     homeScreenViewModel = homeScreenViewModel,
-                                    deleteDeletedItem = deleteDeletedItem
-                                )
+
+                                    )
                             }
                         )
                     }
                 }
-                AnimatedVisibility(
-                    visible = boxCount < 3,
-                    enter = expandVertically(),
-                    exit = shrinkVertically(animationSpec = tween(1000)),
-                ) {
-                    AddLocationUi(homeScreenViewModel = homeScreenViewModel)
+                item {
+                    AnimatedVisibility(
+                        visible = boxCount < 25,
+                        enter = expandVertically(),
+                        exit = shrinkVertically(animationSpec = tween(1000))
+                    ) {
+                        AddLocationUi(homeScreenViewModel = homeScreenViewModel)
+                    }
                 }
-
             }
 
-            Spacer(modifier = Modifier.weight(0.5f))
-            RunBottomBar(navController = navController) //Kjører navigationbar
-        }
-        if (showSuggestions) {
-            LazyColumn(
-                modifier = Modifier
-                    //.offset(y = 100.dp)
-                    .padding(top = 230.dp)
-                    .fillMaxWidth(0.8f)
-                    .background(Color(0xFFCFE3F3))
-                    .heightIn(max = 250.dp)
-                    .align(Alignment.TopCenter)
-
-            ) {
-                items(weatherState.value.suggestion ?: emptyList()) { suggestion ->
-                    Text(
-                        text = suggestion.properties.label,
-                        modifier = Modifier
-                            .fillMaxWidth()
-                            .clickable {
-                                text = suggestion.properties.label
-                                showSuggestions = false
-                                homeScreenViewModel.clearSuggestions()
-                                Log.d("kordinater", suggestion.geometry.coordinates.toString())
-                                val kordinatString =
-                                    suggestion.geometry.coordinates[1] + ", " + suggestion.geometry.coordinates[0]
-                                navController.navigate("infoStederScreen/${kordinatString}/${text}")
-
-                            }
-                            .padding(8.dp),
-                    )
+            if (showSuggestions) {
+                Box(
+                    modifier = Modifier
+                        .matchParentSize()
+                        .background(Color(0xFF1F3468).copy(alpha = 1f))
+                        .clickable {
+                            showSuggestions = false
+                            text = ""
+                            keyboardController?.hide()
+                            homeScreenViewModel.clearSuggestions()
+                        }
+                ) {
+                    Column(
+                        modifier = Modifier
+                            .fillMaxWidth()
+                            .padding(top = 16.dp),
+                        horizontalAlignment = Alignment.CenterHorizontally
+                    ) {
+                        TextField(
+                            value = text,
+                            onValueChange = { newValue ->
+                                text = newValue
+                                showSuggestions = newValue.isNotEmpty()
+                                if (newValue.isNotEmpty()) {
+                                    homeScreenViewModel.fetchSuggestions(newValue)
+                                }
+                            },
+                            trailingIcon = {
+                                Icon(
+                                    imageVector = Icons.Filled.LocationOn,
+                                    contentDescription = "Location",
+                                    modifier = Modifier.clickable {
+                                        getLocation(context, activity, navController){location: Location ->
+
+                                        } }
+                                )
+                            },
+                            label = { Text("Skriv her") },
+                            modifier = Modifier
+                                .fillMaxWidth(0.9f),
+                            shape = RoundedCornerShape(20.dp),
+                            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
+                            keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() })
+                        )
+                    }
+
+                    LazyColumn(
+                        modifier = Modifier
+                            .padding(top = 80.dp)
+                            .fillMaxWidth(0.8f)
+                            .background(Color(0xFFCFE3F3))
+                            .heightIn(max = 250.dp)
+                            .align(Alignment.TopCenter)
+                    ) {
+
+                        items(weatherState.value.suggestion ?: emptyList()) { suggestion ->
+                            Text(
+                                text = suggestion.properties.label,
+                                modifier = Modifier
+                                    .fillMaxWidth()
+                                    .clickable {
+                                        text = suggestion.properties.label
+                                        showSuggestions = false
+                                        homeScreenViewModel.clearSuggestions()
+                                        val coordinates = suggestion.geometry.coordinates
+                                        val coordinateString =
+                                            "${coordinates[1]}, ${coordinates[0]}"
+                                        navController.navigate("infoStederScreen/$coordinateString/$text")
+                                    }
+                                    .padding(8.dp),
+                            )
+                        }
+                    }
                 }
             }
         }
@@ -233,13 +296,13 @@
 }
 private const val REQUEST_LOCATION_PERMISSION_CODE = 0
 
-fun getLocation(context : Context, activity: Activity, navController: NavController){
-    var fusedLocationClient : FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)
+fun getLocation(context : Context, activity: Activity, navController: NavController, locationCallback: (Location) -> Unit){
+    val fusedLocationClient : FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)
     val sharedPreferences = context.getSharedPreferences("MyPrefs", Context.MODE_PRIVATE) // User preferences
     val isLocationPermissionGranted = sharedPreferences.getBoolean("location_permission_enabled", false)
     if (!isLocationPermissionGranted && (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED ||
                 ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {
-        navController.navigate("Settings")
+        navController.navigate("Innstillinger")
 
         ActivityCompat.requestPermissions(
             activity,
@@ -272,7 +335,9 @@
 
             fusedLocationClient.lastLocation
                 .addOnSuccessListener { location: Location? ->
-                    Log.d("Location", location.toString())
+                    if (location != null) {
+                        locationCallback(location)
+                    }
                 }
 
             return
@@ -347,8 +412,10 @@
             content = background, modifier = Modifier
                 .matchParentSize()
                 .clickable {
-                    offsetX = -(screenWidthPx)
-                    onDeleted()
+                    if (isSwiped) {
+                        offsetX = -(screenWidthPx)
+                        onDeleted()
+                    }
                 }
         )
         Row(content = dismissContent,
@@ -392,8 +459,6 @@
             },
             background = {
                 CustomDeleteBackground()
-
-
             },
             dismissContent = { content(item) },
         )
@@ -432,9 +497,9 @@
 fun WeatherBox(location: String,
                combinedWeatherData: CombinedWeatherData?,
                navController: NavController,
-               addToDeletedItem: (String) -> Unit,
                homeScreenViewModel: HomeScreenViewModel,
-               deleteDeletedItem: (String) -> Unit)
+)
+
 {
     val context = LocalContext.current
     val sted = combinedWeatherData?.bigDataCloud?.city
@@ -452,35 +517,41 @@
             },
         colors = CardDefaults.cardColors(
             containerColor = Color(0xFFBEDDF5)
-        )
-    ) {
+        ),
+
+        ) {
         Row(
             modifier = Modifier
                 .heightIn(min = 80.dp)
                 .fillMaxWidth(),
             verticalAlignment = Alignment.CenterVertically
         ) {
-            Column(modifier = Modifier.weight(0.27f).background(Color(0xFFBEDDF5)).padding(10.dp)) {
+            Column(modifier = Modifier
+                .weight(0.27f)
+                .background(Color(0xFFBEDDF5))
+                .padding(10.dp)) {
 
-                    if (placeNameSplit != null) {
-                        Text(
+                if (placeNameSplit != null) {
+                    Text(
 
-                            text = if(placeNameSplit.size > 1)"" + (placeNameSplit?.get(1) ?: "") else "Sted",
-                            color = Color.Black,
-                            style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp)
-                        )
-                    }
+                        text = if(placeNameSplit.size > 1)"" + (placeNameSplit?.get(1) ?: "") else "Sted",
+                        color = Color.Black,
+                        style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp)
+                    )
+                }
 
-                    Text(
-                        text = placeNameSplit?.get(0) ?: "",
-                        color = Color.Black,
-                        style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)
-                    )
-                }
+                Text(
+                    text = placeNameSplit?.get(0) ?: "",
+                    color = Color.Black,
+                    style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)
+                )
+            }
 
             val airTemperature = combinedWeatherData?.weatherData?.properties?.timeseries?.firstOrNull()?.data?.instant?.details?.get("air_temperature")
-           // Spacer(modifier = Modifier.weight(1f)) // Legger til horisontalt mellomrom
-            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {
+            // Spacer(modifier = Modifier.weight(1f)) // Legger til horisontalt mellomrom
+            Column(modifier = Modifier
+                .weight(0.21f)
+                .background(Color(0xFFBEDDF5))) {
                 Text(
                     text = "LuftTemp:",
                     color = Color.Black,
@@ -497,7 +568,9 @@
             val seaTemperature = combinedWeatherData?.dataProjectionMain?.data?.get(0)?.data?.find{it.key == "temperature"}?.value
             val doubleSeaTemperature = seaTemperature?.toDouble()
             val roundSeaTemperature = doubleSeaTemperature?.let{ round(it)}
-            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {
+            Column(modifier = Modifier
+                .weight(0.21f)
+                .background(Color(0xFFBEDDF5))) {
                 Text(
                     text = "SjøTemp:",
                     color = Color.Black,
@@ -509,17 +582,19 @@
                     style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)
                 )
             }
-           // Spacer(modifier = Modifier.weight(1f))
+            // Spacer(modifier = Modifier.weight(1f))
             val seaSalinity = combinedWeatherData?.dataProjectionMain?.data?.get(0)?.data?.find{it.key == "salinity"}?.value
             val doubleSeaSalinity = seaSalinity?.toDouble()
             val roundSeaSalinity = doubleSeaSalinity?.let{ round(it)}
-            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {
+            Column(modifier = Modifier
+                .weight(0.21f)
+                .background(Color(0xFFBEDDF5))) {
                 Text(
                     text = "Salinity:",
                     color = Color.Black,
                     style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp),
 
-                )
+                    )
                 Text(
                     text = "${roundSeaSalinity}‰",
                     color = Color.Black,
@@ -530,6 +605,7 @@
     }
 }
 
+
 @RequiresApi(Build.VERSION_CODES.O)
 @OptIn(ExperimentalComposeUiApi::class)
 @Composable
@@ -695,5 +771,4 @@
             }
         }
     }
-}
-
+}
\ No newline at end of file
Index: app/src/main/res/drawable-anydpi/mylocationgoogle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable-anydpi/mylocationgoogle.xml b/app/src/main/res/drawable-anydpi/mylocationgoogle.xml
new file mode 100644
--- /dev/null	(date 1715443589428)
+++ b/app/src/main/res/drawable-anydpi/mylocationgoogle.xml	(date 1715443589428)
@@ -0,0 +1,11 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="960"
+    android:viewportHeight="960"
+    android:tint="#333333"
+    android:alpha="0.6">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M443.72,924.38L443.72,847.71Q310.16,833.47 218.22,741.46Q126.29,649.44 112.29,516.28L35.62,516.28L35.62,443.72L112.29,443.72Q126.53,310.16 218.54,218.22Q310.56,126.29 443.72,112.29L443.72,35.62L516.28,35.62L516.28,112.29Q649.44,126.29 741.46,218.22Q833.47,310.16 847.71,443.72L924.38,443.72L924.38,516.28L847.71,516.28Q833.71,649.44 741.78,741.46Q649.84,833.47 516.28,847.71L516.28,924.38L443.72,924.38ZM479.97,773.61Q601.2,773.61 687.41,687.43Q773.61,601.26 773.61,480.03Q773.61,358.8 687.43,272.59Q601.26,186.39 480.03,186.39Q358.8,186.39 272.59,272.57Q186.39,358.74 186.39,479.97Q186.39,601.2 272.57,687.41Q358.74,773.61 479.97,773.61ZM480,633.33Q416,633.33 371.33,588.67Q326.67,544 326.67,480Q326.67,416 371.33,371.33Q416,326.67 480,326.67Q544,326.67 588.67,371.33Q633.33,416 633.33,480Q633.33,544 588.67,588.67Q544,633.33 480,633.33Z"/>
+</vector>
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetSelector\">\n    <selectionStates>\n      <SelectionState runConfigName=\"app\">\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\n      </SelectionState>\n    </selectionStates>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/.idea/deploymentTargetSelector.xml	(date 1715443589417)
@@ -4,6 +4,14 @@
     <selectionStates>
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
+        <DropdownSelection timestamp="2024-05-10T16:43:21.667013Z">
+          <Target type="DEFAULT_BOOT">
+            <handle>
+              <DeviceId pluginId="LocalEmulator" identifier="path=/Users/olaskeie/.android/avd/Pixel_6_Pro_API_34.avd" />
+            </handle>
+          </Target>
+        </DropdownSelection>
+        <DialogSelection />
       </SelectionState>
     </selectionStates>
   </component>
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository\nimport no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository\nimport no.uio.ifi.in2000.prosjekt.Model.BigDataCloud\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.Temperature\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\nimport java.time.LocalDate\nimport java.time.ZoneOffset\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\n\ndata class CombinedWeatherData(\n    val weatherData: WeatherData?,\n    val dataProjectionMain: DataProjectionMain?,\n    val bigDataCloud: BigDataCloud?\n)\n\ndata class HavvarselUIState(\n    //val locationDataMap: Map<String, WeatherData?> = emptyMap(),\n    //val seaTempratureMap: Map<String, Temperature?> = emptyMap(),\n\n    val dataProjectionMain: DataProjectionMain? = null,\n    val temperatureProjection: Temperature? = null\n)\n\n\n\nclass InfoStederViewModel(coords : String): ViewModel() {\n    val liste = coords.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    private val havvarselRepository: HavvarselRepository = HavvarselRepository()\n\n    private  val bigDataCloudDataRepository: BigDataCloudRepository = BigDataCloudRepository()\n\n    private val _havvarselUIState = MutableStateFlow(HavvarselUIState())\n\n    val havvarselUIState: StateFlow<HavvarselUIState> = _havvarselUIState.asStateFlow()\n    private val currentDate = LocalDate.now().toString() // Eks-output = 2024-03-20\n    private val yesterdaysDate = LocalDate.now().minusDays(1).toString() // Eks-output = 2024-03-20\n    private val fireDagerFrem = LocalDate.now().plusDays(4).toString()\n\n    init {\n        viewModelScope.launch {\n            _havvarselUIState.update {\n                it.copy(\n                    dataProjectionMain = havvarselRepository.getHavvarselDataProjection(listOf(\"temperature\", \"salinity\",\"current_direction\",\"current_length\"), lon, lat, \"0\", fireDagerFrem, yesterdaysDate),\n                    temperatureProjection = havvarselRepository.getHavarselTemperature(lon,lat,\"0\",fireDagerFrem,yesterdaysDate)\n                )\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt	(date 1715443589427)
@@ -20,16 +20,7 @@
 import java.time.ZonedDateTime
 import java.time.format.DateTimeFormatter
 
-data class CombinedWeatherData(
-    val weatherData: WeatherData?,
-    val dataProjectionMain: DataProjectionMain?,
-    val bigDataCloud: BigDataCloud?
-)
-
 data class HavvarselUIState(
-    //val locationDataMap: Map<String, WeatherData?> = emptyMap(),
-    //val seaTempratureMap: Map<String, Temperature?> = emptyMap(),
-
     val dataProjectionMain: DataProjectionMain? = null,
     val temperatureProjection: Temperature? = null
 )
@@ -42,8 +33,6 @@
     val lon = liste[1].trim()
     private val havvarselRepository: HavvarselRepository = HavvarselRepository()
 
-    private  val bigDataCloudDataRepository: BigDataCloudRepository = BigDataCloudRepository()
-
     private val _havvarselUIState = MutableStateFlow(HavvarselUIState())
 
     val havvarselUIState: StateFlow<HavvarselUIState> = _havvarselUIState.asStateFlow()
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport co.yml.charts.axis.AxisData\nimport co.yml.charts.common.model.Point\nimport co.yml.charts.ui.linechart.LineChart\nimport co.yml.charts.ui.linechart.model.GridLines\nimport co.yml.charts.ui.linechart.model.IntersectionPoint\nimport co.yml.charts.ui.linechart.model.Line\nimport co.yml.charts.ui.linechart.model.LineChartData\nimport co.yml.charts.ui.linechart.model.LinePlotData\nimport co.yml.charts.ui.linechart.model.LineStyle\nimport co.yml.charts.ui.linechart.model.LineType\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPoint\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPopUp\nimport co.yml.charts.ui.linechart.model.ShadowUnderLine\n\n@Composable\nfun waterTempCard(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){\n    Card(modifier = Modifier) {\n        Column(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Sjø-temperatur\",  // The text to display\n                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design\n                modifier = Modifier.padding()  // Add some padding\n            )\n            waterTempChart(infoStederScreenViewModel = infoStederScreenViewModel, offsett)\n        }\n    }\n}\n\n@Composable\nfun waterTempChart(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){\n    val infoSted by infoStederScreenViewModel.havvarselUIState.collectAsState()\n    val pointData = listOf(\n        Point(0f, hentVerdiTemperature(infoSted, 0+offsett)),\n        Point(1f, hentVerdiTemperature(infoSted, 1+offsett)),\n        Point(2f, hentVerdiTemperature(infoSted, 2+offsett)),\n        Point(3f, hentVerdiTemperature(infoSted, 3+offsett)),\n        Point(4f, hentVerdiTemperature(infoSted, 4+offsett)),\n        Point(5f, hentVerdiTemperature(infoSted, 5+offsett)),\n        Point(6f, hentVerdiTemperature(infoSted, 6+offsett)),\n        Point(7f, hentVerdiTemperature(infoSted, 7+offsett)),\n        Point(8f, hentVerdiTemperature(infoSted, 8+offsett)),\n        Point(9f, hentVerdiTemperature(infoSted, 9+offsett)),\n        Point(10f, hentVerdiTemperature(infoSted, 10+offsett)),\n        Point(11f, hentVerdiTemperature(infoSted, 11+offsett)),\n        Point(12f, hentVerdiTemperature(infoSted, 12+offsett)),\n        Point(13f, hentVerdiTemperature(infoSted, 13+offsett)),\n        Point(14f, hentVerdiTemperature(infoSted, 14+offsett)),\n        Point(15f, hentVerdiTemperature(infoSted, 15+offsett)),\n        Point(16f, hentVerdiTemperature(infoSted, 16+offsett)),\n        Point(17f, hentVerdiTemperature(infoSted, 17+offsett)),\n        Point(18f, hentVerdiTemperature(infoSted, 18+offsett)),\n        Point(19f, hentVerdiTemperature(infoSted, 19+offsett)),\n        Point(20f, hentVerdiTemperature(infoSted, 20+offsett)),\n        Point(21f, hentVerdiTemperature(infoSted, 21+offsett)),\n        Point(22f, hentVerdiTemperature(infoSted, 22+offsett)),\n        Point(23f, hentVerdiTemperature(infoSted, 23+offsett))\n    )\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = (maxY - minY) / steps\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->\n            if (i == 0) \"    \" + \"%02d\".format(i) else \"%02d\".format(i)}\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(20.dp)\n        .labelData {  i ->\n            \"%.1f°\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        color = MaterialTheme.colorScheme.tertiary,\n                        lineType = LineType.SmoothCurve(isDotted = false),\n\n                        ),\n                    IntersectionPoint(\n                        color = MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.tertiary),\n                    ShadowUnderLine(\n                        alpha = 0.9f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                MaterialTheme.colorScheme.inversePrimary,\n                                Color.Transparent\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        containerPaddingEnd = 40.dp,\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant)\n    )\n\n    LineChart(modifier = Modifier\n        .height(300.dp),\n        lineChartData = lineChartData\n    )\n}\n\n@Composable\nfun landTempCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    Card(modifier = Modifier,\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n        )) {\n        Column(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Luft-temperatur\",  // The text to display\n                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design\n                modifier = Modifier  // Add some padding\n            )\n            locationForecastTempChart(infostederLocationForecastVM, offsett)  // Your existing chart composable\n        }\n    }\n}\n\n@Composable\nfun locationForecastTempChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()\n    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val pointData = when (offsett) {\n        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,\"air_temperature\")) }\n        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, \"air_temperature\")) }\n    }\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = ((maxY - minY) / steps).toInt()\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->\n            when (offsett) {\n                0 -> if (i == 0)  \"    \" + \"%02d\".format(i+hour) else \"%02d\".format(i+hour)\n                else -> if (i == 0) \"    \" + \"%02d\".format(i) else \"%02d\".format(i)\n            }\n        }\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(30.dp)\n        .axisOffset(0.dp)\n        .labelData {  i ->\n            \"%.1f°\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        alpha = 0.5f,\n                        color = Color(0xFF000000),\n                        lineType = LineType.Straight(isDotted = false)\n                    ),\n                    IntersectionPoint(\n                        MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),\n                    ShadowUnderLine(\n                        alpha = 0.5f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                Color(0xFFFFF9C4), // Light yellow\n                                Color(0xFFFFEB3B), // Vivid yellow\n                                Color(0xFFFFD726)  // Dark yellow\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),\n        isZoomAllowed = true\n    )\n\n    LineChart(modifier = Modifier\n        .fillMaxWidth()\n        .height(300.dp),\n        lineChartData = lineChartData\n    )\n}\n\n@Composable\nfun windSpeedCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    Card(modifier = Modifier,\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n        )) {\n        Column(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Vind\",  // The text to display\n                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design\n                modifier = Modifier  // Add some padding\n            )\n            locationForecastWindChart(infostederLocationForecastVM, offsett)  // Your existing chart composable\n        }\n    }\n}\n@Composable\nfun locationForecastWindChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()\n    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val pointData = when (offsett) {\n        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,\"wind_speed\")) }\n        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, \"wind_speed\")) }\n    }\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = ((maxY - minY) / steps)\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->\n            when (offsett) {\n                0 -> if (i == 0)  \"    \" + \"%02d\".format(i+hour) else \"%02d\".format(i+hour)\n                else -> if (i == 0) \"    \" + \"%02d\".format(i) else \"%02d\".format(i)\n            }\n        }\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(30.dp)\n        .axisOffset(0.dp)\n        .labelData {  i ->\n            \"%.1f m/s\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        alpha = 0.5f,\n                        color = Color(0xFF000000),\n                        lineType = LineType.Straight(isDotted = false)\n                    ),\n                    IntersectionPoint(\n                        MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),\n                    ShadowUnderLine(\n                        alpha = 0.5f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                Color(0xFFF5F5F5), // Light Gray (almost white)\n                                Color(0xFFE0E0E0), // Medium Gray\n                                Color(0xFFBDBDBD)  // Darker Gray\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),\n        isZoomAllowed = true\n    )\n\n    LineChart(modifier = Modifier\n        .fillMaxWidth()\n        .height(300.dp),\n        lineChartData = lineChartData\n    )\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt	(date 1715443589425)
@@ -1,11 +1,14 @@
 package no.uio.ifi.in2000.prosjekt.ui.infoSteder
 
+import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
 import androidx.compose.material3.Card
 import androidx.compose.material3.CardDefaults
+import androidx.compose.material3.CircularProgressIndicator
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
@@ -31,63 +34,52 @@
 import co.yml.charts.ui.linechart.model.ShadowUnderLine
 
 @Composable
-fun waterTempCard(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){
-    Card(modifier = Modifier) {
+fun waterTempCard(infoStederOFViewModel: InfoStederOFViewModel, offsett: Int){
+    Card(modifier = Modifier,
+        elevation = CardDefaults.cardElevation(
+            defaultElevation = 8.dp,
+        )) {
         Column(
             modifier = Modifier.fillMaxWidth(),
             horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally
         ) {
             Text(
-                "Sjø-temperatur",  // The text to display
+                "Hav-temperatur",  // The text to display
                 style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
-                modifier = Modifier.padding()  // Add some padding
+                modifier = Modifier  // Add some padding
             )
-            waterTempChart(infoStederScreenViewModel = infoStederScreenViewModel, offsett)
+            waterTempChart(infoStederOFViewModel, offsett, "sea_water_temperature")  // Your existing chart composable
         }
     }
 }
 
 @Composable
-fun waterTempChart(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){
-    val infoSted by infoStederScreenViewModel.havvarselUIState.collectAsState()
-    val pointData = listOf(
-        Point(0f, hentVerdiTemperature(infoSted, 0+offsett)),
-        Point(1f, hentVerdiTemperature(infoSted, 1+offsett)),
-        Point(2f, hentVerdiTemperature(infoSted, 2+offsett)),
-        Point(3f, hentVerdiTemperature(infoSted, 3+offsett)),
-        Point(4f, hentVerdiTemperature(infoSted, 4+offsett)),
-        Point(5f, hentVerdiTemperature(infoSted, 5+offsett)),
-        Point(6f, hentVerdiTemperature(infoSted, 6+offsett)),
-        Point(7f, hentVerdiTemperature(infoSted, 7+offsett)),
-        Point(8f, hentVerdiTemperature(infoSted, 8+offsett)),
-        Point(9f, hentVerdiTemperature(infoSted, 9+offsett)),
-        Point(10f, hentVerdiTemperature(infoSted, 10+offsett)),
-        Point(11f, hentVerdiTemperature(infoSted, 11+offsett)),
-        Point(12f, hentVerdiTemperature(infoSted, 12+offsett)),
-        Point(13f, hentVerdiTemperature(infoSted, 13+offsett)),
-        Point(14f, hentVerdiTemperature(infoSted, 14+offsett)),
-        Point(15f, hentVerdiTemperature(infoSted, 15+offsett)),
-        Point(16f, hentVerdiTemperature(infoSted, 16+offsett)),
-        Point(17f, hentVerdiTemperature(infoSted, 17+offsett)),
-        Point(18f, hentVerdiTemperature(infoSted, 18+offsett)),
-        Point(19f, hentVerdiTemperature(infoSted, 19+offsett)),
-        Point(20f, hentVerdiTemperature(infoSted, 20+offsett)),
-        Point(21f, hentVerdiTemperature(infoSted, 21+offsett)),
-        Point(22f, hentVerdiTemperature(infoSted, 22+offsett)),
-        Point(23f, hentVerdiTemperature(infoSted, 23+offsett))
-    )
+fun waterTempChart(infoStederOFViewModel: InfoStederOFViewModel, offsett: Int, variable: String){
+    val oceanForecastUiState by infoStederOFViewModel.oFUiState.collectAsState()
+    val isLoading by infoStederOFViewModel.isLoading.collectAsState()
+    val pointData = infoStederOFViewModel.linechartMaker(offsett, variable)
+
+    if(oceanForecastUiState.oceanForecastData?.properties?.timeseries?.isEmpty() == true){
+        return
+    }
+    val dateTimeString = oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(0+offsett)?.time
+    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
 
     val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
     val minY = pointData.minByOrNull { it.y }?.y ?: 0f
     val steps = determineSteps(maxY-minY)
-    val stepsize = (maxY - minY) / steps
+    val stepsize = ((maxY - minY) / steps)
 
     val xAxisData = AxisData.Builder()
         .axisStepSize(40.dp)
         .backgroundColor(Color.Transparent)
         .steps(pointData.size - 1)
         .labelData { i ->
-            if (i == 0) "    " + "%02d".format(i) else "%02d".format(i)}
+            when (offsett) {
+                0 -> if (i == 0)  "    " + "%02d".format(i+hour) else "%02d".format(i+hour)
+                else -> if (i == 0) "    " + "%02d".format(i) else "%02d".format(i)
+            }
+        }
         .labelAndAxisLinePadding(10.dp)
         .axisLineColor(MaterialTheme.colorScheme.tertiary)
         .axisLabelColor(MaterialTheme.colorScheme.tertiary)
@@ -96,7 +88,8 @@
     val yAxisData = AxisData.Builder()
         .steps(steps)
         .backgroundColor(Color.Transparent)
-        .labelAndAxisLinePadding(20.dp)
+        .labelAndAxisLinePadding(30.dp)
+        .axisOffset(0.dp)
         .labelData {  i ->
             "%.1f°".format(minY  + (i * stepsize))
         }
@@ -110,20 +103,21 @@
                 Line(
                     dataPoints = pointData,
                     LineStyle(
-                        color = MaterialTheme.colorScheme.tertiary,
-                        lineType = LineType.SmoothCurve(isDotted = false),
-
-                        ),
+                        alpha = 0.5f,
+                        color = Color(0xFF000000),
+                        lineType = LineType.Straight(isDotted = false)
+                    ),
                     IntersectionPoint(
-                        color = MaterialTheme.colorScheme.tertiary
+                        MaterialTheme.colorScheme.tertiary
                     ),
-                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.tertiary),
+                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),
                     ShadowUnderLine(
-                        alpha = 0.9f,
+                        alpha = 0.5f,
                         brush = Brush.verticalGradient(
                             colors = listOf(
-                                MaterialTheme.colorScheme.inversePrimary,
-                                Color.Transparent
+                                Color(0xFFC4EAFF), // Light yellow
+                                Color(0xFF3B9AFF), // Vivid yellow
+                                Color(0xFF2663FF)  // Dark yellow
                             )
                         )
                     ),
@@ -131,17 +125,25 @@
                 )
             ),
         ),
-        containerPaddingEnd = 40.dp,
         backgroundColor = MaterialTheme.colorScheme.surface,
         xAxisData = xAxisData,
         yAxisData = yAxisData,
-        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant)
+        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),
+        isZoomAllowed = true
     )
-
-    LineChart(modifier = Modifier
-        .height(300.dp),
-        lineChartData = lineChartData
-    )
+    if(isLoading){
+        Box(modifier = Modifier
+            .fillMaxWidth()
+            .height(300.dp), contentAlignment = Alignment.Center) {
+            CircularProgressIndicator(modifier = Modifier)
+        }
+    } else {
+        LineChart(modifier = Modifier
+            .fillMaxWidth()
+            .height(300.dp),
+            lineChartData = lineChartData
+        )
+    }
 }
 
 @Composable
@@ -159,21 +161,23 @@
                 style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
                 modifier = Modifier  // Add some padding
             )
-            locationForecastTempChart(infostederLocationForecastVM, offsett)  // Your existing chart composable
+            locationForecastTempChart(infostederLocationForecastVM, offsett, "air_temperature")  // Your existing chart composable
         }
     }
 }
 
 @Composable
-fun locationForecastTempChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
+fun locationForecastTempChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int, variable: String){
     val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()
+    val pointData = infostederLocationForecastVM.linechartMaker(offsett, variable)
+    val isLoading by infostederLocationForecastVM.isLoading.collectAsState()
+
+    if(locationForecastUiState.weatherData?.properties?.timeseries?.isEmpty() == true){
+        return
+    }
     val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time
     val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
 
-    val pointData = when (offsett) {
-        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"air_temperature")) }
-        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "air_temperature")) }
-    }
 
     val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
     val minY = pointData.minByOrNull { it.y }?.y ?: 0f
@@ -241,12 +245,19 @@
         gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),
         isZoomAllowed = true
     )
-
-    LineChart(modifier = Modifier
-        .fillMaxWidth()
-        .height(300.dp),
-        lineChartData = lineChartData
-    )
+    if(isLoading){
+        Box(modifier = Modifier
+            .fillMaxWidth()
+            .height(300.dp), contentAlignment = Alignment.Center) {
+            CircularProgressIndicator(modifier = Modifier)
+        }
+    } else {
+        LineChart(modifier = Modifier
+            .fillMaxWidth()
+            .height(300.dp),
+            lineChartData = lineChartData
+        )
+    }
 }
 
 @Composable
@@ -264,21 +275,22 @@
                 style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
                 modifier = Modifier  // Add some padding
             )
-            locationForecastWindChart(infostederLocationForecastVM, offsett)  // Your existing chart composable
+            locationForecastWindChart(infostederLocationForecastVM, offsett, "wind_speed")  // Your existing chart composable
         }
     }
 }
 @Composable
-fun locationForecastWindChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
+fun locationForecastWindChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int, variable: String){
     val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()
+    val pointData = infostederLocationForecastVM.linechartMaker(offsett, variable)
+    val isLoaded by infostederLocationForecastVM.isLoading.collectAsState()
+
+    if(locationForecastUiState.weatherData?.properties?.timeseries?.isEmpty() == true){
+        return
+    }
     val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time
     val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
 
-    val pointData = when (offsett) {
-        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"wind_speed")) }
-        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "wind_speed")) }
-    }
-
     val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
     val minY = pointData.minByOrNull { it.y }?.y ?: 0f
     val steps = determineSteps(maxY-minY)
@@ -345,10 +357,17 @@
         gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),
         isZoomAllowed = true
     )
-
-    LineChart(modifier = Modifier
-        .fillMaxWidth()
-        .height(300.dp),
-        lineChartData = lineChartData
-    )
+    if(isLoaded){
+        Box(modifier = Modifier
+            .fillMaxWidth()
+            .height(300.dp), contentAlignment = Alignment.Center) {
+            CircularProgressIndicator(modifier = Modifier)
+        }
+    } else {
+        LineChart(modifier = Modifier
+            .fillMaxWidth()
+            .height(300.dp),
+            lineChartData = lineChartData
+        )
+    }
 }
\ No newline at end of file
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.OceanForecast.OceanForecastRepository\nimport no.uio.ifi.in2000.prosjekt.Model.OceanForecastData\n\ndata class oceanForecastUiState(\n    val oceanForecastData: OceanForecastData? = OceanForecastData()\n)\n\nclass InfoStederOFViewModel(coords: String): ViewModel(){\n    private val _isLoading = MutableStateFlow(false)\n    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()\n    val liste = coords.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n\n    private val oceanForecastRepo = OceanForecastRepository()\n\n    private val _oFUiState = MutableStateFlow(oceanForecastUiState())\n    val oFUiState: StateFlow<oceanForecastUiState> = _oFUiState.asStateFlow()\n    init {\n        getOceanData(lat, lon)\n    }\n\n    fun getOceanData(lat : String, lon : String){\n        toggleLoading()\n        viewModelScope.launch {\n            _oFUiState.update {\n                it.copy(\n                    oceanForecastData = oceanForecastRepo.getOceanForecast(lat,lon)\n                )\n            }\n            toggleLoading()\n        }\n    }\n\n    fun toggleLoading() {\n        _isLoading.value = !_isLoading.value\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt	(date 1715443589426)
@@ -2,6 +2,7 @@
 
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
+import co.yml.charts.common.model.Point
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.asStateFlow
@@ -9,27 +10,37 @@
 import kotlinx.coroutines.launch
 import no.uio.ifi.in2000.prosjekt.Data.OceanForecast.OceanForecastRepository
 import no.uio.ifi.in2000.prosjekt.Model.OceanForecastData
+import no.uio.ifi.in2000.prosjekt.Model.OceanTimeSeries
+import no.uio.ifi.in2000.prosjekt.Model.TimeSeries
+import java.time.LocalTime
+import java.time.ZoneId
 
 data class oceanForecastUiState(
-    val oceanForecastData: OceanForecastData? = OceanForecastData()
+    val oceanForecastData: OceanForecastData? = OceanForecastData(),
+    var oceanWeatherList: List<OceanTimeSeries?> = emptyList()
 )
 
 class InfoStederOFViewModel(coords: String): ViewModel(){
     private val _isLoading = MutableStateFlow(false)
     val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
+
+    private val _waveMap = MutableStateFlow<Map<String, Double>>(emptyMap())
+    val waveMap: StateFlow<Map<String, Double>> = _waveMap
+
     val liste = coords.split(",")
     val lat = liste[0].trim()
     val lon = liste[1].trim()
-
     private val oceanForecastRepo = OceanForecastRepository()
 
     private val _oFUiState = MutableStateFlow(oceanForecastUiState())
     val oFUiState: StateFlow<oceanForecastUiState> = _oFUiState.asStateFlow()
+
+    var startHour = 0
     init {
-        getOceanData(lat, lon)
+        getOceanData(lat, lon, 0)
     }
 
-    fun getOceanData(lat : String, lon : String){
+    fun getOceanData(lat : String, lon : String, offset: Int){
         toggleLoading()
         viewModelScope.launch {
             _oFUiState.update {
@@ -37,6 +48,9 @@
                     oceanForecastData = oceanForecastRepo.getOceanForecast(lat,lon)
                 )
             }
+            setStartHour()
+            makeWeatherList(offset)
+            waveHeight()
             toggleLoading()
         }
     }
@@ -44,4 +58,74 @@
     fun toggleLoading() {
         _isLoading.value = !_isLoading.value
     }
+
+    fun setStartHour(){
+        if(_oFUiState.value.oceanForecastData?.properties?.timeseries?.isEmpty() == true){
+            return
+        }
+        startHour = (_oFUiState.value.oceanForecastData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0
+    }
+
+    fun waveHeight(){
+        if(_oFUiState.value.oceanForecastData?.properties?.timeseries?.isEmpty() == true){
+            return
+        }
+        val map = mutableMapOf<String, Double>()
+        var max = 0.0
+        var maxTid = 0
+        repeat(23-startHour){
+            val tid = (_oFUiState.value.oceanForecastData?.properties?.timeseries?.get(it)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0
+            val height = _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(it)?.data?.instant?.details?.get("sea_surface_wave_height") ?: -1.0
+            map[tid.toString()] = height // Avoid nullpointerexception
+            if(height >= max){
+                max = height
+                maxTid = tid
+            }
+        }
+        map["max"] = max
+        map["tid"] = maxTid.toDouble()
+        _waveMap.value = map
+    }
+
+    fun makeWeatherList(offsett: Int){
+        if(_oFUiState.value.oceanForecastData?.properties?.timeseries?.isEmpty() == true){
+            return
+        }
+        val list = when (offsett) {
+            0 -> when(startHour) {
+                22 -> (0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+2) }
+                23 -> (0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+1) }
+                else -> (0..23-startHour).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index) }
+            }
+            else -> when(_oFUiState.value.oceanWeatherList.size){
+                24 -> (0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+offsett) }
+                else -> (0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+offsett-startHour) }
+            }
+        }
+        _oFUiState.value.oceanWeatherList = list
+    }
+
+    fun linechartMaker(offset: Int, variable: String): List<Point> {
+        if(_oFUiState.value.oceanForecastData?.properties?.timeseries?.isEmpty() == true){
+            val pointData = (0..23).map { index -> Point(index.toFloat(), 0.0f) }
+            return pointData
+        }
+        val pointData = when (offset) {
+            0 -> (startHour..23).map { index ->
+                val temperature = (_oFUiState.value.oceanForecastData?.properties?.timeseries
+                    ?.get(index - startHour)?.data?.instant?.details
+                    ?.get(variable)?: 0).toFloat()
+
+                Point(index.toFloat(), temperature ?: 0.0f) // Change is here
+            }
+            else -> (0..23).map { index ->
+                val temperature = (_oFUiState.value.oceanForecastData?.properties?.timeseries
+                    ?.get(index + offset - startHour)?.data?.instant?.details
+                    ?.get(variable)?: 0).toFloat()
+
+                Point(index.toFloat(), temperature ?: 0.0f) // Change is here
+            }
+        }
+        return pointData
+    }
 }
\ No newline at end of file
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    id(\"com.android.application\")\n    id(\"org.jetbrains.kotlin.android\")\n    kotlin(\"plugin.serialization\") version \"1.9.22\"\n}\n\n\nandroid {\n    namespace = \"no.uio.ifi.in2000.prosjekt\"\n    compileSdk = 34\n\n    defaultConfig {\n        applicationId = \"no.uio.ifi.in2000.prosjekt\"\n        minSdk = 26\n        targetSdk = 34\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n        vectorDrawables {\n            useSupportLibrary = true\n        }\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n    buildFeatures {\n        compose = true\n    }\n    composeOptions {\n        kotlinCompilerExtensionVersion = \"1.5.1\"\n    }\n    packaging {\n        resources {\n            excludes += \"/META-INF/{AL2.0,LGPL2.1}\"\n        }\n    }\n}\n\ndependencies {\n    implementation(\"com.mapbox.maps:android:11.3.1\") // Mapbox\n    implementation(\"com.mapbox.extension:maps-compose:11.3.1\") // Mapbox\n    implementation (\"org.osmdroid:osmdroid-android:6.1.18\") // Openstreetmap\n    implementation (\"com.google.android.gms:play-services-location:21.2.0\") // Google play location\n    implementation (\"com.google.android.material:material:1.12.0-rc01\")\n    implementation (\"co.yml:ycharts:2.1.0\")\n    implementation(\"io.ktor:ktor-serialization-kotlinx-json:2.3.8\")\n    implementation (\"io.ktor:ktor-client-core:2.3.8\")\n    implementation(\"io.ktor:ktor-client-cio:2.3.8\")\n    implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2\")\n    implementation(\"io.ktor:ktor-client-content-negotiation:2.3.8\")\n    implementation(\"io.coil-kt:coil-compose:2.5.0\")\n    implementation(\"androidx.core:core-ktx:1.12.0\")\n    implementation(\"androidx.lifecycle:lifecycle-runtime-ktx:2.7.0\")\n    implementation(\"androidx.activity:activity-compose:1.8.2\")\n    implementation(platform(\"androidx.compose:compose-bom:2023.08.00\"))\n    implementation(\"androidx.compose.ui:ui\")\n    implementation(\"androidx.compose.ui:ui-graphics\")\n    implementation(\"androidx.compose.ui:ui-tooling-preview\")\n    implementation(\"androidx.compose.material3:material3\")\n\n    implementation (\"androidx.navigation:navigation-compose:2.7.7\")\n    implementation(\"androidx.navigation:navigation-runtime-ktx:2.7.7\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation (\"androidx.datastore:datastore-preferences:1.0.0\") // Use the latest version\n\n\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n    androidTestImplementation(platform(\"androidx.compose:compose-bom:2023.08.00\"))\n    androidTestImplementation(\"androidx.compose.ui:ui-test-junit4\")\n    debugImplementation(\"androidx.compose.ui:ui-tooling\")\n    debugImplementation(\"androidx.compose.ui:ui-test-manifest\")\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/build.gradle.kts	(date 1715443589420)
@@ -56,7 +56,7 @@
     implementation("com.mapbox.extension:maps-compose:11.3.1") // Mapbox
     implementation ("org.osmdroid:osmdroid-android:6.1.18") // Openstreetmap
     implementation ("com.google.android.gms:play-services-location:21.2.0") // Google play location
-    implementation ("com.google.android.material:material:1.12.0-rc01")
+    implementation ("com.google.android.material:material:1.12.0")
     implementation ("co.yml:ycharts:2.1.0")
     implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.8")
     implementation ("io.ktor:ktor-client-core:2.3.8")
@@ -76,8 +76,8 @@
     implementation ("androidx.navigation:navigation-compose:2.7.7")
     implementation("androidx.navigation:navigation-runtime-ktx:2.7.7")
     implementation("androidx.appcompat:appcompat:1.6.1")
-    implementation ("androidx.datastore:datastore-preferences:1.0.0") // Use the latest version
-
+    implementation ("androidx.datastore:datastore-preferences:1.1.1")
+    implementation("androidx.test.ext:junit-ktx:1.1.5")
 
     testImplementation("junit:junit:4.13.2")
     androidTestImplementation("androidx.test.ext:junit:1.1.5")
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.lifecycle.ViewModel\nimport androidx.navigation.NavController\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.ExpandableWeatherCard\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederOFViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.metAlerts\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun DWSscreen(navController: NavController, coordinate: String,\n              dwsViewModel: DWSViewModel = DWSViewModel(coordinate),\n              infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate)) {\n    Scaffold(\n        topBar = {\n            TopAppBar(modifier = Modifier,\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF1F3468),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                        Text(\"Logo\", color = Color.White)\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color.White\n                        )\n                    }\n                },\n            )\n        }\n    )\n    { innerpadding ->\n        LazyColumn(modifier = Modifier.padding(innerpadding)) {\n            item{\n                ExpandableWeatherCard(infoStederOFViewModel = infoStederOFViewModel, nr = 0, dag = \"I dag\")\n            }\n        }\n    }\n}\n\n@Composable\nfun waterTempCard(infoStederOFViewModel: InfoStederOFViewModel, ){\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt	(date 1715443589422)
@@ -1,45 +1,101 @@
 package no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea
 
+import androidx.compose.foundation.Image
+import androidx.compose.foundation.background
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxHeight
 import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.layout.width
 import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Add
 import androidx.compose.material.icons.filled.ArrowBack
 import androidx.compose.material.icons.filled.Search
+import androidx.compose.material3.Card
+import androidx.compose.material3.CardDefaults
+import androidx.compose.material3.CircularProgressIndicator
+import androidx.compose.material3.Divider
 import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.Icon
 import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Scaffold
 import androidx.compose.material3.Text
 import androidx.compose.material3.TopAppBar
 import androidx.compose.material3.TopAppBarDefaults
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.collectAsState
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.ColorFilter
+import androidx.compose.ui.layout.ContentScale
+import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
 import androidx.lifecycle.ViewModel
 import androidx.navigation.NavController
+import androidx.navigation.compose.rememberNavController
+import no.uio.ifi.in2000.prosjekt.R
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.ExpandableWeatherCard
+import no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederLFViewModel
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederOFViewModel
+import no.uio.ifi.in2000.prosjekt.ui.infoSteder.LfRow
+import no.uio.ifi.in2000.prosjekt.ui.infoSteder.StatusCell
+import no.uio.ifi.in2000.prosjekt.ui.infoSteder.TableCell
+import no.uio.ifi.in2000.prosjekt.ui.infoSteder.TableCellImage
 import no.uio.ifi.in2000.prosjekt.ui.infoSteder.metAlerts
+import java.time.LocalDate
+import java.time.LocalTime
+import java.time.ZoneId
+import java.time.format.DateTimeFormatter
+import java.util.Locale
+import kotlin.math.ceil
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
-fun DWSscreen(navController: NavController, coordinate: String,
-              dwsViewModel: DWSViewModel = DWSViewModel(coordinate),
-              infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate)) {
+fun DWSscreen(
+    navController: NavController,
+    coordinate: String,
+    dwsViewModel: DWSViewModel = DWSViewModel(coordinate),
+    infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate),
+    infoStederLFViewModel: InfoStederLFViewModel = InfoStederLFViewModel(coordinate)
+) {
     Scaffold(
+        containerColor = Color(0xFF171729),
         topBar = {
-            TopAppBar(modifier = Modifier,
+            TopAppBar(
+                modifier = Modifier,
                 colors = TopAppBarDefaults.topAppBarColors(
-                    containerColor = Color(0xFF1F3468),
+                    containerColor = Color(0xFF171729),
                     titleContentColor = Color.Black,
                 ),
                 title = {
-                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
-                        Text("Logo", color = Color.White)
+                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {
+                        Image(
+                            painter = painterResource(id = R.drawable.havblikktext),
+                            contentDescription = "My Image",
+                            alignment = Alignment.Center,
+                            colorFilter = ColorFilter.tint(Color(0xFFCFE3F3)),
+                        )
                     }
                 },
                 navigationIcon = {
@@ -47,23 +103,415 @@
                         Icon(
                             Icons.Default.ArrowBack,
                             contentDescription = "Return",
-                            tint = Color.White
+                            tint = Color(0xFFCFE3F3)
                         )
                     }
                 },
+                actions = {
+                    Box(modifier = Modifier, contentAlignment = Alignment.Center) {
+                        Text(getCurrentDateInNorwegianFormat(), color = Color(0xFFCFE3F3))
+                    }
+                }
             )
         }
-    )
-    { innerpadding ->
+    ) { innerpadding ->
         LazyColumn(modifier = Modifier.padding(innerpadding)) {
-            item{
-                ExpandableWeatherCard(infoStederOFViewModel = infoStederOFViewModel, nr = 0, dag = "I dag")
+            item {
+                ExpandableWeatherCard(
+                    infoStederOFViewModel = infoStederOFViewModel,
+                    nr = 0,
+                    dag = ""
+                )
+            }
+            item {
+                Box(modifier = Modifier.height(150.dp)) {
+                    Row() {
+                        Box(
+                            modifier = Modifier
+                                .weight(1f)
+                                .padding(5.dp)
+                        ){
+                            WaveHeigth(infoStederOFViewModel = infoStederOFViewModel)
+                        }
+                        Box(
+                            modifier = Modifier
+                                .weight(1f)
+                                .padding(5.dp)
+                        ){
+                            UvIndex(infoStederLFViewModel = infoStederLFViewModel)
+                        }
+                    }
+                }
+            }
+            item {
+                Wind(infoStederLFViewModel = infoStederLFViewModel)
             }
         }
     }
 }
 
 @Composable
-fun waterTempCard(infoStederOFViewModel: InfoStederOFViewModel, ){
+fun WaveHeigth(infoStederOFViewModel: InfoStederOFViewModel) {
+    val map by infoStederOFViewModel.waveMap.collectAsState()
+    val isLoading by infoStederOFViewModel.isLoading.collectAsState()
+
+    val zoneId = ZoneId.of("Europe/Oslo")
+    val currentHour = LocalTime.now(zoneId).hour.toString()
+    val painter = painterResource(id = R.drawable.waveheight)
+
+    Card(
+        shape = RoundedCornerShape(10.dp),
+        modifier = Modifier
+            .padding(6.dp)
+            .fillMaxSize()
+    ) {
+        if(isLoading){
+            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
+                CircularProgressIndicator(modifier = Modifier)
+            }
+        } else {
+            Row(modifier = Modifier.padding(20.dp)) {
+                Column(modifier = Modifier.weight(1f)) {
+                    Text(
+                        text = "Bølgetopp",
+                        style = TextStyle(
+                            color = Color.Black,
+                            fontSize = 16.sp
+                        )
+                    )
+                    Text(
+                        text = "Nå - ${map[currentHour]} m",
+                        style = TextStyle(
+                            color = Color.Black,
+                            fontSize = 14.sp
+                        )
+                    )
+                    Text(
+                        text = "Max - ${map["max"]} m",
+                        style = TextStyle(
+                            color = Color(0xFF446097),
+                            fontSize = 10.sp
+                        )
+                    )
+                    Text(
+                        text = "(Kl.${map["tid"]})",
+                        style = TextStyle(
+                            color = Color(0xFF446097),
+                            fontSize = 10.sp
+                        )
+                    )
+
+                }
+                IconButton(
+                    onClick = { },
+                    modifier = Modifier
+                        .background(
+                            color = Color(0xFF446097),
+                            shape = RoundedCornerShape(10.dp)
+                        )
+                        .fillMaxHeight()
+                ) {
+                    Image(painter = painter, contentDescription = "Bølgehøyde", colorFilter = ColorFilter.tint(Color.White), modifier = Modifier.fillMaxSize())
+                }
+            }
+        }
+    }
+}
 
+@Composable
+fun UvIndex(infoStederLFViewModel: InfoStederLFViewModel) {
+    val lfUiState by infoStederLFViewModel.lFUiState.collectAsState()
+    val isLoading by infoStederLFViewModel.isLoading.collectAsState()
+    val painter = painterResource(id = R.drawable.uv)
+
+    Card(
+        shape = RoundedCornerShape(10.dp),
+        modifier = Modifier
+            .padding(6.dp)
+            .fillMaxSize()
+    ) {
+        if(isLoading){
+            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
+                CircularProgressIndicator(modifier = Modifier)
+            }
+        } else {
+            Row(modifier = Modifier.padding(20.dp)) {
+                Column(modifier = Modifier.weight(1f)) {
+                    Text(
+                        text = "UV-Index",
+                        style = TextStyle(
+                            color = Color.Black,
+                            fontSize = 16.sp
+                        )
+                    )
+                    Text(
+                        text = lfUiState.weatherData?.properties?.timeseries?.get(0)?.data?.instant?.details?.get("ultraviolet_index_clear_sky").toString(),
+                        style = TextStyle(
+                            color = Color.Black,
+                            fontSize = 14.sp
+                        )
+                    )
+                    Text(
+                        text = uvToText(lfUiState.weatherData?.properties?.timeseries?.get(0)?.data?.instant?.details?.get("ultraviolet_index_clear_sky")),
+                        style = TextStyle(
+                            color = Color.Black,
+                            fontSize = 12.sp
+                        )
+                    )
+                }
+                IconButton(
+                    onClick = { },
+                    modifier = Modifier
+                        .background(
+                            color = Color(0xFFF9E784),
+                            shape = RoundedCornerShape(10.dp)
+                        )
+                        .fillMaxHeight()
+                ) {
+                    Image(painter = painter, contentDescription = "UV")
+                }
+            }
+        }
+    }
+}
+
+fun uvToText(uvIndex: Double?): String{
+    if(uvIndex == null){
+        return "UV-index ikke tilgjengelig"
+    }
+    return when (uvIndex) {
+        in 0.0..2.9 -> "Lavt nivå"
+        in 3.0..5.9 -> "Moderat nivå"
+        in 6.0..7.9 -> "Høyt nivå"
+        in 8.0..10.9 -> "Svært høyt nivå"
+        else -> "Ekstremt nivå"
+    }
+}
+
+
+@Composable
+fun Wind(infoStederLFViewModel: InfoStederLFViewModel){
+    val locFor by infoStederLFViewModel.lFUiState.collectAsState()
+    infoStederLFViewModel.makeWeatherList(0)
+    val isLoading by infoStederLFViewModel.isLoading.collectAsState()
+    var expanded by remember { mutableStateOf (false) }
+
+    if(locFor.weatherList.isEmpty()){
+        return
+    }
+    val a = locFor.weatherList.size
+    val res = ceil(a.toDouble() / 6).toInt()
+
+    val first = when (expanded) {
+        true -> "00"
+        else -> "00-06"
+    }
+    val second = when (expanded) {
+        true -> "01"
+        else -> "06-12"
+    }
+    val third = when (expanded) {
+        true -> "02"
+        else -> "12-18"
+    }
+    val fourth = when (expanded) {
+        true -> "03"
+        else -> "18-24"
+    }
+    val t1 = when (expanded) {
+        true -> 0
+        else -> 0
+    }
+    val t2 = when (expanded) {
+        true -> 1
+        else -> 6
+    }
+    val t3 = when (expanded) {
+        true -> 2
+        else -> 12
+    }
+    val t4 = when (expanded) {
+        true -> 3
+        else -> 18
+    }
+    val indexArray = arrayOf(t1, t2, t3, t4)
+    val column1Weight = .2f
+    val column2Weight = .3f
+    val column3Weight = .25f
+    val column4Weight = .25f
+
+    val expandMoreIcon = painterResource(id = R.drawable.expand_more)
+    val expandLessIcon = painterResource(id = R.drawable.expand_less)
+    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
+
+    Card(
+        shape = RoundedCornerShape(10.dp),
+        elevation = CardDefaults.cardElevation(
+            defaultElevation = 20.dp,
+            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed
+            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused
+            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over
+        ),
+        modifier = Modifier
+            .fillMaxWidth()
+            .padding(10.dp)
+            .clickable(
+                onClick = { expanded = !expanded }
+            ),
+    ) {
+        Box(
+            modifier = Modifier
+                .fillMaxSize()
+        ) {
+            if (isLoading) {
+                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
+                    CircularProgressIndicator(modifier = Modifier)
+                }
+            } else {
+                Column() {
+                    Row(
+                        modifier = Modifier.fillMaxWidth(),
+                        horizontalArrangement = Arrangement.SpaceBetween
+                    ) {
+                        Box(contentAlignment = Alignment.CenterStart) {
+                            Text(
+                                text = "I dag",
+                                style = MaterialTheme.typography.titleLarge,
+                                fontWeight = FontWeight.Black,
+                                textAlign = TextAlign.Start
+                            )
+                        }
+                        Box(contentAlignment = Alignment.CenterEnd) {
+                            Text(
+                                text = "Vind",
+                                style = MaterialTheme.typography.titleLarge,
+                                fontWeight = FontWeight.Black
+                            )
+                        }
+                    }
+                    Row(
+                        Modifier
+                            .fillMaxWidth()
+                            .padding(8.dp),
+                        horizontalArrangement = Arrangement.SpaceBetween
+                    ) {
+                        TableCell(
+                            text = "Tid",
+                            weight = column1Weight,
+                            alignment = TextAlign.Left,
+                            title = true
+                        )
+                        TableCell(text = "Vind", weight = column2Weight, title = true)
+                        TableCell(text = "Vindkast", weight = column3Weight, title = true)
+                        TableCell(
+                            text = "Retning",
+                            weight = column4Weight,
+                            alignment = TextAlign.Right,
+                            title = true
+                        )
+                    }
+                    Divider(
+                        color = Color.LightGray, modifier = Modifier
+                            .fillMaxWidth()
+                            .height(1.dp)
+                    )
+                    var teller = 0
+                    for (i in 4-res..<4) {
+                        Row(
+                            Modifier.fillMaxWidth(),
+                            horizontalArrangement = Arrangement.SpaceBetween
+                        ){
+                            TableCell(
+                                text = when (i) {
+                                    0 -> when (expanded) {
+                                        true -> "%02d".format(teller+24-a)
+                                        else -> first
+                                    }
+                                    1 -> when (expanded) {
+                                        true -> "%02d".format(teller+24-a)
+                                        else -> second
+                                    }
+                                    2 -> when (expanded) {
+                                        true -> "%02d".format(teller+24-a)
+                                        else -> third
+                                    }
+                                    else -> when (expanded) {
+                                        true -> "%02d".format(teller+24-a)
+                                        else -> fourth
+                                    }
+                                },
+                                weight = column1Weight,
+                                alignment = TextAlign.Left
+                            )
+                            locFor.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_speed").toString().let { TableCell(text = it, weight = column2Weight) }
+                            locFor.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_speed_of_gust").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                            locFor.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_from_direction").toString().let {
+                                TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
+                            }
+                        }
+                        Divider(
+                            color = Color.LightGray,
+                            modifier = Modifier
+                                .height(1.dp)
+                                .fillMaxHeight()
+                                .fillMaxWidth()
+                        )
+                        teller ++
+                    }
+                    if (expanded) {
+                        repeat(a - res) { index ->
+                            Row(
+                                Modifier.fillMaxWidth(),
+                                horizontalArrangement = Arrangement.SpaceBetween
+                            ){
+                                TableCell(
+                                    text = "%02d".format(index+24+res-a),
+                                    weight = column1Weight,
+                                    alignment = TextAlign.Left
+                                )
+                                locFor.weatherList[index+res]?.data?.instant?.details?.get("wind_speed").toString().let { TableCell(text = it, weight = column2Weight) }
+                                locFor.weatherList[index+res]?.data?.instant?.details?.get("wind_speed_of_gust").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                                locFor.weatherList[index+res]?.data?.instant?.details?.get("wind_from_direction").toString().let {
+                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
+                                }
+                            }
+                            Divider(
+                                color = Color.LightGray,
+                                modifier = Modifier
+                                    .height(1.dp)
+                                    .fillMaxHeight()
+                                    .fillMaxWidth()
+                            )
+                        }
+                    }
+                    Row(
+                        verticalAlignment = Alignment.CenterVertically,
+                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally
+                        modifier = Modifier.fillMaxWidth()
+                    ) {
+                        Text(text = "Time for time")
+                        Image(
+                            painter = toggleIconPainter,
+                            contentDescription = "Expand",
+                            modifier = Modifier.size(30.dp),
+                            Alignment.CenterStart
+                        )
+                    }
+                }
+            }
+        }
+    }
+}
+
+fun getCurrentDateInNorwegianFormat(): String {
+    val currentDate = LocalDate.now()
+    val formatter = DateTimeFormatter.ofPattern("dd. MMMM", Locale("no"))
+    return currentDate.format(formatter)
+}
+
+@Composable
+@Preview
+fun prevsa(){
+    val navController = rememberNavController()
+    DWSscreen(navController = navController, coordinate = "59.07,10.77")
 }
\ No newline at end of file
Index: app/src/main/res/drawable-anydpi/waveheight.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable-anydpi/waveheight.xml b/app/src/main/res/drawable-anydpi/waveheight.xml
new file mode 100644
--- /dev/null	(date 1715443589428)
+++ b/app/src/main/res/drawable-anydpi/waveheight.xml	(date 1715443589428)
@@ -0,0 +1,11 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="960"
+    android:viewportHeight="960"
+    android:tint="#333333"
+    android:alpha="0.6">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M100,818.46L100,784.62Q130.1,781.23 157.62,768.88Q185.13,756.54 213,736.74Q243.92,759.54 278.5,772.35Q313.08,785.15 347,785.15Q379.08,785.15 415.15,773.15Q451.23,761.15 481,738.28Q513.67,763.05 547.33,774.1Q581,785.15 615,785.15Q649.54,785.15 680.73,773.69Q711.92,762.23 749,736.59Q779.18,758.54 806.77,769.88Q834.36,781.23 860,784.62L860,818.46Q834.74,815.85 806.19,806.01Q777.64,796.18 749,779.1Q713.1,801.15 679.32,810.58Q645.54,820 615,820Q585.23,820 550.68,810.19Q516.13,800.38 480.23,778.33Q447.33,800.31 413.18,810.15Q379.03,820 347,820Q315.46,820 281.72,810.15Q247.97,800.31 213,779.1Q185.38,795.41 156.17,805.24Q126.95,815.08 100,818.46ZM100,675.38L100,580Q100,487.67 136.37,410.67Q172.74,333.67 235.13,277.87Q297.51,222.08 381.29,191.04Q465.08,160 560,160Q582.49,160 605.14,161.81Q627.79,163.62 647.44,166.64Q632.64,196.18 624.78,226.63Q616.92,257.08 616.92,283.92Q616.92,348.51 662.67,395.79Q708.41,443.08 773,443.08L860,443.08L860,476.92L773,476.92Q693.59,476.92 638.33,420.13Q583.08,363.33 583.08,283.92Q583.08,263.51 588,237.99Q592.92,212.46 600.67,192.03Q501.13,208.79 439.03,279.91Q376.92,351.03 376.92,440.77Q376.92,496.05 392.45,538.45Q407.97,580.85 434.72,621.13Q445.85,615.31 458.26,607.6Q470.67,599.9 480.77,592.9Q512.38,616.44 548.62,629.26Q584.85,642.08 615,642.08Q645,642.08 680.9,628.88Q716.79,615.69 749,592.9Q774.64,611.2 802.81,624.29Q830.97,637.38 860,641.54L860,675.38Q834.74,672.77 806.19,661.78Q777.64,650.79 749,633.72Q713.1,655.77 679.79,666.35Q646.49,676.92 615,676.92Q582.23,676.92 545.85,664.46Q509.46,652 481,633.72Q446.77,654.92 415.85,665.81Q384.92,676.69 347,676.92Q309.13,677 277.33,666.28Q245.54,655.56 213,636.03Q185.38,652.33 156.17,662.17Q126.95,672 100,675.38Z"/>
+</vector>
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024__15_53__Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024__15_53__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024__15_53__Changes_.xml
new file mode 100644
--- /dev/null	(date 1715443589420)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024__15_53__Changes_.xml	(date 1715443589420)
@@ -0,0 +1,94 @@
+<changelist name="Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]" date="1715349250043" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 10/05/2024, 15:53 [Changes]" />
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable/fisk6.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/fisk6.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable-hdpi/uv.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/uv.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable-hdpi/waveheight.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/waveheight.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable-mdpi/waveheight.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/waveheight1.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable-xhdpi/uv.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/uv1.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable-xhdpi/waveheight.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/waveheight2.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable/skilpadde.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/skilpadde.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable-mdpi/uv.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/uv2.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable/flounder.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/flounder.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable/fisk.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/fisk.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable/logo.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/logo.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable/fisk4.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/fisk4.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable-xxhdpi/waveheight.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/waveheight3.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable-xxhdpi/uv.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/uv3.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable/fiks3.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/fiks3.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable/fisk8.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/fisk8.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable/fisk5.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/fisk5.png" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" />
+    <option name="AFTER_PATH" value="app/src/main/res/drawable/fisk2.png" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/fisk2.png" />
+  </binary>
+</changelist>
\ No newline at end of file
Index: app/src/main/res/drawable-anydpi/uv.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable-anydpi/uv.xml b/app/src/main/res/drawable-anydpi/uv.xml
new file mode 100644
--- /dev/null	(date 1715443589428)
+++ b/app/src/main/res/drawable-anydpi/uv.xml	(date 1715443589428)
@@ -0,0 +1,11 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="960"
+    android:viewportHeight="960"
+    android:tint="#333333"
+    android:alpha="0.6">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M480,640Q413.15,640 366.58,593.42Q320,546.85 320,480Q320,413.15 366.58,366.58Q413.15,320 480,320Q546.85,320 593.42,366.58Q640,413.15 640,480Q640,546.85 593.42,593.42Q546.85,640 480,640ZM200,496.92L60,496.92L60,463.08L200,463.08L200,496.92ZM900,496.92L760,496.92L760,463.08L900,463.08L900,496.92ZM463.08,200L463.08,60L496.92,60L496.92,200L463.08,200ZM463.08,900L463.08,760L496.92,760L496.92,900L463.08,900ZM271.79,293.9L185.56,209.97L209.13,184.56L293.59,269.95L271.79,293.9ZM751.03,775.28L666.18,689.82L688.87,665.95L774.44,750.03L751.03,775.28ZM665.95,271.13L750.03,185.56L775.44,208.97L690.21,293.74L665.95,271.13ZM184.72,750.87L270.03,666.03L292.51,688.36L209.21,775.21L184.72,750.87Z"/>
+</vector>
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1715443589419)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_10_05_2024,_15_53_[Changes]/shelved.patch	(date 1715443589419)
@@ -0,0 +1,2844 @@
+Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package no.uio.ifi.in2000.prosjekt.ui.home\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.os.Build\nimport android.util.Log\nimport androidx.annotation.RequiresApi\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.expandVertically\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.shrinkVertically\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.gestures.detectHorizontalDragGestures\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.heightIn\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Delete\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\n\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\n\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.platform.LocalSoftwareKeyboardController\nimport androidx.compose.ui.text.input.ImeAction\n\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.ui.window.PopupProperties\nimport androidx.core.app.ActivityCompat\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport kotlinx.coroutines.delay\n\nimport no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme\nimport kotlin.math.abs\nimport kotlin.math.round\nimport kotlin.math.roundToInt\n\n@OptIn(ExperimentalComposeUiApi::class)\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun HomeScreen(activity: Activity, navController: NavController, homeScreenViewModel: HomeScreenViewModel = viewModel()) {\n    val context = LocalContext.current\n    val keyboardController = LocalSoftwareKeyboardController.current\n    var text by remember { mutableStateOf(\"\") }\n    val weatherState = homeScreenViewModel.locationUIState.collectAsState()\n\n    // En liste som tar inn slettede WeatherBox-objekter. De slettes fra lista kort tid etter de kommer inn, slik at man kan legge til samme sted igjen.\n    val deletedItem = remember { mutableStateListOf<String>() }\n    var boxCount by remember { mutableIntStateOf(weatherState.value.combinedDataMap.size) }\n\n    var showSuggestions by remember { mutableStateOf(false) }\n\n\n    // Oppdaterer antall elementer til mapen hele tiden, pga kan maks legge til tre favorittsteder.\n    LaunchedEffect(weatherState.value) {\n        boxCount = weatherState.value.combinedDataMap.size\n    }\n\n    Box( // lager en box, slik at lazycolumn kan overskride de andre UI-komponentene i appen.\n    ) {\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .background(Color(0xFF1F3468)),\n            horizontalAlignment = Alignment.CenterHorizontally\n\n        ) {\n            Spacer(modifier = Modifier.weight(1f))\n            TextField(\n                value = text,\n                onValueChange = { newValue ->\n                    text = newValue\n                    showSuggestions = newValue.isNotEmpty()\n                    if (newValue.isNotEmpty()) {\n                        homeScreenViewModel.fetchSuggestions(newValue)\n                    }\n                },\n                trailingIcon = {\n                    Icon(\n                        imageVector = Icons.Filled.LocationOn,\n                        contentDescription = \"Location\",\n                        modifier = Modifier.clickable { getLocation(context, activity, navController) }\n                    )\n                },\n                label = { Text(\"Skriv her\") },\n                modifier = Modifier\n                    .fillMaxWidth(0.9f),\n                shape = RoundedCornerShape(20.dp),\n                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() })\n            )\n\n            Spacer(modifier = Modifier.weight(0.2f))\n\n            Text(text = \"Legg til dine favorittsteder!\", color = Color.White)\n\n            // To lambda-funksjoner, som legger og fjerner til fra deleteItems-list.\n            val addToDeletedItem: (String) -> Unit = {item ->\n                deletedItem.add(item)\n            }\n            val deleteDeletedItem: (String) -> Unit = {item->\n                deletedItem.remove(item)\n            }\n            Column(\n                modifier = Modifier\n                    .fillMaxWidth(1f)\n                    .fillMaxHeight(0.5f)\n                //.background(Color.Black)\n            ) {\n                weatherState.value.combinedDataMap.forEach { (locationKey, weatherData) ->\n                    key(locationKey) {\n                        CustomSwipeToDeleteContainer(\n                            item = locationKey,\n                            onDelete = { location ->\n                                homeScreenViewModel.deleteLocation(location)\n                                homeScreenViewModel.triggerSaveState(context, homeScreenViewModel.locationUIState.value)\n                            },\n                            content = { location ->\n                                WeatherBox(\n                                    location = location,\n                                    combinedWeatherData = weatherData,\n                                    navController = navController,\n                                    addToDeletedItem = addToDeletedItem,\n                                    homeScreenViewModel = homeScreenViewModel,\n                                    deleteDeletedItem = deleteDeletedItem\n                                )\n                            }\n                        )\n                    }\n                }\n                AnimatedVisibility(\n                    visible = boxCount < 3,\n                    enter = expandVertically(),\n                    exit = shrinkVertically(animationSpec = tween(1000)),\n                ) {\n                    AddLocationUi(homeScreenViewModel = homeScreenViewModel)\n                }\n\n            }\n\n            Spacer(modifier = Modifier.weight(0.5f))\n            RunBottomBar(navController = navController) //Kjører navigationbar\n        }\n        if (showSuggestions) {\n            LazyColumn(\n                modifier = Modifier\n                    //.offset(y = 100.dp)\n                    .padding(top = 230.dp)\n                    .fillMaxWidth(0.8f)\n                    .background(Color(0xFFCFE3F3))\n                    .heightIn(max = 250.dp)\n                    .align(Alignment.TopCenter)\n\n            ) {\n                items(weatherState.value.suggestion ?: emptyList()) { suggestion ->\n                    Text(\n                        text = suggestion.properties.label,\n                        modifier = Modifier\n                            .fillMaxWidth()\n                            .clickable {\n                                text = suggestion.properties.label\n                                showSuggestions = false\n                                homeScreenViewModel.clearSuggestions()\n                                Log.d(\"kordinater\", suggestion.geometry.coordinates.toString())\n                                val kordinatString =\n                                    suggestion.geometry.coordinates[1] + \", \" + suggestion.geometry.coordinates[0]\n                                navController.navigate(\"infoStederScreen/${kordinatString}/${text}\")\n\n                            }\n                            .padding(8.dp),\n                    )\n                }\n            }\n        }\n    }\n}\nprivate const val REQUEST_LOCATION_PERMISSION_CODE = 0\n\nfun getLocation(context : Context, activity: Activity, navController: NavController){\n    var fusedLocationClient : FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)\n    val sharedPreferences = context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE) // User preferences\n    val isLocationPermissionGranted = sharedPreferences.getBoolean(\"location_permission_enabled\", false)\n    if (!isLocationPermissionGranted && (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED ||\n                ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {\n        navController.navigate(\"Settings\")\n\n        ActivityCompat.requestPermissions(\n            activity,\n            arrayOf<String>(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ),\n            100\n        )\n    }\n    else if(ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_FINE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_COARSE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED){\n        ActivityCompat.requestPermissions(\n            activity,\n            arrayOf<String>(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ),\n            100\n        )\n\n    }\n    else{\n        if(isLocationPermissionGranted) {\n\n            fusedLocationClient.lastLocation\n                .addOnSuccessListener { location: Location? ->\n                    Log.d(\"Location\", location.toString())\n                }\n\n            return\n        }\n        else{\n            navController.navigate(\"Innstillinger\")\n        }\n    }\n}\n@Composable\n@ExperimentalMaterial3Api\nfun CustomSwipeToDismiss(\n    onSwiped: () -> Unit,\n    onDeleted: () -> Unit,\n    background: @Composable RowScope.() -> Unit,\n    dismissContent: @Composable RowScope.() -> Unit,\n    modifier: Modifier = Modifier,\n) {\n    var isSwiped by remember {\n        mutableStateOf(false)\n    }\n\n    var offsetX by remember { mutableFloatStateOf(0f) }\n    val animatedOffset by animateFloatAsState(targetValue = offsetX, label = \"\")\n    val screenWidth = LocalConfiguration.current.screenWidthDp\n    val screenWidthPx = with(LocalDensity.current) { screenWidth.dp.toPx() }\n\n    Box(\n        modifier.pointerInput(Unit) {\n\n            detectHorizontalDragGestures(\n                onHorizontalDrag = { change, dragAmount ->\n                    change.consume()\n\n                    // If the background is revealed, allow the user to swipe it back out to the right\n                    if (dragAmount > 0f) {\n                        if (isSwiped && offsetX < 0f) {\n                            if ((offsetX + dragAmount) > 0f) {\n                                offsetX = 0f\n                            } else {\n                                offsetX += dragAmount\n                            }\n                        }\n                        return@detectHorizontalDragGestures\n                    }\n\n                    // Store swipe offset from right to left\n                    offsetX += dragAmount\n                },\n                onDragEnd = {\n                    val absOffsetX = abs(offsetX) // compare using positive value\n\n                    // If the user has dragged the item more than half of the screen width, delete it\n                    if (absOffsetX >= screenWidthPx / 2 && absOffsetX < screenWidthPx) {\n                        offsetX = -(screenWidthPx)\n                        onDeleted()\n                    }\n\n                    // If the user has dragged the item more than a fifth of the screen width, swipe it to reveal background\n                    else if (absOffsetX >= screenWidthPx / 5 && absOffsetX < screenWidthPx / 2) {\n                        offsetX = -(60.dp.toPx())\n                        isSwiped = true\n                        onSwiped()\n                    } else {\n                        offsetX = 0f\n                    }\n                }\n            )\n        }\n    ) {\n        Row(\n            content = background, modifier = Modifier\n                .matchParentSize()\n                .clickable {\n                    offsetX = -(screenWidthPx)\n                    onDeleted()\n                }\n        )\n        Row(content = dismissContent,\n            modifier = Modifier.offset {\n                IntOffset(animatedOffset.roundToInt(), 0)\n            })\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun <T> CustomSwipeToDeleteContainer(\n    item: T, onDelete: (T) -> Unit, animationDuration: Int = 500, content: @Composable (T) -> Unit\n) {\n\n    var isRemoved by remember {\n        mutableStateOf(false)\n    }\n    var isActive by remember {\n        mutableStateOf(false)\n    }\n\n    LaunchedEffect(isRemoved) {\n        if (isRemoved) {\n            delay(animationDuration.toLong())\n            onDelete(item)\n        }\n    }\n\n    AnimatedVisibility(\n        visible = !isRemoved, exit = shrinkVertically(\n            animationSpec = tween(durationMillis = animationDuration), shrinkTowards = Alignment.Top\n        ) + fadeOut()\n    ) {\n        CustomSwipeToDismiss(\n            onSwiped = {\n                isActive = true\n            },\n            onDeleted = {\n                isRemoved = true\n            },\n            background = {\n                CustomDeleteBackground()\n\n\n            },\n            dismissContent = { content(item) },\n        )\n    }\n}\n\n@Composable\nfun CustomDeleteBackground(\n) {\n    Card(\n        modifier = Modifier\n            .padding(8.dp)\n            .fillMaxWidth(1f)\n            .height(80.dp), // Setter akkurat likt som WeatherBox, slik at den røde bakgrunnsfargen ikke er synlig når brukeren ikke swiper.\n        colors = CardDefaults.cardColors(Color.Red)\n    ) {\n        // Lager en Box for å plassere ikonet på høyre siden.\n        Box(\n            contentAlignment = Alignment.CenterEnd,\n            modifier = Modifier\n                .fillMaxSize() // Fyll hele Card\n        ) {\n            Icon(\n                imageVector = Icons.Default.Delete,\n                contentDescription = \"Slett\",\n                modifier = Modifier\n                    .padding(16.dp), // Padding inne i Box\n                tint = Color.White\n            )\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun WeatherBox(location: String,\n               combinedWeatherData: CombinedWeatherData?,\n               navController: NavController,\n               addToDeletedItem: (String) -> Unit,\n               homeScreenViewModel: HomeScreenViewModel,\n               deleteDeletedItem: (String) -> Unit)\n{\n    val context = LocalContext.current\n    val sted = combinedWeatherData?.bigDataCloud?.city\n    val placeName = combinedWeatherData?.enTurLocationName\n    val placeNameSplit = placeName?.split(\",\")\n\n    Card(\n        modifier = Modifier\n            .padding(8.dp)\n            .fillMaxWidth(1f)\n            .heightIn(min = 80.dp)\n            .clickable {\n                Log.d(\"Cordinates\", location)\n                navController.navigate(\"infoStederScreen/${location}/${sted}\")\n            },\n        colors = CardDefaults.cardColors(\n            containerColor = Color(0xFFBEDDF5)\n        )\n    ) {\n        Row(\n            modifier = Modifier\n                .heightIn(min = 80.dp)\n                .fillMaxWidth(),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Column(modifier = Modifier.weight(0.27f).background(Color(0xFFBEDDF5)).padding(10.dp)) {\n\n                    if (placeNameSplit != null) {\n                        Text(\n\n                            text = if(placeNameSplit.size > 1)\"\" + (placeNameSplit?.get(1) ?: \"\") else \"Sted\",\n                            color = Color.Black,\n                            style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp)\n                        )\n                    }\n\n                    Text(\n                        text = placeNameSplit?.get(0) ?: \"\",\n                        color = Color.Black,\n                        style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                    )\n                }\n\n            val airTemperature = combinedWeatherData?.weatherData?.properties?.timeseries?.firstOrNull()?.data?.instant?.details?.get(\"air_temperature\")\n           // Spacer(modifier = Modifier.weight(1f)) // Legger til horisontalt mellomrom\n            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {\n                Text(\n                    text = \"LuftTemp:\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp)\n                )\n                Text(\n                    text = \"${airTemperature}°C\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                )\n            }\n            //Spacer(modifier = Modifier.weight(1f))\n\n            val seaTemperature = combinedWeatherData?.dataProjectionMain?.data?.get(0)?.data?.find{it.key == \"temperature\"}?.value\n            val doubleSeaTemperature = seaTemperature?.toDouble()\n            val roundSeaTemperature = doubleSeaTemperature?.let{ round(it)}\n            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {\n                Text(\n                    text = \"SjøTemp:\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp)\n                )\n                Text(\n                    text = \"${roundSeaTemperature}°C\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                )\n            }\n           // Spacer(modifier = Modifier.weight(1f))\n            val seaSalinity = combinedWeatherData?.dataProjectionMain?.data?.get(0)?.data?.find{it.key == \"salinity\"}?.value\n            val doubleSeaSalinity = seaSalinity?.toDouble()\n            val roundSeaSalinity = doubleSeaSalinity?.let{ round(it)}\n            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {\n                Text(\n                    text = \"Salinity:\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp),\n\n                )\n                Text(\n                    text = \"${roundSeaSalinity}‰\",\n                    color = Color.Black,\n                    style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)\n                )\n            }\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun AddLocationUi(homeScreenViewModel: HomeScreenViewModel){\n    val context = LocalContext.current\n    var showInput by remember { mutableStateOf(false) }\n    var newLocationName by remember{ mutableStateOf(\"\") }\n    val keyboardController = LocalSoftwareKeyboardController.current\n\n    val locationUIState by homeScreenViewModel.locationUIState.collectAsState()\n\n\n    if (!showInput){\n        Card(\n            modifier = Modifier\n                .padding(8.dp)\n                .heightIn(min = 80.dp)\n                .fillMaxWidth(1f),\n            colors = CardDefaults.cardColors(\n                containerColor = Color.White\n            )\n        ) {\n            Row(\n                modifier = Modifier\n                    .heightIn(min = 80.dp)\n                    .fillMaxWidth(),\n                horizontalArrangement = Arrangement.Center ,\n                verticalAlignment = Alignment.CenterVertically\n            ){\n                IconButton(\n                    onClick = { showInput = true }\n                )\n                {\n                    Icon(\n                        imageVector = Icons.Filled.Add,\n                        contentDescription = \"Legg til\",\n                        modifier = Modifier.size(40.dp),\n                        tint = Color.Black\n                    )\n\n                }\n            }\n        }\n    }else{\n        val scrollState = rememberScrollState()\n        Popup(\n            onDismissRequest = {},\n            properties = PopupProperties(\n                focusable = true,\n                dismissOnBackPress = false,\n                dismissOnClickOutside = false,\n                excludeFromSystemGesture = true,\n            )\n        )\n        {\n            Box(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .background(Color.Transparent.copy(alpha = 0.8f))\n\n            ) {\n                Card (\n                    shape = RoundedCornerShape(20.dp),\n                    modifier = Modifier\n                        .align(Alignment.TopCenter)\n                        .padding(top = 72.dp)\n                        .fillMaxWidth(0.9f)\n                        .fillMaxHeight(0.5f),\n                    colors = CardDefaults.cardColors(containerColor = Color(0xFF1F3468))\n\n\n                ){\n                    Row(\n                        modifier = Modifier\n\n                    ) {\n                        IconButton(\n                            onClick = {\n                                showInput = false\n                                homeScreenViewModel.clearSuggestions()\n                                newLocationName = \"\"\n                            }\n                        )\n                        {\n                            Icon(\n                                imageVector = Icons.Filled.Clear,\n                                contentDescription = \"Tilbake\",\n                                modifier = Modifier.size(40.dp), // Juster størrelsen etter behov\n                                tint = Color.White // Juster fargen etter ønske\n                            )\n                        }\n                    }\n                    Row(\n                        horizontalArrangement = Arrangement.Center ,\n                        verticalAlignment = Alignment.CenterVertically,\n                        modifier = Modifier\n                            .fillMaxSize()\n                    ){\n                        Column(\n                            modifier = Modifier\n                                .padding(top = 24.dp)\n                                .fillMaxSize(),\n\n                            horizontalAlignment = Alignment.CenterHorizontally,\n\n                            ) {\n                            TextField(\n                                value = newLocationName,\n\n                                onValueChange = {newLocationName = it\n                                    homeScreenViewModel.fetchSuggestions(it)\n                                    if (newLocationName.isNotEmpty()){\n                                        homeScreenViewModel.clearSuggestions()\n                                    }\n\n                                },\n\n                                shape = RoundedCornerShape(20.dp),\n                                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                                keyboardActions = KeyboardActions(onDone = {\n                                    if (newLocationName.isNotEmpty()){\n                                        homeScreenViewModel.addLocationByName(newLocationName, context)\n                                        newLocationName = \"\"\n                                        showInput = false\n                                        keyboardController?.hide()\n                                    }\n                                }\n                                ),\n                                modifier = Modifier\n                                    .fillMaxWidth(0.9f),\n                                label = { Text(\"Legg til favorittsted!\")},\n                            )\n                            Column(\n                                modifier = Modifier\n                                    .verticalScroll(scrollState)\n                                    .padding(3.dp)\n\n\n                            ) {\n                                locationUIState.suggestion?.forEach{suggestion->\n                                    Text(\n                                        text = suggestion.properties.label,\n                                        modifier = Modifier\n                                            .background(Color(0xFFCFE3F3))\n                                            .fillMaxWidth(0.8f)\n                                            .clickable {\n                                                newLocationName = suggestion.properties.label\n                                                homeScreenViewModel.addLocationByName(\n                                                    newLocationName, context\n                                                )\n\n                                                homeScreenViewModel.clearSuggestions()\n                                                showInput = false\n\n                                            }\n                                            .padding(8.dp)\n                                    )\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt
+--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/home/Homescreen.kt	(date 1715349197946)
+@@ -14,12 +14,16 @@
+ import androidx.compose.animation.expandVertically
+ import androidx.compose.animation.fadeOut
+ import androidx.compose.animation.shrinkVertically
++import androidx.compose.foundation.ExperimentalFoundationApi
++import androidx.compose.foundation.Image
+ import androidx.compose.foundation.background
+ import androidx.compose.foundation.clickable
+ import androidx.compose.foundation.gestures.detectHorizontalDragGestures
+ import androidx.compose.foundation.layout.Arrangement
+ import androidx.compose.foundation.layout.Box
+ import androidx.compose.foundation.layout.Column
++
++
+ import androidx.compose.foundation.layout.Row
+ import androidx.compose.foundation.layout.RowScope
+ import androidx.compose.foundation.layout.Spacer
+@@ -31,6 +35,7 @@
+ import androidx.compose.foundation.layout.offset
+ import androidx.compose.foundation.layout.padding
+ import androidx.compose.foundation.layout.size
++import androidx.compose.foundation.layout.width
+ import androidx.compose.foundation.lazy.LazyColumn
+ import androidx.compose.foundation.lazy.items
+ import androidx.compose.foundation.rememberScrollState
+@@ -48,16 +53,18 @@
+ import androidx.compose.material3.ExperimentalMaterial3Api
+ import androidx.compose.material3.Icon
+ import androidx.compose.material3.IconButton
++import androidx.compose.material3.Scaffold
+ import androidx.compose.material3.Text
+ import androidx.compose.material3.TextField
++import androidx.compose.material3.TopAppBar
+ import androidx.compose.runtime.Composable
+ import androidx.compose.runtime.LaunchedEffect
++import androidx.compose.runtime.SideEffect
+ import androidx.compose.runtime.collectAsState
+ import androidx.compose.runtime.getValue
+ import androidx.compose.runtime.key
+ import androidx.compose.runtime.mutableFloatStateOf
+ import androidx.compose.runtime.mutableIntStateOf
+-import androidx.compose.runtime.mutableStateListOf
+ import androidx.compose.runtime.mutableStateOf
+ import androidx.compose.runtime.remember
+ 
+@@ -66,105 +73,120 @@
+ import androidx.compose.ui.ExperimentalComposeUiApi
+ import androidx.compose.ui.Modifier
+ import androidx.compose.ui.graphics.Color
++import androidx.compose.ui.graphics.toArgb
+ 
+ import androidx.compose.ui.input.pointer.pointerInput
++import androidx.compose.ui.layout.ContentScale
++import androidx.compose.ui.layout.onGloballyPositioned
+ import androidx.compose.ui.platform.LocalConfiguration
+ import androidx.compose.ui.platform.LocalContext
+ import androidx.compose.ui.platform.LocalDensity
+ import androidx.compose.ui.platform.LocalSoftwareKeyboardController
++import androidx.compose.ui.res.painterResource
+ import androidx.compose.ui.text.input.ImeAction
+ 
+-import androidx.compose.ui.tooling.preview.Preview
+ import androidx.compose.ui.unit.IntOffset
+ import androidx.compose.ui.unit.dp
+ import androidx.compose.ui.unit.sp
+ import androidx.compose.ui.window.Popup
+ import androidx.compose.ui.window.PopupProperties
+ import androidx.core.app.ActivityCompat
++import androidx.core.view.WindowCompat
+ import androidx.lifecycle.viewmodel.compose.viewModel
+ import androidx.navigation.NavController
+ import com.google.android.gms.location.FusedLocationProviderClient
+ import com.google.android.gms.location.LocationServices
+ import kotlinx.coroutines.delay
++import no.uio.ifi.in2000.prosjekt.R
+ 
+-import no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme
++
+ import kotlin.math.abs
+ import kotlin.math.round
+ import kotlin.math.roundToInt
+ 
+-@OptIn(ExperimentalComposeUiApi::class)
+-@RequiresApi(Build.VERSION_CODES.O)
++
++@Composable
++fun Logo(){
++    Column(
++        modifier = Modifier
++
++    ) {
++        Image(
++            painter = painterResource(id = R.drawable.logo),
++            contentDescription = "Logo",
++            modifier = Modifier
++                .fillMaxWidth()
++                .fillMaxHeight(),
++            contentScale = ContentScale.FillWidth
++        )
++    }
++}
++
++
++
+ @Composable
++@OptIn(ExperimentalComposeUiApi::class, ExperimentalFoundationApi::class,
++    ExperimentalMaterial3Api::class
++)
+ fun HomeScreen(activity: Activity, navController: NavController, homeScreenViewModel: HomeScreenViewModel = viewModel()) {
+     val context = LocalContext.current
+     val keyboardController = LocalSoftwareKeyboardController.current
+     var text by remember { mutableStateOf("") }
+     val weatherState = homeScreenViewModel.locationUIState.collectAsState()
+-
+-    // En liste som tar inn slettede WeatherBox-objekter. De slettes fra lista kort tid etter de kommer inn, slik at man kan legge til samme sted igjen.
+-    val deletedItem = remember { mutableStateListOf<String>() }
+-    var boxCount by remember { mutableIntStateOf(weatherState.value.combinedDataMap.size) }
+-
++    val boxCount by remember { mutableIntStateOf(weatherState.value.combinedDataMap.size) }
+     var showSuggestions by remember { mutableStateOf(false) }
+ 
+-
+-    // Oppdaterer antall elementer til mapen hele tiden, pga kan maks legge til tre favorittsteder.
+-    LaunchedEffect(weatherState.value) {
+-        boxCount = weatherState.value.combinedDataMap.size
+-    }
+-
+-    Box( // lager en box, slik at lazycolumn kan overskride de andre UI-komponentene i appen.
+-    ) {
+-        Column(
+-            modifier = Modifier
+-                .fillMaxWidth()
+-                .background(Color(0xFF1F3468)),
+-            horizontalAlignment = Alignment.CenterHorizontally
++    Scaffold(
++        bottomBar = { RunBottomBar(navController = navController) } // Setter bottomBar i Scaffold
++    ) { paddingValues ->
++        Box(
++            modifier = Modifier
++                .fillMaxSize()
++                .padding(bottom = paddingValues.calculateBottomPadding()) // Gir plass for BottomBar
++        ) {
++            LazyColumn(
++                modifier = Modifier
++                    .fillMaxSize()
++                    .background(Color(0xFF1F3468)),
++                horizontalAlignment = Alignment.CenterHorizontally
++            ) {
++                item {
++                  Logo()
++                }
+ 
+-        ) {
+-            Spacer(modifier = Modifier.weight(1f))
+-            TextField(
+-                value = text,
+-                onValueChange = { newValue ->
+-                    text = newValue
+-                    showSuggestions = newValue.isNotEmpty()
+-                    if (newValue.isNotEmpty()) {
+-                        homeScreenViewModel.fetchSuggestions(newValue)
+-                    }
+-                },
+-                trailingIcon = {
+-                    Icon(
+-                        imageVector = Icons.Filled.LocationOn,
+-                        contentDescription = "Location",
+-                        modifier = Modifier.clickable { getLocation(context, activity, navController) }
+-                    )
+-                },
+-                label = { Text("Skriv her") },
+-                modifier = Modifier
+-                    .fillMaxWidth(0.9f),
+-                shape = RoundedCornerShape(20.dp),
+-                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
+-                keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() })
+-            )
+-
+-            Spacer(modifier = Modifier.weight(0.2f))
+-
+-            Text(text = "Legg til dine favorittsteder!", color = Color.White)
+-
+-            // To lambda-funksjoner, som legger og fjerner til fra deleteItems-list.
+-            val addToDeletedItem: (String) -> Unit = {item ->
+-                deletedItem.add(item)
+-            }
+-            val deleteDeletedItem: (String) -> Unit = {item->
+-                deletedItem.remove(item)
+-            }
+-            Column(
+-                modifier = Modifier
+-                    .fillMaxWidth(1f)
+-                    .fillMaxHeight(0.5f)
+-                //.background(Color.Black)
+-            ) {
+-                weatherState.value.combinedDataMap.forEach { (locationKey, weatherData) ->
++                //item {Spacer(modifier = Modifier.height(30.dp))}
++
++                stickyHeader {
++                    TextField(
++                        value = text,
++                        onValueChange = { newValue ->
++                            text = newValue
++                            showSuggestions = newValue.isNotEmpty()
++                            if (newValue.isNotEmpty()) {
++                                homeScreenViewModel.fetchSuggestions(newValue)
++                            }
++                        },
++                        trailingIcon = {
++                            Icon(
++                                imageVector = Icons.Filled.LocationOn,
++                                contentDescription = "Location",
++                                modifier = Modifier.clickable { getLocation(context, activity, navController) }
++                            )
++                        },
++                        label = { Text("Skriv her") },
++                        modifier = Modifier
++                            .fillMaxWidth(0.9f),
++                        shape = RoundedCornerShape(20.dp),
++                        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
++                        keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() })
++                    )
++                }
++                item{
++                    Spacer(modifier = Modifier.height(8.dp))
++                }
++                item { Text(text = "Legg til dine favorittsteder!", color = Color.White)}
++
++                items(weatherState.value.combinedDataMap.entries.toList()) { (locationKey, weatherData) ->
+                     key(locationKey) {
+                         CustomSwipeToDeleteContainer(
+                             item = locationKey,
+@@ -177,55 +199,95 @@
+                                     location = location,
+                                     combinedWeatherData = weatherData,
+                                     navController = navController,
+-                                    addToDeletedItem = addToDeletedItem,
+                                     homeScreenViewModel = homeScreenViewModel,
+-                                    deleteDeletedItem = deleteDeletedItem
++
+                                 )
+                             }
+                         )
+                     }
+                 }
+-                AnimatedVisibility(
+-                    visible = boxCount < 3,
+-                    enter = expandVertically(),
+-                    exit = shrinkVertically(animationSpec = tween(1000)),
+-                ) {
+-                    AddLocationUi(homeScreenViewModel = homeScreenViewModel)
+-                }
+-
+-            }
+-
+-            Spacer(modifier = Modifier.weight(0.5f))
+-            RunBottomBar(navController = navController) //Kjører navigationbar
+-        }
+-        if (showSuggestions) {
+-            LazyColumn(
+-                modifier = Modifier
+-                    //.offset(y = 100.dp)
+-                    .padding(top = 230.dp)
+-                    .fillMaxWidth(0.8f)
+-                    .background(Color(0xFFCFE3F3))
+-                    .heightIn(max = 250.dp)
+-                    .align(Alignment.TopCenter)
+-
+-            ) {
+-                items(weatherState.value.suggestion ?: emptyList()) { suggestion ->
+-                    Text(
+-                        text = suggestion.properties.label,
+-                        modifier = Modifier
+-                            .fillMaxWidth()
+-                            .clickable {
+-                                text = suggestion.properties.label
+-                                showSuggestions = false
+-                                homeScreenViewModel.clearSuggestions()
+-                                Log.d("kordinater", suggestion.geometry.coordinates.toString())
+-                                val kordinatString =
+-                                    suggestion.geometry.coordinates[1] + ", " + suggestion.geometry.coordinates[0]
+-                                navController.navigate("infoStederScreen/${kordinatString}/${text}")
+-
+-                            }
+-                            .padding(8.dp),
+-                    )
++                item {
++                    AnimatedVisibility(
++                        visible = boxCount < 25,
++                        enter = expandVertically(),
++                        exit = shrinkVertically(animationSpec = tween(1000))
++                    ) {
++                        AddLocationUi(homeScreenViewModel = homeScreenViewModel)
++                    }
++                }
++            }
++
++
++            if (showSuggestions) {
++                Box(
++                    modifier = Modifier
++                        .matchParentSize()
++                        .background(Color(0xFF1F3468).copy(alpha = 1f))
++                        .clickable {
++                            showSuggestions = false
++                            text = ""
++                            keyboardController?.hide()
++                            homeScreenViewModel.clearSuggestions()
++                        }
++                ) {
++                    Column(
++                        modifier = Modifier
++                            .fillMaxWidth()
++                            .padding(top = 16.dp),
++                        horizontalAlignment = Alignment.CenterHorizontally
++                    ) {
++                        TextField(
++                            value = text,
++                            onValueChange = { newValue ->
++                                text = newValue
++                                showSuggestions = newValue.isNotEmpty()
++                                if (newValue.isNotEmpty()) {
++                                    homeScreenViewModel.fetchSuggestions(newValue)
++                                }
++                            },
++                            trailingIcon = {
++                                Icon(
++                                    imageVector = Icons.Filled.LocationOn,
++                                    contentDescription = "Location",
++                                    modifier = Modifier.clickable { getLocation(context, activity, navController) }
++                                )
++                            },
++                            label = { Text("Skriv her") },
++                            modifier = Modifier
++                                .fillMaxWidth(0.9f),
++                            shape = RoundedCornerShape(20.dp),
++                            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
++                            keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() })
++                        )
++                    }
++
++                    LazyColumn(
++                        modifier = Modifier
++                            .padding(top = 80.dp)
++                            .fillMaxWidth(0.8f)
++                            .background(Color(0xFFCFE3F3))
++                            .heightIn(max = 250.dp)
++                            .align(Alignment.TopCenter)
++                    ) {
++
++                        items(weatherState.value.suggestion ?: emptyList()) { suggestion ->
++                            Text(
++                                text = suggestion.properties.label,
++                                modifier = Modifier
++                                    .fillMaxWidth()
++                                    .clickable {
++                                        text = suggestion.properties.label
++                                        showSuggestions = false
++                                        homeScreenViewModel.clearSuggestions()
++                                        val coordinates = suggestion.geometry.coordinates
++                                        val coordinateString =
++                                            "${coordinates[1]}, ${coordinates[0]}"
++                                        navController.navigate("infoStederScreen/$coordinateString/$text")
++                                    }
++                                    .padding(8.dp),
++                            )
++                        }
++                    }
+                 }
+             }
+         }
+@@ -234,7 +296,7 @@
+ private const val REQUEST_LOCATION_PERMISSION_CODE = 0
+ 
+ fun getLocation(context : Context, activity: Activity, navController: NavController){
+-    var fusedLocationClient : FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)
++    val fusedLocationClient : FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)
+     val sharedPreferences = context.getSharedPreferences("MyPrefs", Context.MODE_PRIVATE) // User preferences
+     val isLocationPermissionGranted = sharedPreferences.getBoolean("location_permission_enabled", false)
+     if (!isLocationPermissionGranted && (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED ||
+@@ -347,8 +409,10 @@
+             content = background, modifier = Modifier
+                 .matchParentSize()
+                 .clickable {
+-                    offsetX = -(screenWidthPx)
+-                    onDeleted()
++                    if (isSwiped) {
++                        offsetX = -(screenWidthPx)
++                        onDeleted()
++                    }
+                 }
+         )
+         Row(content = dismissContent,
+@@ -392,8 +456,6 @@
+             },
+             background = {
+                 CustomDeleteBackground()
+-
+-
+             },
+             dismissContent = { content(item) },
+         )
+@@ -432,9 +494,9 @@
+ fun WeatherBox(location: String,
+                combinedWeatherData: CombinedWeatherData?,
+                navController: NavController,
+-               addToDeletedItem: (String) -> Unit,
+                homeScreenViewModel: HomeScreenViewModel,
+-               deleteDeletedItem: (String) -> Unit)
++)
++
+ {
+     val context = LocalContext.current
+     val sted = combinedWeatherData?.bigDataCloud?.city
+@@ -452,35 +514,41 @@
+             },
+         colors = CardDefaults.cardColors(
+             containerColor = Color(0xFFBEDDF5)
+-        )
+-    ) {
++        ),
++
++        ) {
+         Row(
+             modifier = Modifier
+                 .heightIn(min = 80.dp)
+                 .fillMaxWidth(),
+             verticalAlignment = Alignment.CenterVertically
+         ) {
+-            Column(modifier = Modifier.weight(0.27f).background(Color(0xFFBEDDF5)).padding(10.dp)) {
++            Column(modifier = Modifier
++                .weight(0.27f)
++                .background(Color(0xFFBEDDF5))
++                .padding(10.dp)) {
+ 
+-                    if (placeNameSplit != null) {
+-                        Text(
++                if (placeNameSplit != null) {
++                    Text(
+ 
+-                            text = if(placeNameSplit.size > 1)"" + (placeNameSplit?.get(1) ?: "") else "Sted",
+-                            color = Color.Black,
+-                            style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp)
+-                        )
+-                    }
++                        text = if(placeNameSplit.size > 1)"" + (placeNameSplit?.get(1) ?: "") else "Sted",
++                        color = Color.Black,
++                        style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp)
++                    )
++                }
+ 
+-                    Text(
+-                        text = placeNameSplit?.get(0) ?: "",
+-                        color = Color.Black,
+-                        style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)
+-                    )
+-                }
++                Text(
++                    text = placeNameSplit?.get(0) ?: "",
++                    color = Color.Black,
++                    style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)
++                )
++            }
+ 
+             val airTemperature = combinedWeatherData?.weatherData?.properties?.timeseries?.firstOrNull()?.data?.instant?.details?.get("air_temperature")
+-           // Spacer(modifier = Modifier.weight(1f)) // Legger til horisontalt mellomrom
+-            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {
++            // Spacer(modifier = Modifier.weight(1f)) // Legger til horisontalt mellomrom
++            Column(modifier = Modifier
++                .weight(0.21f)
++                .background(Color(0xFFBEDDF5))) {
+                 Text(
+                     text = "LuftTemp:",
+                     color = Color.Black,
+@@ -497,7 +565,9 @@
+             val seaTemperature = combinedWeatherData?.dataProjectionMain?.data?.get(0)?.data?.find{it.key == "temperature"}?.value
+             val doubleSeaTemperature = seaTemperature?.toDouble()
+             val roundSeaTemperature = doubleSeaTemperature?.let{ round(it)}
+-            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {
++            Column(modifier = Modifier
++                .weight(0.21f)
++                .background(Color(0xFFBEDDF5))) {
+                 Text(
+                     text = "SjøTemp:",
+                     color = Color.Black,
+@@ -509,17 +579,19 @@
+                     style = androidx.compose.ui.text.TextStyle(fontSize = 15.sp)
+                 )
+             }
+-           // Spacer(modifier = Modifier.weight(1f))
++            // Spacer(modifier = Modifier.weight(1f))
+             val seaSalinity = combinedWeatherData?.dataProjectionMain?.data?.get(0)?.data?.find{it.key == "salinity"}?.value
+             val doubleSeaSalinity = seaSalinity?.toDouble()
+             val roundSeaSalinity = doubleSeaSalinity?.let{ round(it)}
+-            Column(modifier = Modifier.weight(0.21f).background(Color(0xFFBEDDF5))) {
++            Column(modifier = Modifier
++                .weight(0.21f)
++                .background(Color(0xFFBEDDF5))) {
+                 Text(
+                     text = "Salinity:",
+                     color = Color.Black,
+                     style = androidx.compose.ui.text.TextStyle(fontSize = 10.sp),
+ 
+-                )
++                    )
+                 Text(
+                     text = "${roundSeaSalinity}‰",
+                     color = Color.Black,
+@@ -530,6 +602,7 @@
+     }
+ }
+ 
++
+ @RequiresApi(Build.VERSION_CODES.O)
+ @OptIn(ExperimentalComposeUiApi::class)
+ @Composable
+Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package no.uio.ifi.in2000.prosjekt\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.SharedPreferences\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.os.Build\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.result.ActivityResultLauncher\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.PreviewParameter\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea.DWSscreen\nimport no.uio.ifi.in2000.prosjekt.ui.InfoCards.InfoCards\nimport no.uio.ifi.in2000.prosjekt.ui.InfoScreen.InfoScreen\nimport no.uio.ifi.in2000.prosjekt.ui.InstructionManual.InstructionManualScreen\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MapScreen\nimport no.uio.ifi.in2000.prosjekt.ui.Settings.SettingsScreen\nimport no.uio.ifi.in2000.prosjekt.ui.home.HomeScreen\nimport no.uio.ifi.in2000.prosjekt.ui.home.HomeScreenViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederScreen\nimport no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme\nimport org.osmdroid.config.Configuration\n\nclass MainActivity : ComponentActivity() {\n    private lateinit var requestPermissionLauncher: ActivityResultLauncher<String>\n    private lateinit var sharedPreferences: SharedPreferences\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        requestPermissionLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->\n            if (isGranted) {\n                // Permission was granted\n                // Proceed with accessing the location or enabling location-based features\n                saveLocationPermission(true)\n            } else {\n                saveLocationPermission(false)\n            }\n            //initializeOSMdroidConfiguration()\n        }\n\n        sharedPreferences = getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE)\n\n        val isLocationPermissionGranted = sharedPreferences.getBoolean(\"location_permission_enabled\", false)\n        if (!isLocationPermissionGranted) {\n            // Request location permission only if it's not already granted\n        }\n\n        setContent {\n            MyApplicationTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    HavvarselApp(requestPermission = { requestLocationPermission() }, this)\n                }\n            }\n        }\n    }\n    private fun requestLocationPermission() {\n        // Trigger the permission request\n        requestPermissionLauncher.launch(\"android.permission.ACCESS_FINE_LOCATION\")    }\n    private fun saveLocationPermission(isGranted: Boolean) {\n        // Save the user's answer regarding location permission\n        sharedPreferences.edit().putBoolean(\"location_permission_enabled\", isGranted).apply()\n    }\n//    private fun initializeOSMdroidConfiguration() {\n//        val context = this\n//        val sharedPreferences = context.getSharedPreferences(\"OSMdroid\", Context.MODE_PRIVATE)\n//        Configuration.getInstance().load(context, sharedPreferences)\n//    }\n}\n\n\n\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun HavvarselApp(requestPermission: () -> Unit, activity: Activity) {\n    MyApplicationTheme {\n        val navController = rememberNavController()\n\n        NavHost(navController, startDestination = \"hjem\") {\n            composable(\"hjem\") {\n                HomeScreen(activity, navController)\n            }\n            composable(\"infoStederScreen/{cordinates}/{sted}\") { backStackEntry ->\n                InfoStederScreen(\n                    coordinate = backStackEntry.arguments?.getString(\"cordinates\") ?: \"59.15,10.75\",\n                    sted = backStackEntry.arguments?.getString(\"sted\") ?: \"Oslo\",\n                    navController\n                )\n            }\n            composable(\"Kart\") {\n                MapScreen(activity, navController)\n            }\n            composable(\"Lær\") {\n                InfoScreen(navController = navController)\n            }\n            composable(\"InfoCard/{id}\") { backStackEntry ->\n                InfoCards(id = backStackEntry.arguments?.getString(\"id\"), navController)\n            }\n            composable(\"Innstillinger\"){\n                InstructionManualScreen(navController)\n            }\n            composable(\"DetailedWeather/{coordinates}\"){backStackEntry ->\n                DWSscreen(navController, coordinate = backStackEntry.arguments?.getString(\"cordinates\") ?: \"59.15,10.75\",\n                )\n            }\n        }\n    }\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt
+--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/MainActivity.kt	(date 1715349197945)
+@@ -124,7 +124,7 @@
+                 InstructionManualScreen(navController)
+             }
+             composable("DetailedWeather/{coordinates}"){backStackEntry ->
+-                DWSscreen(navController, coordinate = backStackEntry.arguments?.getString("cordinates") ?: "59.15,10.75",
++                DWSscreen(navController, coordinate = backStackEntry.arguments?.getString("coordinates") ?: "59.15,10.75",
+                 )
+             }
+         }
+Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableDoubleStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport com.mapbox.geojson.Point\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport org.osmdroid.api.IGeoPoint\nimport org.osmdroid.util.GeoPoint\n\nclass MapViewModel : ViewModel() {\n    // Hold state for center and zoom\n    var mapCenter: Point by mutableStateOf(Point.fromLngLat(11.0, 59.0))\n    var zoomLevel: Double by mutableDoubleStateOf(9.0) // Default or restored value\n    private var _centerPoint = MutableStateFlow(Point.fromLngLat(11.0, 59.0))\n    var centerPoint: StateFlow<Point> = _centerPoint.asStateFlow()\n    // Update methods are only called when necessary, not on every user interaction\n    fun updateMapCenter(center: Point) {\n        _centerPoint.value = center\n    }\n    fun updateZoomLevel(zoom: Double) {\n        zoomLevel = zoom\n    }\n}\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt
+--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapViewModel.kt	(date 1715349197946)
+@@ -14,15 +14,18 @@
+ 
+ class MapViewModel : ViewModel() {
+     // Hold state for center and zoom
+-    var mapCenter: Point by mutableStateOf(Point.fromLngLat(11.0, 59.0))
+-    var zoomLevel: Double by mutableDoubleStateOf(9.0) // Default or restored value
+     private var _centerPoint = MutableStateFlow(Point.fromLngLat(11.0, 59.0))
+     var centerPoint: StateFlow<Point> = _centerPoint.asStateFlow()
++    private var _zoomLevel = MutableStateFlow(10.0)
++    var zoomLevel: StateFlow<Double> = _zoomLevel.asStateFlow()
+     // Update methods are only called when necessary, not on every user interaction
++    init {
++
++    }
+     fun updateMapCenter(center: Point) {
+         _centerPoint.value = center
+     }
+     fun updateZoomLevel(zoom: Double) {
+-        zoomLevel = zoom
++        _zoomLevel.value = zoom
+     }
+ }
+Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package no.uio.ifi.in2000.prosjekt.ui.Map\n\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.os.Build\nimport android.util.Log\nimport androidx.activity.ComponentActivity\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Home\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.Star\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.BottomAppBar\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.OutlinedTextFieldDefaults\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.TextFieldColors\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.clearCompositionErrors\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.focus.focusRequester\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalSoftwareKeyboardController\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextDecoration\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.ui.window.PopupProperties\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport coil.compose.AsyncImage\nimport coil.request.ImageRequest\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationCallback\nimport com.google.android.gms.location.LocationResult\nimport com.google.android.gms.location.LocationServices\nimport com.mapbox.geojson.Point\nimport com.mapbox.maps.MapboxExperimental\nimport com.mapbox.maps.ViewAnnotationAnchor\nimport com.mapbox.maps.dsl.cameraOptions\nimport com.mapbox.maps.extension.compose.MapboxMap\nimport com.mapbox.maps.extension.compose.animation.viewport.MapViewportState\nimport com.mapbox.maps.extension.compose.animation.viewport.rememberMapViewportState\nimport com.mapbox.maps.extension.compose.annotation.ViewAnnotation\nimport com.mapbox.maps.extension.compose.annotation.generated.CircleAnnotation\nimport com.mapbox.maps.plugin.compass.generated.CompassSettings\nimport com.mapbox.maps.viewannotation.annotationAnchors\nimport com.mapbox.maps.viewannotation.geometry\nimport com.mapbox.maps.viewannotation.viewAnnotationOptions\nimport no.uio.ifi.in2000.prosjekt.R\nimport java.time.ZoneId\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\nimport kotlin.math.roundToInt\n\n\nval pk = \"pk.eyJ1IjoiY3BicmFuZGEiLCJhIjoiY2x1aTZkNTZnMDE1bzJqbXZ6NDdhc2lraCJ9.oJDEC855zszNVymnAHxKgQ\"\n\nval sk = \"sk.eyJ1IjoiY3BicmFuZGEiLCJhIjoiY2x1aTc4Z2p4MDFnaTJqbXlpdDF2NDVkYSJ9.hJmaf_tc7gS8J2aTwHYPKw\"\n\n@OptIn(MapboxExperimental::class, ExperimentalMaterial3Api::class)\n@Composable\nfun MapScreen(activity: Activity, navController: NavController, mapScreenViewModel: MapScreenViewModel = viewModel(),\n              mapViewModel: MapViewModel = viewModel(),\n              metAlertViewModel: MetAlertViewModel = viewModel(),\n              enturViewModel: EnTurViewModel = viewModel()) {\n\n    val mViewportState = rememberMapViewportState()\n    var showViewAnnotation by remember {\n        mutableStateOf(false)\n    }\n    val dataState by mapScreenViewModel.HVUIState.collectAsState()\n    var visible by remember {\n        mutableStateOf(true)\n    }\n    var showSearch by remember { mutableStateOf(false) }\n    val isLoading by mapScreenViewModel.isPopupVisible.collectAsState()\n    var point by remember {mutableStateOf(Point.fromLngLat(10.0, 59.0))}\n    val context = LocalContext.current.applicationContext // Context til skjerm\n\n    val fusedLocationClient : FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)\n    val sharedPreferences = context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE) // User preferences\n    val isLocationPermissionGranted = sharedPreferences.getBoolean(\"location_permission_enabled\", false)\n    var lat = \"59.0\"\n    var lon = \"11.0\"\n\n    Scaffold(\n        topBar = {\n            TopAppBar(modifier = Modifier,\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF1F3468),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                        Text(\"Logo\", color = Color.White)\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color.White\n                        )\n                    }\n                },\n                actions = {\n                    IconButton(onClick = { enturViewModel.toggleVisibility() }) {\n                        Icon(\n                            Icons.Default.Search,\n                            contentDescription = \"Search\",\n                            tint = Color.White\n                        )\n                    }\n                }\n            )\n        },\n        bottomBar = {\n            BottomAppBar(modifier = Modifier,\n                containerColor = Color(0xFF1F3468) // Matching the top bar color\n            ) {\n                Row(\n                    horizontalArrangement = Arrangement.SpaceEvenly,\n                    modifier = Modifier.fillMaxWidth()\n                ) {\n                    IconButton(onClick = {metAlertViewModel.togglePopupVisibility() }) {\n                        Icon(\n                            imageVector = Icons.Default.Warning, // Change icons as needed\n                            contentDescription = \"MetAlerts\",\n                            tint = Color.White\n                        )\n                    }\n                    IconButton(onClick = {\n                        getLocationMap(context, activity) { location ->\n                            if(location != null){\n                                mViewportState.setCameraOptions {\n                                    center(Point.fromLngLat(\n                                        location.longitude,\n                                        location.latitude\n                                    ))\n                                }\n                            }\n                        }\n                    }) {\n                    Icon(\n                        imageVector = Icons.Default.LocationOn, // Change icons as needed\n                        contentDescription = \"GoToMyLocation\",\n                        tint = Color.White\n                        )\n                    }\n                }\n            }\n        },\n    ) { innerPadding ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(innerPadding),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            metAlerts(metAlertViewModel = metAlertViewModel)\n            searchBar(enturViewModel = enturViewModel, mapViewState = mViewportState)\n            MapboxMap(\n                modifier = Modifier\n                    .weight(1f)\n                    .fillMaxSize(),\n                mapViewportState = mViewportState.apply {\n                    setCameraOptions {\n                        zoom(8.0)\n                        center(mapViewModel.mapCenter)\n                        getLocationMap(context, activity) { location ->\n                            if(location != null){\n                                mViewportState.setCameraOptions {\n                                    center(Point.fromLngLat(\n                                        location.longitude,\n                                        location.latitude\n                                    ))\n                                }\n                            } else {\n                                center(mapViewModel.mapCenter)\n                            }\n                        }\n                        pitch(20.0)\n                        bearing(0.0)\n                    }\n                },\n                onMapClickListener = { clickedPoint ->\n                    // Extracting clicked coordinates\n                    lat = clickedPoint.latitude().toString()\n                    lon = clickedPoint.longitude().toString()\n                    mViewportState.setCameraOptions {\n                        //zoom(mViewportState.cameraState.zoom*1.5) // Adjust the zoom level as needed\n                        center(clickedPoint)\n                        pitch(0.0)\n                        bearing(0.0)\n                    }\n                    mapScreenViewModel.getNewData(lat,lon)\n                    point = Point.fromLngLat(clickedPoint.longitude(),clickedPoint.latitude())\n                    showViewAnnotation = true\n                    visible = true\n                    // Do something with the clicked coordinates\n                    Log.i(\"MapClick\", \"Clicked coordinates: $lat, $lon\")\n                    //Log.i(\"MapClick\", \"Place: ${dataState.bigDataCloud?.city}\")\n                    true\n                },\n            ){\n                if (showViewAnnotation) {\n                    if(visible){\n                        CircleAnnotation(point = point, circleBlur = 1.0)\n                    }\n                    ViewAnnotation(\n                        options = viewAnnotationOptions {\n                            geometry(point)\n                            annotationAnchors(\n                                {\n                                    anchor(ViewAnnotationAnchor.BOTTOM_LEFT)\n                                    offsetY(50.0)\n                                }\n                            )\n                            allowOverlap(false)\n                            visible(visible)\n                        },\n                        ) {\n                        Card(\n                            shape = RoundedCornerShape(15.dp),\n                            modifier = Modifier\n                                .fillMaxHeight(0.2f)\n                                .fillMaxWidth(0.5f)\n                        )\n                        {\n                            Box {\n                                Column(\n                                    verticalArrangement = Arrangement.SpaceEvenly,\n                                    horizontalAlignment = Alignment.Start,\n                                    modifier = Modifier\n                                        .background(Color.White)\n                                        .padding(16.dp)\n                                        .fillMaxSize()\n                                ) {\n                                    if(isLoading){\n                                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                                            CircularProgressIndicator(modifier = Modifier)\n                                        }\n                                    } else {\n                                        Row(\n                                            horizontalArrangement = Arrangement.SpaceBetween,\n                                            modifier = Modifier.fillMaxWidth()\n                                        ) {\n                                            Row(verticalAlignment = Alignment.CenterVertically,\n                                                horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n                                                val painter = painterResource(id = R.drawable.thermometer)\n                                                Image(painter = painter, contentDescription = \"Temperature\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n                                                Column(horizontalAlignment = Alignment.Start) {\n                                                    Text(text = \"Sjø-temp\", fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                    Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"temperature\" }?.value?.toDouble()?.roundToInt()} °C\")\n                                                }\n                                            }\n                                            Row(verticalAlignment = Alignment.CenterVertically,\n                                                horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n                                                val painter = painterResource(id = R.drawable.wind)\n                                                Image(painter = painter, contentDescription = \"Wind\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n\n                                                Column(horizontalAlignment = Alignment.Start) {\n                                                    Text(text = \"Vind\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                    Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"wind_length\" }?.value?.toDouble()?.roundToInt()} m/s\")\n                                                }\n                                            }\n                                        }\n                                        Row(\n                                            horizontalArrangement = Arrangement.SpaceBetween,\n                                            modifier = Modifier.fillMaxWidth()\n                                        ) {\n                                            Row(verticalAlignment = Alignment.CenterVertically,\n                                                horizontalArrangement = Arrangement.spacedBy(8.dp),\n                                            ) {\n                                                val painter = painterResource(id = R.drawable.waves)\n                                                Image(painter = painter, contentDescription = \"Current\", modifier = Modifier.size(18.dp), Alignment.CenterEnd)\n                                                Column(horizontalAlignment = Alignment.Start) {\n                                                    Text(text = \"Strøm\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                    Text(text = \"${String.format(\"%.1f\", dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"current_length\" }?.value?.toDouble())} m/s\")\n                                                }\n                                            }\n                                            Row(verticalAlignment = Alignment.CenterVertically,\n                                                horizontalArrangement = Arrangement.spacedBy(8.dp)){\n                                                val painter = painterResource(id = R.drawable.salinity)\n                                                Image(painter = painter, contentDescription = \"Salinity\", modifier = Modifier.size(18.dp))\n                                                Column(horizontalAlignment = Alignment.Start) {\n                                                    Text(text = \"Salt\",fontFamily = FontFamily.Serif, fontSize = 12.sp)\n                                                    Text(text = \"${dataState.dataProjectionMain?.data?.get(0)?.data?.find { it.key == \"salinity\" }?.value?.toDouble()?.roundToInt()} ‰\", textAlign = TextAlign.Center)\n                                                }\n                                            }\n                                        }\n                                    }\n                                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center){\n                                        Text(\"Detaljert varsel\", modifier = Modifier.clickable {navController.navigate(\"DetailedWeather/${point}\")}, textDecoration = TextDecoration.Underline)\n                                    }\n                                }\n                                IconButton(\n                                    onClick = {visible = false},\n                                    modifier = Modifier\n                                        .size(24.dp)  // Set the size of the IconButton to be small\n                                        .align(Alignment.TopStart)  // Align the button to the top-left corner of the Box\n                                ) {\n                                    Icon(\n                                        imageVector = Icons.Default.Clear,\n                                        contentDescription = \"Close\",\n                                        tint = Color.DarkGray\n                                    )\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nfun getLocationMap(\n    context: Context,\n    activity: Activity,\n    locationCallback: (Location) -> Unit // Callback function to receive location\n) {\n    val fusedLocationClient: FusedLocationProviderClient =\n        LocationServices.getFusedLocationProviderClient(context)\n    val sharedPreferences =\n        context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE) // User preferences\n    if ((ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_FINE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED ||\n                ActivityCompat.checkSelfPermission(\n                    context,\n                    Manifest.permission.ACCESS_COARSE_LOCATION\n                ) != PackageManager.PERMISSION_GRANTED)\n    ) {\n\n        ActivityCompat.requestPermissions(\n            activity,\n            arrayOf(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ),\n            100\n        )\n    } else if (ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_FINE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n            context,\n            Manifest.permission.ACCESS_COARSE_LOCATION\n        ) != PackageManager.PERMISSION_GRANTED\n    ) {\n        ActivityCompat.requestPermissions(\n            activity,\n            arrayOf(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ),\n            100\n        )\n    } else {\n         fusedLocationClient.lastLocation\n                .addOnSuccessListener { location: Location? ->\n                    if (location != null) {\n                        locationCallback(location) // Call the callback with location\n                    }\n                }\n            return\n\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun metAlerts(metAlertViewModel: MetAlertViewModel){\n    val metAlertState by metAlertViewModel.MAUiState.collectAsState()\n    val isPopupVisible by metAlertViewModel.isPopupVisible.collectAsState()\n    val antallVarsler = metAlertState.MetAlerts?.features?.size\n\n    if(isPopupVisible){\n        Popup(\n            alignment = Alignment.TopCenter,\n            onDismissRequest = { metAlertViewModel.togglePopupVisibility() }, // Close popup when dismissed\n        ) {\n            if(antallVarsler != null){\n                if(antallVarsler == 0){\n                    Box(modifier = Modifier.fillMaxHeight(0.83f)\n                        .background(Color.Black.copy(alpha = 0.7f))\n                        .fillMaxWidth(), contentAlignment = Alignment.Center) {\n                        Text(text = \"Ingen farevarsler funnet for sjøen!\", color = Color.White, textAlign = TextAlign.Center, fontWeight = FontWeight.Black)\n                    }\n                } else {\n                    LazyColumn(\n                        modifier = Modifier\n                            .background(Color.Black.copy(alpha = 0.7f))\n                            .padding(16.dp)\n                            .fillMaxHeight(0.8f)\n                            .clickable { metAlertViewModel.togglePopupVisibility() }\n                    ) {\n                        items(antallVarsler){ metalertNr ->\n                            ExpandableCard(metAlertState, metalertNr)\n                        }\n                    }\n                }\n            }\n            IconButton(\n                onClick = { metAlertViewModel.togglePopupVisibility() },\n                modifier = Modifier\n                    .size(35.dp)  // Set the size of the IconButton to be small\n            ) {\n                Icon(\n                    imageVector = Icons.Default.Clear,\n                    contentDescription = \"Close\",\n                    tint = Color.White\n                )\n            }\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun ExpandableCard(metAlertState: MetAlersUiState, nr : Int) {\n    var expanded by remember { mutableStateOf (false) }\n    val inputString = (metAlertState.MetAlerts?.features?.get(nr)?.properties?.title).toString()\n    val parts = inputString.split(\",\")\n    val result = parts.take(3).joinToString(\",\").trim()\n\n    val warning = painterResource(id = R.drawable.warning)\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n    val imageUri = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.resources?.firstOrNull { it.mimeType?.startsWith(\"image/png\") == true }?.uri\n\n    val fareStart = metAlertState.MetAlerts?.features?.get(nr)?.timeinterval?.interval?.get(0)\n        ?.let { formatToNorwegianTime(it) }\n    val fareSlutt = metAlertState.MetAlerts?.features?.get(nr)?.timeinterval?.interval?.get(1)\n        ?.let { formatToNorwegianTime(it) }\n\n    val yellowGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFF9C4), // Light yellow\n            Color(0xFFFFEB3B), // Vivid yellow\n            Color(0xFFFFD726)  // Dark yellow\n        )\n    )\n    val redGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFCDD2), // Light red\n            Color(0xFFE57373), // Medium red\n            Color(0xFFD32F2F)  // Dark red\n        )\n    )\n    val orangeGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFE0B2), // Light orange\n            Color(0xFFFFB74D), // Medium orange\n            Color(0xFFFB8C00)  // Dark orange\n        )\n    )\n    val greenGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFA5D6A7), // Light green\n            Color(0xFF66BB6A), // Medium green\n            Color(0xFF2E7D32)  // Dark green\n        )\n    )\n    val matrixColor = when(\"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.riskMatrixColor}\") {\n        \"Red\" -> redGradient\n        \"Orange\" -> orangeGradient\n        \"Yellow\" -> yellowGradient\n        else -> greenGradient // Default color\n    }\n    Card(\n        shape = RoundedCornerShape(8.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n            pressedElevation = 8.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 8.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 8.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(matrixColor)){\n            Column() {\n                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()){\n                    Image(painter = warning, contentDescription = \"Warning\", modifier = Modifier.size(40.dp), Alignment.Center)\n                    Column(modifier = Modifier\n                        .weight(1f)\n                        .padding(horizontal = 16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally) {\n                        Text(\n                            text = result,\n                            style = MaterialTheme.typography.titleMedium,\n                            modifier = Modifier.padding(12.dp),\n                            textAlign = TextAlign.Center,\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\n                            text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.riskMatrixColor}\",\n                            style = MaterialTheme.typography.bodyMedium,\n                            modifier = Modifier.padding(8.dp),\n                            textAlign = TextAlign.Center\n                        )\n                    }\n                    Image(painter = toggleIconPainter, contentDescription = \"Expand\", modifier = Modifier.size(40.dp), Alignment.CenterStart)\n                }\n                if (expanded) {\n                    Text(\n                        text = \"Anbefalinger:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.instruction}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Beskrivelse:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.description}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Konsekvenser:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.consequences}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Område:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlerts?.features?.get(nr)?.properties?.area}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Tidsperiode:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"Fra $fareStart \\nTil $fareSlutt\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    if(imageUri != null){\n                        AsyncImage(\n                            model = ImageRequest.Builder(LocalContext.current)\n                                .data(imageUri)\n                                .crossfade(true)\n                                .build(),\n                            contentDescription = \"Loaded Image\",\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .clickable { },\n                            contentScale = ContentScale.Crop\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\nfun formatToNorwegianTime(isoDateTime: String): String { // Gjør dato-format til lesbart format\n    val zonedDateTime = ZonedDateTime.parse(isoDateTime)\n\n    val osloZone = zonedDateTime.withZoneSameInstant(ZoneId.of(\"Europe/Oslo\"))\n\n    val formatter = DateTimeFormatter.ofPattern(\"dd.MM.yyyy 'kl.' HH:mm\")\n\n    return osloZone.format(formatter)\n}\n\n@OptIn(ExperimentalComposeUiApi::class, MapboxExperimental::class)\n@Composable\nfun searchBar(enturViewModel : EnTurViewModel, mapViewState: MapViewportState){\n    val isVisible by enturViewModel.isPopupVisible.collectAsState()\n    val lUIState by enturViewModel.locationUIState.collectAsState()\n    val keyboardController = LocalSoftwareKeyboardController.current\n    var newLocationName by remember{ mutableStateOf(\"\") }\n\n    if(isVisible){\n        val scrollState = rememberScrollState()\n        Popup(\n            onDismissRequest = {},\n            properties = PopupProperties(\n                focusable = true,\n                dismissOnBackPress = false,\n                dismissOnClickOutside = false,\n                excludeFromSystemGesture = true,\n            )\n        )\n        {\n            Box(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .background(Color.Transparent.copy(alpha = 0.8f))\n\n            ) {\n                Card (\n                    shape = RoundedCornerShape(20.dp),\n                    modifier = Modifier\n                        .align(Alignment.TopCenter)\n                        .padding(top = 72.dp)\n                        .fillMaxWidth(0.9f)\n                        .fillMaxHeight(0.5f),\n                    colors = CardDefaults.cardColors(containerColor = Color(0xFF1F3468))\n                ){\n                    Row(\n                        modifier = Modifier\n\n                    ) {\n                        IconButton(\n                            onClick = {\n                                enturViewModel.clearSuggestions()\n                                enturViewModel.toggleVisibility()\n                                newLocationName = \"\"\n                            }\n                        )\n                        {\n                            Icon(\n                                imageVector = Icons.Filled.Clear,\n                                contentDescription = \"Tilbake\",\n                                modifier = Modifier.size(40.dp), // Juster størrelsen etter behov\n                                tint = Color.White // Juster fargen etter ønske\n                            )\n                        }\n                    }\n                    Row(\n                        horizontalArrangement = Arrangement.Center ,\n                        verticalAlignment = Alignment.CenterVertically,\n                        modifier = Modifier\n                            .fillMaxSize()\n                    ){\n                        Column(\n                            modifier = Modifier\n                                .padding(top = 24.dp)\n                                .fillMaxSize(),\n\n                            horizontalAlignment = Alignment.CenterHorizontally,\n\n                            ) {\n                            TextField(\n                                value = newLocationName,\n\n                                onValueChange = {newLocationName = it\n                                    enturViewModel.fetchSuggestions(it)\n                                    if (newLocationName.isNotEmpty()){\n                                        enturViewModel.clearSuggestions()\n                                    }\n                                },\n                                shape = RoundedCornerShape(20.dp),\n                                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),\n                                keyboardActions = KeyboardActions(onDone = {\n                                    if (newLocationName.isNotEmpty()){\n                                        newLocationName = \"\"\n                                        keyboardController?.hide()\n                                    }\n                                }\n                                ),\n                                modifier = Modifier\n                                    .fillMaxWidth(0.9f),\n                                label = { Text(\"Søk\")},\n                            )\n                            Column(\n                                modifier = Modifier\n                                    .verticalScroll(scrollState)\n                                    .padding(3.dp)\n                            ) {\n                                lUIState.suggestion?.forEach{suggestion->\n                                    Text(\n                                        text = suggestion.properties.label,\n                                        modifier = Modifier\n                                            .background(Color(0xFFCFE3F3))\n                                            .fillMaxWidth(0.8f)\n                                            .clickable {\n                                                newLocationName = suggestion.properties.label\n                                                enturViewModel.clearSuggestions()\n                                                val kordinatString =\n                                                    suggestion.geometry.coordinates[1] + \",\" + suggestion.geometry.coordinates[0]\n                                                val kordinat = kordinatString.split(\",\")\n                                                val point = Point.fromLngLat(kordinat[0].toDouble(), kordinat[1].toDouble())\n                                                enturViewModel.toggleVisibility()\n                                                mapViewState.setCameraOptions {\n                                                    center(point)\n                                                }\n                                            }\n                                            .padding(8.dp)\n                                    )\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt
+--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/Map/MapScreen.kt	(date 1715349197946)
+@@ -79,6 +79,7 @@
+ import androidx.compose.ui.text.input.ImeAction
+ import androidx.compose.ui.text.style.TextAlign
+ import androidx.compose.ui.text.style.TextDecoration
++import androidx.compose.ui.unit.TextUnit
+ import androidx.compose.ui.unit.dp
+ import androidx.compose.ui.unit.sp
+ import androidx.compose.ui.window.Popup
+@@ -128,6 +129,9 @@
+     var showViewAnnotation by remember {
+         mutableStateOf(false)
+     }
++    val mapCenter by mapViewModel.centerPoint.collectAsState()
++    val mapZoom by mapViewModel.zoomLevel.collectAsState()
++
+     val dataState by mapScreenViewModel.HVUIState.collectAsState()
+     var visible by remember {
+         mutableStateOf(true)
+@@ -197,15 +201,19 @@
+                                     center(Point.fromLngLat(
+                                         location.longitude,
+                                         location.latitude
++                                    ))
++                                    mapViewModel.updateMapCenter(Point.fromLngLat(
++                                        location.longitude,
++                                        location.latitude
+                                     ))
+                                 }
+                             }
+                         }
+                     }) {
+-                    Icon(
+-                        imageVector = Icons.Default.LocationOn, // Change icons as needed
+-                        contentDescription = "GoToMyLocation",
+-                        tint = Color.White
++                        Icon(
++                            imageVector = Icons.Default.LocationOn, // Change icons as needed
++                            contentDescription = "GoToMyLocation",
++                            tint = Color.White
+                         )
+                     }
+                 }
+@@ -226,20 +234,20 @@
+                     .fillMaxSize(),
+                 mapViewportState = mViewportState.apply {
+                     setCameraOptions {
+-                        zoom(8.0)
+-                        center(mapViewModel.mapCenter)
+-                        getLocationMap(context, activity) { location ->
+-                            if(location != null){
+-                                mViewportState.setCameraOptions {
+-                                    center(Point.fromLngLat(
+-                                        location.longitude,
+-                                        location.latitude
+-                                    ))
+-                                }
+-                            } else {
+-                                center(mapViewModel.mapCenter)
+-                            }
+-                        }
++                        zoom(mapZoom)
++                        center(mapCenter)
++//                        getLocationMap(context, activity) { location ->
++//                            if(location != null){
++//                                mViewportState.setCameraOptions {
++//                                    center(Point.fromLngLat(
++//                                        location.longitude,
++//                                        location.latitude
++//                                    ))
++//                                }
++//                            } else {
++//                                center(mapViewModel.mapCenter)
++//                            }
++//                        }
+                         pitch(20.0)
+                         bearing(0.0)
+                     }
+@@ -248,6 +256,8 @@
+                     // Extracting clicked coordinates
+                     lat = clickedPoint.latitude().toString()
+                     lon = clickedPoint.longitude().toString()
++
++                    point = Point.fromLngLat(clickedPoint.longitude(),clickedPoint.latitude())
+                     mViewportState.setCameraOptions {
+                         //zoom(mViewportState.cameraState.zoom*1.5) // Adjust the zoom level as needed
+                         center(clickedPoint)
+@@ -255,7 +265,6 @@
+                         bearing(0.0)
+                     }
+                     mapScreenViewModel.getNewData(lat,lon)
+-                    point = Point.fromLngLat(clickedPoint.longitude(),clickedPoint.latitude())
+                     showViewAnnotation = true
+                     visible = true
+                     // Do something with the clicked coordinates
+@@ -280,11 +289,11 @@
+                             allowOverlap(false)
+                             visible(visible)
+                         },
+-                        ) {
++                    ) {
+                         Card(
+                             shape = RoundedCornerShape(15.dp),
+                             modifier = Modifier
+-                                .fillMaxHeight(0.2f)
++                                .fillMaxHeight(0.25f)
+                                 .fillMaxWidth(0.5f)
+                         )
+                         {
+@@ -351,8 +360,12 @@
+                                             }
+                                         }
+                                     }
+-                                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center){
+-                                        Text("Detaljert varsel", modifier = Modifier.clickable {navController.navigate("DetailedWeather/${point}")}, textDecoration = TextDecoration.Underline)
++                                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.BottomCenter){
++                                        Text("Detaljert varsel", modifier = Modifier.clickable {
++                                            mapViewModel.updateZoomLevel(mViewportState.cameraState.zoom)
++                                            mapViewModel.updateMapCenter(mViewportState.cameraState.center)
++                                            navController.navigate("DetailedWeather/${point.latitude()},${point.longitude()}")}
++                                            ,fontSize = 12.sp ,textDecoration = TextDecoration.Underline)
+                                     }
+                                 }
+                                 IconButton(
+@@ -421,13 +434,13 @@
+             100
+         )
+     } else {
+-         fusedLocationClient.lastLocation
+-                .addOnSuccessListener { location: Location? ->
+-                    if (location != null) {
+-                        locationCallback(location) // Call the callback with location
+-                    }
+-                }
+-            return
++        fusedLocationClient.lastLocation
++            .addOnSuccessListener { location: Location? ->
++                if (location != null) {
++                    locationCallback(location) // Call the callback with location
++                }
++            }
++        return
+ 
+     }
+ }
+@@ -446,7 +459,8 @@
+         ) {
+             if(antallVarsler != null){
+                 if(antallVarsler == 0){
+-                    Box(modifier = Modifier.fillMaxHeight(0.83f)
++                    Box(modifier = Modifier
++                        .fillMaxHeight(0.83f)
+                         .background(Color.Black.copy(alpha = 0.7f))
+                         .fillMaxWidth(), contentAlignment = Alignment.Center) {
+                         Text(text = "Ingen farevarsler funnet for sjøen!", color = Color.White, textAlign = TextAlign.Center, fontWeight = FontWeight.Black)
+@@ -768,9 +782,13 @@
+                                                 val kordinatString =
+                                                     suggestion.geometry.coordinates[1] + "," + suggestion.geometry.coordinates[0]
+                                                 val kordinat = kordinatString.split(",")
+-                                                val point = Point.fromLngLat(kordinat[0].toDouble(), kordinat[1].toDouble())
++                                                val point = Point.fromLngLat(
++                                                    kordinat[1].toDouble(),
++                                                    kordinat[0].toDouble()
++                                                )
+                                                 enturViewModel.toggleVisibility()
+                                                 mapViewState.setCameraOptions {
++                                                    zoom(12.0)
+                                                     center(point)
+                                                 }
+                                             }
+@@ -784,5 +802,4 @@
+             }
+         }
+     }
+-}
+-
++}
+\ No newline at end of file
+Index: app/src/main/res/drawable-anydpi/waveheight.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/res/drawable-anydpi/waveheight.xml b/app/src/main/res/drawable-anydpi/waveheight.xml
+new file mode 100644
+--- /dev/null	(date 1715349197947)
++++ b/app/src/main/res/drawable-anydpi/waveheight.xml	(date 1715349197947)
+@@ -0,0 +1,11 @@
++<vector xmlns:android="http://schemas.android.com/apk/res/android"
++    android:width="24dp"
++    android:height="24dp"
++    android:viewportWidth="960"
++    android:viewportHeight="960"
++    android:tint="#333333"
++    android:alpha="0.6">
++  <path
++      android:fillColor="@android:color/white"
++      android:pathData="M100,818.46L100,784.62Q130.1,781.23 157.62,768.88Q185.13,756.54 213,736.74Q243.92,759.54 278.5,772.35Q313.08,785.15 347,785.15Q379.08,785.15 415.15,773.15Q451.23,761.15 481,738.28Q513.67,763.05 547.33,774.1Q581,785.15 615,785.15Q649.54,785.15 680.73,773.69Q711.92,762.23 749,736.59Q779.18,758.54 806.77,769.88Q834.36,781.23 860,784.62L860,818.46Q834.74,815.85 806.19,806.01Q777.64,796.18 749,779.1Q713.1,801.15 679.32,810.58Q645.54,820 615,820Q585.23,820 550.68,810.19Q516.13,800.38 480.23,778.33Q447.33,800.31 413.18,810.15Q379.03,820 347,820Q315.46,820 281.72,810.15Q247.97,800.31 213,779.1Q185.38,795.41 156.17,805.24Q126.95,815.08 100,818.46ZM100,675.38L100,580Q100,487.67 136.37,410.67Q172.74,333.67 235.13,277.87Q297.51,222.08 381.29,191.04Q465.08,160 560,160Q582.49,160 605.14,161.81Q627.79,163.62 647.44,166.64Q632.64,196.18 624.78,226.63Q616.92,257.08 616.92,283.92Q616.92,348.51 662.67,395.79Q708.41,443.08 773,443.08L860,443.08L860,476.92L773,476.92Q693.59,476.92 638.33,420.13Q583.08,363.33 583.08,283.92Q583.08,263.51 588,237.99Q592.92,212.46 600.67,192.03Q501.13,208.79 439.03,279.91Q376.92,351.03 376.92,440.77Q376.92,496.05 392.45,538.45Q407.97,580.85 434.72,621.13Q445.85,615.31 458.26,607.6Q470.67,599.9 480.77,592.9Q512.38,616.44 548.62,629.26Q584.85,642.08 615,642.08Q645,642.08 680.9,628.88Q716.79,615.69 749,592.9Q774.64,611.2 802.81,624.29Q830.97,637.38 860,641.54L860,675.38Q834.74,672.77 806.19,661.78Q777.64,650.79 749,633.72Q713.1,655.77 679.79,666.35Q646.49,676.92 615,676.92Q582.23,676.92 545.85,664.46Q509.46,652 481,633.72Q446.77,654.92 415.85,665.81Q384.92,676.69 347,676.92Q309.13,677 277.33,666.28Q245.54,655.56 213,636.03Q185.38,652.33 156.17,662.17Q126.95,672 100,675.38Z"/>
++</vector>
+Index: app/src/main/res/drawable-anydpi/uv.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/res/drawable-anydpi/uv.xml b/app/src/main/res/drawable-anydpi/uv.xml
+new file mode 100644
+--- /dev/null	(date 1715349197947)
++++ b/app/src/main/res/drawable-anydpi/uv.xml	(date 1715349197947)
+@@ -0,0 +1,11 @@
++<vector xmlns:android="http://schemas.android.com/apk/res/android"
++    android:width="24dp"
++    android:height="24dp"
++    android:viewportWidth="960"
++    android:viewportHeight="960"
++    android:tint="#333333"
++    android:alpha="0.6">
++  <path
++      android:fillColor="@android:color/white"
++      android:pathData="M480,640Q413.15,640 366.58,593.42Q320,546.85 320,480Q320,413.15 366.58,366.58Q413.15,320 480,320Q546.85,320 593.42,366.58Q640,413.15 640,480Q640,546.85 593.42,593.42Q546.85,640 480,640ZM200,496.92L60,496.92L60,463.08L200,463.08L200,496.92ZM900,496.92L760,496.92L760,463.08L900,463.08L900,496.92ZM463.08,200L463.08,60L496.92,60L496.92,200L463.08,200ZM463.08,900L463.08,760L496.92,760L496.92,900L463.08,900ZM271.79,293.9L185.56,209.97L209.13,184.56L293.59,269.95L271.79,293.9ZM751.03,775.28L666.18,689.82L688.87,665.95L774.44,750.03L751.03,775.28ZM665.95,271.13L750.03,185.56L775.44,208.97L690.21,293.74L665.95,271.13ZM184.72,750.87L270.03,666.03L292.51,688.36L209.21,775.21L184.72,750.87Z"/>
++</vector>
+Index: .idea/deploymentTargetSelector.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetSelector\">\n    <selectionStates>\n      <SelectionState runConfigName=\"app\">\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\n      </SelectionState>\n    </selectionStates>\n  </component>\n</project>
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
+--- a/.idea/deploymentTargetSelector.xml	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/.idea/deploymentTargetSelector.xml	(date 1715349197945)
+@@ -4,6 +4,17 @@
+     <selectionStates>
+       <SelectionState runConfigName="app">
+         <option name="selectionMode" value="DROPDOWN" />
++        <DropdownSelection timestamp="2024-05-09T22:31:26.627111Z">
++          <Target type="DEFAULT_BOOT">
++            <handle>
++              <DeviceId pluginId="LocalEmulator" identifier="path=/Users/zeeshanshahid/.android/avd/Virtual_Device_2024.avd" />
++            </handle>
++          </Target>
++        </DropdownSelection>
++        <DialogSelection />
++      </SelectionState>
++      <SelectionState runConfigName="prevsa">
++        <option name="selectionMode" value="DROPDOWN" />
+       </SelectionState>
+     </selectionStates>
+   </component>
+Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.BigDataCloud.BigDataCloudRepository\nimport no.uio.ifi.in2000.prosjekt.Data.Havvarsel.HavvarselRepository\nimport no.uio.ifi.in2000.prosjekt.Model.BigDataCloud\nimport no.uio.ifi.in2000.prosjekt.Model.DataProjectionMain\nimport no.uio.ifi.in2000.prosjekt.Model.Temperature\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\nimport java.time.LocalDate\nimport java.time.ZoneOffset\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\n\ndata class CombinedWeatherData(\n    val weatherData: WeatherData?,\n    val dataProjectionMain: DataProjectionMain?,\n    val bigDataCloud: BigDataCloud?\n)\n\ndata class HavvarselUIState(\n    //val locationDataMap: Map<String, WeatherData?> = emptyMap(),\n    //val seaTempratureMap: Map<String, Temperature?> = emptyMap(),\n\n    val dataProjectionMain: DataProjectionMain? = null,\n    val temperatureProjection: Temperature? = null\n)\n\n\n\nclass InfoStederViewModel(coords : String): ViewModel() {\n    val liste = coords.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    private val havvarselRepository: HavvarselRepository = HavvarselRepository()\n\n    private  val bigDataCloudDataRepository: BigDataCloudRepository = BigDataCloudRepository()\n\n    private val _havvarselUIState = MutableStateFlow(HavvarselUIState())\n\n    val havvarselUIState: StateFlow<HavvarselUIState> = _havvarselUIState.asStateFlow()\n    private val currentDate = LocalDate.now().toString() // Eks-output = 2024-03-20\n    private val yesterdaysDate = LocalDate.now().minusDays(1).toString() // Eks-output = 2024-03-20\n    private val fireDagerFrem = LocalDate.now().plusDays(4).toString()\n\n    init {\n        viewModelScope.launch {\n            _havvarselUIState.update {\n                it.copy(\n                    dataProjectionMain = havvarselRepository.getHavvarselDataProjection(listOf(\"temperature\", \"salinity\",\"current_direction\",\"current_length\"), lon, lat, \"0\", fireDagerFrem, yesterdaysDate),\n                    temperatureProjection = havvarselRepository.getHavarselTemperature(lon,lat,\"0\",fireDagerFrem,yesterdaysDate)\n                )\n            }\n        }\n    }\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt
+--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederViewModel.kt	(date 1715349197947)
+@@ -20,16 +20,7 @@
+ import java.time.ZonedDateTime
+ import java.time.format.DateTimeFormatter
+ 
+-data class CombinedWeatherData(
+-    val weatherData: WeatherData?,
+-    val dataProjectionMain: DataProjectionMain?,
+-    val bigDataCloud: BigDataCloud?
+-)
+-
+ data class HavvarselUIState(
+-    //val locationDataMap: Map<String, WeatherData?> = emptyMap(),
+-    //val seaTempratureMap: Map<String, Temperature?> = emptyMap(),
+-
+     val dataProjectionMain: DataProjectionMain? = null,
+     val temperatureProjection: Temperature? = null
+ )
+@@ -42,8 +33,6 @@
+     val lon = liste[1].trim()
+     private val havvarselRepository: HavvarselRepository = HavvarselRepository()
+ 
+-    private  val bigDataCloudDataRepository: BigDataCloudRepository = BigDataCloudRepository()
+-
+     private val _havvarselUIState = MutableStateFlow(HavvarselUIState())
+ 
+     val havvarselUIState: StateFlow<HavvarselUIState> = _havvarselUIState.asStateFlow()
+Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport co.yml.charts.axis.AxisData\nimport co.yml.charts.common.model.Point\nimport co.yml.charts.ui.linechart.LineChart\nimport co.yml.charts.ui.linechart.model.GridLines\nimport co.yml.charts.ui.linechart.model.IntersectionPoint\nimport co.yml.charts.ui.linechart.model.Line\nimport co.yml.charts.ui.linechart.model.LineChartData\nimport co.yml.charts.ui.linechart.model.LinePlotData\nimport co.yml.charts.ui.linechart.model.LineStyle\nimport co.yml.charts.ui.linechart.model.LineType\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPoint\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPopUp\nimport co.yml.charts.ui.linechart.model.ShadowUnderLine\n\n@Composable\nfun waterTempCard(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){\n    Card(modifier = Modifier) {\n        Column(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Sjø-temperatur\",  // The text to display\n                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design\n                modifier = Modifier.padding()  // Add some padding\n            )\n            waterTempChart(infoStederScreenViewModel = infoStederScreenViewModel, offsett)\n        }\n    }\n}\n\n@Composable\nfun waterTempChart(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){\n    val infoSted by infoStederScreenViewModel.havvarselUIState.collectAsState()\n    val pointData = listOf(\n        Point(0f, hentVerdiTemperature(infoSted, 0+offsett)),\n        Point(1f, hentVerdiTemperature(infoSted, 1+offsett)),\n        Point(2f, hentVerdiTemperature(infoSted, 2+offsett)),\n        Point(3f, hentVerdiTemperature(infoSted, 3+offsett)),\n        Point(4f, hentVerdiTemperature(infoSted, 4+offsett)),\n        Point(5f, hentVerdiTemperature(infoSted, 5+offsett)),\n        Point(6f, hentVerdiTemperature(infoSted, 6+offsett)),\n        Point(7f, hentVerdiTemperature(infoSted, 7+offsett)),\n        Point(8f, hentVerdiTemperature(infoSted, 8+offsett)),\n        Point(9f, hentVerdiTemperature(infoSted, 9+offsett)),\n        Point(10f, hentVerdiTemperature(infoSted, 10+offsett)),\n        Point(11f, hentVerdiTemperature(infoSted, 11+offsett)),\n        Point(12f, hentVerdiTemperature(infoSted, 12+offsett)),\n        Point(13f, hentVerdiTemperature(infoSted, 13+offsett)),\n        Point(14f, hentVerdiTemperature(infoSted, 14+offsett)),\n        Point(15f, hentVerdiTemperature(infoSted, 15+offsett)),\n        Point(16f, hentVerdiTemperature(infoSted, 16+offsett)),\n        Point(17f, hentVerdiTemperature(infoSted, 17+offsett)),\n        Point(18f, hentVerdiTemperature(infoSted, 18+offsett)),\n        Point(19f, hentVerdiTemperature(infoSted, 19+offsett)),\n        Point(20f, hentVerdiTemperature(infoSted, 20+offsett)),\n        Point(21f, hentVerdiTemperature(infoSted, 21+offsett)),\n        Point(22f, hentVerdiTemperature(infoSted, 22+offsett)),\n        Point(23f, hentVerdiTemperature(infoSted, 23+offsett))\n    )\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = (maxY - minY) / steps\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->\n            if (i == 0) \"    \" + \"%02d\".format(i) else \"%02d\".format(i)}\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(20.dp)\n        .labelData {  i ->\n            \"%.1f°\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        color = MaterialTheme.colorScheme.tertiary,\n                        lineType = LineType.SmoothCurve(isDotted = false),\n\n                        ),\n                    IntersectionPoint(\n                        color = MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.tertiary),\n                    ShadowUnderLine(\n                        alpha = 0.9f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                MaterialTheme.colorScheme.inversePrimary,\n                                Color.Transparent\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        containerPaddingEnd = 40.dp,\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant)\n    )\n\n    LineChart(modifier = Modifier\n        .height(300.dp),\n        lineChartData = lineChartData\n    )\n}\n\n@Composable\nfun landTempCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    Card(modifier = Modifier,\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n        )) {\n        Column(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Luft-temperatur\",  // The text to display\n                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design\n                modifier = Modifier  // Add some padding\n            )\n            locationForecastTempChart(infostederLocationForecastVM, offsett)  // Your existing chart composable\n        }\n    }\n}\n\n@Composable\nfun locationForecastTempChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()\n    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val pointData = when (offsett) {\n        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,\"air_temperature\")) }\n        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, \"air_temperature\")) }\n    }\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = ((maxY - minY) / steps).toInt()\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->\n            when (offsett) {\n                0 -> if (i == 0)  \"    \" + \"%02d\".format(i+hour) else \"%02d\".format(i+hour)\n                else -> if (i == 0) \"    \" + \"%02d\".format(i) else \"%02d\".format(i)\n            }\n        }\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(30.dp)\n        .axisOffset(0.dp)\n        .labelData {  i ->\n            \"%.1f°\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        alpha = 0.5f,\n                        color = Color(0xFF000000),\n                        lineType = LineType.Straight(isDotted = false)\n                    ),\n                    IntersectionPoint(\n                        MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),\n                    ShadowUnderLine(\n                        alpha = 0.5f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                Color(0xFFFFF9C4), // Light yellow\n                                Color(0xFFFFEB3B), // Vivid yellow\n                                Color(0xFFFFD726)  // Dark yellow\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),\n        isZoomAllowed = true\n    )\n\n    LineChart(modifier = Modifier\n        .fillMaxWidth()\n        .height(300.dp),\n        lineChartData = lineChartData\n    )\n}\n\n@Composable\nfun windSpeedCard(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    Card(modifier = Modifier,\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n        )) {\n        Column(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally\n        ) {\n            Text(\n                \"Vind\",  // The text to display\n                style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design\n                modifier = Modifier  // Add some padding\n            )\n            locationForecastWindChart(infostederLocationForecastVM, offsett)  // Your existing chart composable\n        }\n    }\n}\n@Composable\nfun locationForecastWindChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){\n    val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()\n    val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val pointData = when (offsett) {\n        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,\"wind_speed\")) }\n        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, \"wind_speed\")) }\n    }\n\n    val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f\n    val minY = pointData.minByOrNull { it.y }?.y ?: 0f\n    val steps = determineSteps(maxY-minY)\n    val stepsize = ((maxY - minY) / steps)\n\n    val xAxisData = AxisData.Builder()\n        .axisStepSize(40.dp)\n        .backgroundColor(Color.Transparent)\n        .steps(pointData.size - 1)\n        .labelData { i ->\n            when (offsett) {\n                0 -> if (i == 0)  \"    \" + \"%02d\".format(i+hour) else \"%02d\".format(i+hour)\n                else -> if (i == 0) \"    \" + \"%02d\".format(i) else \"%02d\".format(i)\n            }\n        }\n        .labelAndAxisLinePadding(10.dp)\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val yAxisData = AxisData.Builder()\n        .steps(steps)\n        .backgroundColor(Color.Transparent)\n        .labelAndAxisLinePadding(30.dp)\n        .axisOffset(0.dp)\n        .labelData {  i ->\n            \"%.1f m/s\".format(minY  + (i * stepsize))\n        }\n        .axisLineColor(MaterialTheme.colorScheme.tertiary)\n        .axisLabelColor(MaterialTheme.colorScheme.tertiary)\n        .build()\n\n    val lineChartData = LineChartData(\n        linePlotData = LinePlotData(\n            lines = listOf(\n                Line(\n                    dataPoints = pointData,\n                    LineStyle(\n                        alpha = 0.5f,\n                        color = Color(0xFF000000),\n                        lineType = LineType.Straight(isDotted = false)\n                    ),\n                    IntersectionPoint(\n                        MaterialTheme.colorScheme.tertiary\n                    ),\n                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),\n                    ShadowUnderLine(\n                        alpha = 0.5f,\n                        brush = Brush.verticalGradient(\n                            colors = listOf(\n                                Color(0xFFF5F5F5), // Light Gray (almost white)\n                                Color(0xFFE0E0E0), // Medium Gray\n                                Color(0xFFBDBDBD)  // Darker Gray\n                            )\n                        )\n                    ),\n                    SelectionHighlightPopUp()\n                )\n            ),\n        ),\n        backgroundColor = MaterialTheme.colorScheme.surface,\n        xAxisData = xAxisData,\n        yAxisData = yAxisData,\n        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),\n        isZoomAllowed = true\n    )\n\n    LineChart(modifier = Modifier\n        .fillMaxWidth()\n        .height(300.dp),\n        lineChartData = lineChartData\n    )\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt
+--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederCharts.kt	(date 1715349197946)
+@@ -1,11 +1,14 @@
+ package no.uio.ifi.in2000.prosjekt.ui.infoSteder
+ 
++import androidx.compose.foundation.layout.Box
+ import androidx.compose.foundation.layout.Column
++import androidx.compose.foundation.layout.fillMaxSize
+ import androidx.compose.foundation.layout.fillMaxWidth
+ import androidx.compose.foundation.layout.height
+ import androidx.compose.foundation.layout.padding
+ import androidx.compose.material3.Card
+ import androidx.compose.material3.CardDefaults
++import androidx.compose.material3.CircularProgressIndicator
+ import androidx.compose.material3.MaterialTheme
+ import androidx.compose.material3.Text
+ import androidx.compose.runtime.Composable
+@@ -31,63 +34,49 @@
+ import co.yml.charts.ui.linechart.model.ShadowUnderLine
+ 
+ @Composable
+-fun waterTempCard(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){
+-    Card(modifier = Modifier) {
++fun waterTempCard(infoStederOFViewModel: InfoStederOFViewModel, offsett: Int){
++    Card(modifier = Modifier,
++        elevation = CardDefaults.cardElevation(
++            defaultElevation = 8.dp,
++        )) {
+         Column(
+             modifier = Modifier.fillMaxWidth(),
+             horizontalAlignment = Alignment.CenterHorizontally  // Center content horizontally
+         ) {
+             Text(
+-                "Sjø-temperatur",  // The text to display
++                "Hav-temperatur",  // The text to display
+                 style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
+-                modifier = Modifier.padding()  // Add some padding
++                modifier = Modifier  // Add some padding
+             )
+-            waterTempChart(infoStederScreenViewModel = infoStederScreenViewModel, offsett)
++            waterTempChart(infoStederOFViewModel, offsett, "sea_water_temperature")  // Your existing chart composable
+         }
+     }
+ }
+ 
+ @Composable
+-fun waterTempChart(infoStederScreenViewModel: InfoStederViewModel, offsett: Int){
+-    val infoSted by infoStederScreenViewModel.havvarselUIState.collectAsState()
+-    val pointData = listOf(
+-        Point(0f, hentVerdiTemperature(infoSted, 0+offsett)),
+-        Point(1f, hentVerdiTemperature(infoSted, 1+offsett)),
+-        Point(2f, hentVerdiTemperature(infoSted, 2+offsett)),
+-        Point(3f, hentVerdiTemperature(infoSted, 3+offsett)),
+-        Point(4f, hentVerdiTemperature(infoSted, 4+offsett)),
+-        Point(5f, hentVerdiTemperature(infoSted, 5+offsett)),
+-        Point(6f, hentVerdiTemperature(infoSted, 6+offsett)),
+-        Point(7f, hentVerdiTemperature(infoSted, 7+offsett)),
+-        Point(8f, hentVerdiTemperature(infoSted, 8+offsett)),
+-        Point(9f, hentVerdiTemperature(infoSted, 9+offsett)),
+-        Point(10f, hentVerdiTemperature(infoSted, 10+offsett)),
+-        Point(11f, hentVerdiTemperature(infoSted, 11+offsett)),
+-        Point(12f, hentVerdiTemperature(infoSted, 12+offsett)),
+-        Point(13f, hentVerdiTemperature(infoSted, 13+offsett)),
+-        Point(14f, hentVerdiTemperature(infoSted, 14+offsett)),
+-        Point(15f, hentVerdiTemperature(infoSted, 15+offsett)),
+-        Point(16f, hentVerdiTemperature(infoSted, 16+offsett)),
+-        Point(17f, hentVerdiTemperature(infoSted, 17+offsett)),
+-        Point(18f, hentVerdiTemperature(infoSted, 18+offsett)),
+-        Point(19f, hentVerdiTemperature(infoSted, 19+offsett)),
+-        Point(20f, hentVerdiTemperature(infoSted, 20+offsett)),
+-        Point(21f, hentVerdiTemperature(infoSted, 21+offsett)),
+-        Point(22f, hentVerdiTemperature(infoSted, 22+offsett)),
+-        Point(23f, hentVerdiTemperature(infoSted, 23+offsett))
+-    )
++fun waterTempChart(infoStederOFViewModel: InfoStederOFViewModel, offsett: Int, variable: String){
++    val oceanForecastUiState by infoStederOFViewModel.oFUiState.collectAsState()
++    val isLoading by infoStederOFViewModel.isLoading.collectAsState()
++    val pointData = infoStederOFViewModel.linechartMaker(offsett, variable)
++
++    val dateTimeString = oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(0+offsett)?.time
++    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
+ 
+     val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
+     val minY = pointData.minByOrNull { it.y }?.y ?: 0f
+     val steps = determineSteps(maxY-minY)
+-    val stepsize = (maxY - minY) / steps
++    val stepsize = ((maxY - minY) / steps)
+ 
+     val xAxisData = AxisData.Builder()
+         .axisStepSize(40.dp)
+         .backgroundColor(Color.Transparent)
+         .steps(pointData.size - 1)
+         .labelData { i ->
+-            if (i == 0) "    " + "%02d".format(i) else "%02d".format(i)}
++            when (offsett) {
++                0 -> if (i == 0)  "    " + "%02d".format(i+hour) else "%02d".format(i+hour)
++                else -> if (i == 0) "    " + "%02d".format(i) else "%02d".format(i)
++            }
++        }
+         .labelAndAxisLinePadding(10.dp)
+         .axisLineColor(MaterialTheme.colorScheme.tertiary)
+         .axisLabelColor(MaterialTheme.colorScheme.tertiary)
+@@ -96,7 +85,8 @@
+     val yAxisData = AxisData.Builder()
+         .steps(steps)
+         .backgroundColor(Color.Transparent)
+-        .labelAndAxisLinePadding(20.dp)
++        .labelAndAxisLinePadding(30.dp)
++        .axisOffset(0.dp)
+         .labelData {  i ->
+             "%.1f°".format(minY  + (i * stepsize))
+         }
+@@ -110,20 +100,21 @@
+                 Line(
+                     dataPoints = pointData,
+                     LineStyle(
+-                        color = MaterialTheme.colorScheme.tertiary,
+-                        lineType = LineType.SmoothCurve(isDotted = false),
+-
+-                        ),
++                        alpha = 0.5f,
++                        color = Color(0xFF000000),
++                        lineType = LineType.Straight(isDotted = false)
++                    ),
+                     IntersectionPoint(
+-                        color = MaterialTheme.colorScheme.tertiary
++                        MaterialTheme.colorScheme.tertiary
+                     ),
+-                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.tertiary),
++                    SelectionHighlightPoint(color = MaterialTheme.colorScheme.primary),
+                     ShadowUnderLine(
+-                        alpha = 0.9f,
++                        alpha = 0.5f,
+                         brush = Brush.verticalGradient(
+                             colors = listOf(
+-                                MaterialTheme.colorScheme.inversePrimary,
+-                                Color.Transparent
++                                Color(0xFFC4EAFF), // Light yellow
++                                Color(0xFF3B9AFF), // Vivid yellow
++                                Color(0xFF2663FF)  // Dark yellow
+                             )
+                         )
+                     ),
+@@ -131,17 +122,25 @@
+                 )
+             ),
+         ),
+-        containerPaddingEnd = 40.dp,
+         backgroundColor = MaterialTheme.colorScheme.surface,
+         xAxisData = xAxisData,
+         yAxisData = yAxisData,
+-        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant)
++        gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),
++        isZoomAllowed = true
+     )
+-
+-    LineChart(modifier = Modifier
+-        .height(300.dp),
+-        lineChartData = lineChartData
+-    )
++    if(isLoading){
++        Box(modifier = Modifier
++            .fillMaxWidth()
++            .height(300.dp), contentAlignment = Alignment.Center) {
++            CircularProgressIndicator(modifier = Modifier)
++        }
++    } else {
++        LineChart(modifier = Modifier
++            .fillMaxWidth()
++            .height(300.dp),
++            lineChartData = lineChartData
++        )
++    }
+ }
+ 
+ @Composable
+@@ -159,21 +158,19 @@
+                 style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
+                 modifier = Modifier  // Add some padding
+             )
+-            locationForecastTempChart(infostederLocationForecastVM, offsett)  // Your existing chart composable
++            locationForecastTempChart(infostederLocationForecastVM, offsett, "air_temperature")  // Your existing chart composable
+         }
+     }
+ }
+ 
+ @Composable
+-fun locationForecastTempChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
++fun locationForecastTempChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int, variable: String){
+     val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()
++    val pointData = infostederLocationForecastVM.linechartMaker(offsett, variable)
++    val isLoading by infostederLocationForecastVM.isLoading.collectAsState()
+     val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time
+     val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
+ 
+-    val pointData = when (offsett) {
+-        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"air_temperature")) }
+-        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "air_temperature")) }
+-    }
+ 
+     val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
+     val minY = pointData.minByOrNull { it.y }?.y ?: 0f
+@@ -241,12 +238,19 @@
+         gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),
+         isZoomAllowed = true
+     )
+-
+-    LineChart(modifier = Modifier
+-        .fillMaxWidth()
+-        .height(300.dp),
+-        lineChartData = lineChartData
+-    )
++    if(isLoading){
++        Box(modifier = Modifier
++            .fillMaxWidth()
++            .height(300.dp), contentAlignment = Alignment.Center) {
++            CircularProgressIndicator(modifier = Modifier)
++        }
++    } else {
++        LineChart(modifier = Modifier
++            .fillMaxWidth()
++            .height(300.dp),
++            lineChartData = lineChartData
++        )
++    }
+ }
+ 
+ @Composable
+@@ -264,21 +268,19 @@
+                 style = MaterialTheme.typography.titleSmall,  // Example style, choose according to your design
+                 modifier = Modifier  // Add some padding
+             )
+-            locationForecastWindChart(infostederLocationForecastVM, offsett)  // Your existing chart composable
++            locationForecastWindChart(infostederLocationForecastVM, offsett, "wind_speed")  // Your existing chart composable
+         }
+     }
+ }
+ @Composable
+-fun locationForecastWindChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int){
++fun locationForecastWindChart(infostederLocationForecastVM: InfoStederLFViewModel, offsett: Int, variable: String){
+     val locationForecastUiState by infostederLocationForecastVM.lFUiState.collectAsState()
++    val pointData = infostederLocationForecastVM.linechartMaker(offsett, variable)
++    val isLoaded by infostederLocationForecastVM.isLoading.collectAsState()
++
+     val dateTimeString = locationForecastUiState.weatherData?.properties?.timeseries?.get(0+offsett)?.time
+     val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
+ 
+-    val pointData = when (offsett) {
+-        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"wind_speed")) }
+-        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "wind_speed")) }
+-    }
+-
+     val maxY = pointData.maxByOrNull { it.y }?.y ?: 1f
+     val minY = pointData.minByOrNull { it.y }?.y ?: 0f
+     val steps = determineSteps(maxY-minY)
+@@ -345,10 +347,17 @@
+         gridLines = GridLines(color = MaterialTheme.colorScheme.outlineVariant),
+         isZoomAllowed = true
+     )
+-
+-    LineChart(modifier = Modifier
+-        .fillMaxWidth()
+-        .height(300.dp),
+-        lineChartData = lineChartData
+-    )
++    if(isLoaded){
++        Box(modifier = Modifier
++            .fillMaxWidth()
++            .height(300.dp), contentAlignment = Alignment.Center) {
++            CircularProgressIndicator(modifier = Modifier)
++        }
++    } else {
++        LineChart(modifier = Modifier
++            .fillMaxWidth()
++            .height(300.dp),
++            lineChartData = lineChartData
++        )
++    }
+ }
+\ No newline at end of file
+Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.OceanForecast.OceanForecastRepository\nimport no.uio.ifi.in2000.prosjekt.Model.OceanForecastData\n\ndata class oceanForecastUiState(\n    val oceanForecastData: OceanForecastData? = OceanForecastData()\n)\n\nclass InfoStederOFViewModel(coords: String): ViewModel(){\n    private val _isLoading = MutableStateFlow(false)\n    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()\n    val liste = coords.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n\n    private val oceanForecastRepo = OceanForecastRepository()\n\n    private val _oFUiState = MutableStateFlow(oceanForecastUiState())\n    val oFUiState: StateFlow<oceanForecastUiState> = _oFUiState.asStateFlow()\n    init {\n        getOceanData(lat, lon)\n    }\n\n    fun getOceanData(lat : String, lon : String){\n        toggleLoading()\n        viewModelScope.launch {\n            _oFUiState.update {\n                it.copy(\n                    oceanForecastData = oceanForecastRepo.getOceanForecast(lat,lon)\n                )\n            }\n            toggleLoading()\n        }\n    }\n\n    fun toggleLoading() {\n        _isLoading.value = !_isLoading.value\n    }\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt
+--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederOFViewModel.kt	(date 1715349197947)
+@@ -2,6 +2,7 @@
+ 
+ import androidx.lifecycle.ViewModel
+ import androidx.lifecycle.viewModelScope
++import co.yml.charts.common.model.Point
+ import kotlinx.coroutines.flow.MutableStateFlow
+ import kotlinx.coroutines.flow.StateFlow
+ import kotlinx.coroutines.flow.asStateFlow
+@@ -9,27 +10,41 @@
+ import kotlinx.coroutines.launch
+ import no.uio.ifi.in2000.prosjekt.Data.OceanForecast.OceanForecastRepository
+ import no.uio.ifi.in2000.prosjekt.Model.OceanForecastData
++import no.uio.ifi.in2000.prosjekt.Model.OceanTimeSeries
++import no.uio.ifi.in2000.prosjekt.Model.TimeSeries
++import java.time.LocalTime
++import java.time.ZoneId
+ 
+ data class oceanForecastUiState(
+-    val oceanForecastData: OceanForecastData? = OceanForecastData()
++    val oceanForecastData: OceanForecastData? = OceanForecastData(),
++    var oceanWeatherList: List<OceanTimeSeries?> = emptyList()
+ )
+ 
+ class InfoStederOFViewModel(coords: String): ViewModel(){
+     private val _isLoading = MutableStateFlow(false)
+     val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
++
++    private val _waveMap = MutableStateFlow<Map<String, Double>>(emptyMap())
++    val waveMap: StateFlow<Map<String, Double>> = _waveMap
++
+     val liste = coords.split(",")
+     val lat = liste[0].trim()
+     val lon = liste[1].trim()
+-
++    private var hour = 0
+     private val oceanForecastRepo = OceanForecastRepository()
+ 
+     private val _oFUiState = MutableStateFlow(oceanForecastUiState())
+     val oFUiState: StateFlow<oceanForecastUiState> = _oFUiState.asStateFlow()
++
++    private val _oceanWeatherList = MutableStateFlow(mutableListOf<OceanTimeSeries?>())
++    val oceanWeatherList: StateFlow<List<OceanTimeSeries?>> = _oceanWeatherList.asStateFlow()
++
++    var startHour = 0
+     init {
+-        getOceanData(lat, lon)
++        getOceanData(lat, lon, 0)
+     }
+ 
+-    fun getOceanData(lat : String, lon : String){
++    fun getOceanData(lat : String, lon : String, offset: Int){
+         toggleLoading()
+         viewModelScope.launch {
+             _oFUiState.update {
+@@ -37,6 +52,9 @@
+                     oceanForecastData = oceanForecastRepo.getOceanForecast(lat,lon)
+                 )
+             }
++            setStartHour()
++            makeWeatherList(offset)
++            waveHeight()
+             toggleLoading()
+         }
+     }
+@@ -44,4 +62,62 @@
+     fun toggleLoading() {
+         _isLoading.value = !_isLoading.value
+     }
++
++    fun setStartHour(){
++        startHour = (_oFUiState.value.oceanForecastData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0
++    }
++
++    fun waveHeight(){
++        val map = mutableMapOf<String, Double>()
++        var max = 0.0
++        var maxTid = 0
++        repeat(23-hour){
++            val tid = (_oFUiState.value.oceanForecastData?.properties?.timeseries?.get(it)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0
++            val height = _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(it)?.data?.instant?.details?.get("sea_surface_wave_height") ?: -1.0
++            map[tid.toString()] = height // Avoid nullpointerexception
++            if(height >= max){
++                max = height
++                maxTid = tid
++            }
++        }
++        map["max"] = max
++        map["tid"] = maxTid.toDouble()
++        _waveMap.value = map
++    }
++
++    fun makeWeatherList(offsett: Int){
++
++        val list = when (offsett) {
++            0 -> when(startHour) {
++                22 -> (0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+2) }
++                23 -> (0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+1) }
++                else -> (0..23-startHour).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index) }
++            }
++            else -> when(_oFUiState.value.oceanWeatherList.size){
++                24 -> (0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+offsett) }
++                else -> (0..23).map { index -> _oFUiState.value.oceanForecastData?.properties?.timeseries?.get(index+offsett-startHour) }
++            }
++        }
++        _oFUiState.value.oceanWeatherList = list
++    }
++
++    fun linechartMaker(offset: Int, variable: String): List<Point> {
++        val pointData = when (offset) {
++            0 -> (startHour..23).map { index ->
++                val temperature = _oFUiState.value.oceanForecastData?.properties?.timeseries
++                    ?.get(index - startHour)?.data?.instant?.details
++                    ?.get(variable)?.toFloat()
++
++                Point(index.toFloat(), temperature ?: 0.0f) // Change is here
++            }
++            else -> (0..23).map { index ->
++                val temperature = _oFUiState.value.oceanForecastData?.properties?.timeseries
++                    ?.get(index + offset - startHour)?.data?.instant?.details
++                    ?.get(variable)?.toFloat()
++
++                Point(index.toFloat(), temperature ?: 0.0f) // Change is here
++            }
++        }
++        return pointData
++    }
+ }
+\ No newline at end of file
+Index: app/build.gradle.kts
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>plugins {\n    id(\"com.android.application\")\n    id(\"org.jetbrains.kotlin.android\")\n    kotlin(\"plugin.serialization\") version \"1.9.22\"\n}\n\n\nandroid {\n    namespace = \"no.uio.ifi.in2000.prosjekt\"\n    compileSdk = 34\n\n    defaultConfig {\n        applicationId = \"no.uio.ifi.in2000.prosjekt\"\n        minSdk = 26\n        targetSdk = 34\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n        vectorDrawables {\n            useSupportLibrary = true\n        }\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n    buildFeatures {\n        compose = true\n    }\n    composeOptions {\n        kotlinCompilerExtensionVersion = \"1.5.1\"\n    }\n    packaging {\n        resources {\n            excludes += \"/META-INF/{AL2.0,LGPL2.1}\"\n        }\n    }\n}\n\ndependencies {\n    implementation(\"com.mapbox.maps:android:11.3.1\") // Mapbox\n    implementation(\"com.mapbox.extension:maps-compose:11.3.1\") // Mapbox\n    implementation (\"org.osmdroid:osmdroid-android:6.1.18\") // Openstreetmap\n    implementation (\"com.google.android.gms:play-services-location:21.2.0\") // Google play location\n    implementation (\"com.google.android.material:material:1.12.0-rc01\")\n    implementation (\"co.yml:ycharts:2.1.0\")\n    implementation(\"io.ktor:ktor-serialization-kotlinx-json:2.3.8\")\n    implementation (\"io.ktor:ktor-client-core:2.3.8\")\n    implementation(\"io.ktor:ktor-client-cio:2.3.8\")\n    implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2\")\n    implementation(\"io.ktor:ktor-client-content-negotiation:2.3.8\")\n    implementation(\"io.coil-kt:coil-compose:2.5.0\")\n    implementation(\"androidx.core:core-ktx:1.12.0\")\n    implementation(\"androidx.lifecycle:lifecycle-runtime-ktx:2.7.0\")\n    implementation(\"androidx.activity:activity-compose:1.8.2\")\n    implementation(platform(\"androidx.compose:compose-bom:2023.08.00\"))\n    implementation(\"androidx.compose.ui:ui\")\n    implementation(\"androidx.compose.ui:ui-graphics\")\n    implementation(\"androidx.compose.ui:ui-tooling-preview\")\n    implementation(\"androidx.compose.material3:material3\")\n\n    implementation (\"androidx.navigation:navigation-compose:2.7.7\")\n    implementation(\"androidx.navigation:navigation-runtime-ktx:2.7.7\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation (\"androidx.datastore:datastore-preferences:1.0.0\") // Use the latest version\n\n\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n    androidTestImplementation(platform(\"androidx.compose:compose-bom:2023.08.00\"))\n    androidTestImplementation(\"androidx.compose.ui:ui-test-junit4\")\n    debugImplementation(\"androidx.compose.ui:ui-tooling\")\n    debugImplementation(\"androidx.compose.ui:ui-test-manifest\")\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/build.gradle.kts b/app/build.gradle.kts
+--- a/app/build.gradle.kts	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/build.gradle.kts	(date 1715349197945)
+@@ -56,7 +56,7 @@
+     implementation("com.mapbox.extension:maps-compose:11.3.1") // Mapbox
+     implementation ("org.osmdroid:osmdroid-android:6.1.18") // Openstreetmap
+     implementation ("com.google.android.gms:play-services-location:21.2.0") // Google play location
+-    implementation ("com.google.android.material:material:1.12.0-rc01")
++    implementation ("com.google.android.material:material:1.12.0")
+     implementation ("co.yml:ycharts:2.1.0")
+     implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.8")
+     implementation ("io.ktor:ktor-client-core:2.3.8")
+@@ -76,7 +76,8 @@
+     implementation ("androidx.navigation:navigation-compose:2.7.7")
+     implementation("androidx.navigation:navigation-runtime-ktx:2.7.7")
+     implementation("androidx.appcompat:appcompat:1.6.1")
+-    implementation ("androidx.datastore:datastore-preferences:1.0.0") // Use the latest version
++    implementation ("androidx.datastore:datastore-preferences:1.0.0")
++    implementation("androidx.compose.material3:material3-android:1.2.1") // Use the latest version
+ 
+ 
+     testImplementation("junit:junit:4.13.2")
+Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.lifecycle.ViewModel\nimport androidx.navigation.NavController\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.ExpandableWeatherCard\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederOFViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.infoSteder.metAlerts\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun DWSscreen(navController: NavController, coordinate: String,\n              dwsViewModel: DWSViewModel = DWSViewModel(coordinate),\n              infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate)) {\n    Scaffold(\n        topBar = {\n            TopAppBar(modifier = Modifier,\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF1F3468),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                        Text(\"Logo\", color = Color.White)\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color.White\n                        )\n                    }\n                },\n            )\n        }\n    )\n    { innerpadding ->\n        LazyColumn(modifier = Modifier.padding(innerpadding)) {\n            item{\n                ExpandableWeatherCard(infoStederOFViewModel = infoStederOFViewModel, nr = 0, dag = \"I dag\")\n            }\n        }\n    }\n}\n\n@Composable\nfun waterTempCard(infoStederOFViewModel: InfoStederOFViewModel, ){\n\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt
+--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/DetailedWeatherSea/DWSscreen.kt	(date 1715349197945)
+@@ -1,45 +1,96 @@
+ package no.uio.ifi.in2000.prosjekt.ui.DetailedWeatherSea
+ 
++import androidx.compose.foundation.Image
++import androidx.compose.foundation.background
++import androidx.compose.foundation.clickable
++import androidx.compose.foundation.layout.Arrangement
+ import androidx.compose.foundation.layout.Box
+ import androidx.compose.foundation.layout.Column
++import androidx.compose.foundation.layout.Row
++import androidx.compose.foundation.layout.Spacer
++import androidx.compose.foundation.layout.fillMaxHeight
+ import androidx.compose.foundation.layout.fillMaxSize
++import androidx.compose.foundation.layout.fillMaxWidth
++import androidx.compose.foundation.layout.height
+ import androidx.compose.foundation.layout.padding
++import androidx.compose.foundation.layout.size
++import androidx.compose.foundation.layout.width
+ import androidx.compose.foundation.lazy.LazyColumn
++import androidx.compose.foundation.shape.RoundedCornerShape
+ import androidx.compose.material.icons.Icons
++import androidx.compose.material.icons.filled.Add
+ import androidx.compose.material.icons.filled.ArrowBack
+ import androidx.compose.material.icons.filled.Search
++import androidx.compose.material3.Card
++import androidx.compose.material3.CardDefaults
++import androidx.compose.material3.CircularProgressIndicator
++import androidx.compose.material3.Divider
+ import androidx.compose.material3.ExperimentalMaterial3Api
+ import androidx.compose.material3.Icon
+ import androidx.compose.material3.IconButton
++import androidx.compose.material3.MaterialTheme
+ import androidx.compose.material3.Scaffold
+ import androidx.compose.material3.Text
+ import androidx.compose.material3.TopAppBar
+ import androidx.compose.material3.TopAppBarDefaults
+ import androidx.compose.runtime.Composable
++import androidx.compose.runtime.collectAsState
++import androidx.compose.runtime.getValue
++import androidx.compose.runtime.mutableStateOf
++import androidx.compose.runtime.remember
++import androidx.compose.runtime.setValue
+ import androidx.compose.ui.Alignment
+ import androidx.compose.ui.Modifier
+ import androidx.compose.ui.graphics.Color
++import androidx.compose.ui.graphics.ColorFilter
++import androidx.compose.ui.layout.ContentScale
++import androidx.compose.ui.res.painterResource
++import androidx.compose.ui.text.TextStyle
++import androidx.compose.ui.text.font.FontWeight
++import androidx.compose.ui.text.style.TextAlign
++import androidx.compose.ui.tooling.preview.Preview
++import androidx.compose.ui.unit.dp
++import androidx.compose.ui.unit.sp
+ import androidx.lifecycle.ViewModel
+ import androidx.navigation.NavController
++import androidx.navigation.compose.rememberNavController
++import no.uio.ifi.in2000.prosjekt.R
+ import no.uio.ifi.in2000.prosjekt.ui.infoSteder.ExpandableWeatherCard
++import no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederLFViewModel
+ import no.uio.ifi.in2000.prosjekt.ui.infoSteder.InfoStederOFViewModel
++import no.uio.ifi.in2000.prosjekt.ui.infoSteder.LfRow
++import no.uio.ifi.in2000.prosjekt.ui.infoSteder.StatusCell
++import no.uio.ifi.in2000.prosjekt.ui.infoSteder.TableCell
++import no.uio.ifi.in2000.prosjekt.ui.infoSteder.TableCellImage
+ import no.uio.ifi.in2000.prosjekt.ui.infoSteder.metAlerts
++import java.time.LocalDate
++import java.time.LocalTime
++import java.time.ZoneId
++import java.time.format.DateTimeFormatter
++import java.util.Locale
++import kotlin.math.ceil
+ 
+ @OptIn(ExperimentalMaterial3Api::class)
+ @Composable
+-fun DWSscreen(navController: NavController, coordinate: String,
+-              dwsViewModel: DWSViewModel = DWSViewModel(coordinate),
+-              infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate)) {
++fun DWSscreen(
++    navController: NavController,
++    coordinate: String,
++    dwsViewModel: DWSViewModel = DWSViewModel(coordinate),
++    infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate),
++    infoStederLFViewModel: InfoStederLFViewModel = InfoStederLFViewModel(coordinate)
++) {
+     Scaffold(
++        containerColor = Color(0xFF171729),
+         topBar = {
+-            TopAppBar(modifier = Modifier,
++            TopAppBar(
++                modifier = Modifier,
+                 colors = TopAppBarDefaults.topAppBarColors(
+-                    containerColor = Color(0xFF1F3468),
++                    containerColor = Color(0xFF171729),
+                     titleContentColor = Color.Black,
+                 ),
+                 title = {
+                     Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
+-                        Text("Logo", color = Color.White)
++                        Text(getCurrentDateInNorwegianFormat(), color = Color.White)
+                     }
+                 },
+                 navigationIcon = {
+@@ -51,19 +102,414 @@
+                         )
+                     }
+                 },
+-            )
+-        }
+-    )
+-    { innerpadding ->
++                actions = {
++                    Icon(
++                        painter = painterResource(id = R.drawable.waves), // Reference your drawable here
++                        contentDescription = "Custom Icon", // Provide an appropriate description
++                        tint = Color.Transparent, // Set the tint color if needed,
++                        modifier = Modifier.size(30.dp)
++                    )
++                }
++            )
++        }
++    ) { innerpadding ->
+         LazyColumn(modifier = Modifier.padding(innerpadding)) {
+-            item{
+-                ExpandableWeatherCard(infoStederOFViewModel = infoStederOFViewModel, nr = 0, dag = "I dag")
++            item {
++                ExpandableWeatherCard(
++                    infoStederOFViewModel = infoStederOFViewModel,
++                    nr = 0,
++                    dag = "I dag"
++                )
++            }
++            item {
++                Box(modifier = Modifier.height(150.dp)) {
++                    Row() {
++                        Box(
++                            modifier = Modifier
++                                .weight(1f)
++                                .padding(10.dp)
++                        ){
++                            waveHeigth(infoStederOFViewModel = infoStederOFViewModel)
++                        }
++                        Box(
++                            modifier = Modifier
++                                .weight(1f)
++                                .padding(10.dp)
++                        ){
++                            uvIndex(infoStederLFViewModel = infoStederLFViewModel)
++                        }
++                    }
++                }
++            }
++            item {
++                wind(infoStederLFViewModel = infoStederLFViewModel)
+             }
+         }
+     }
+ }
+ 
+ @Composable
+-fun waterTempCard(infoStederOFViewModel: InfoStederOFViewModel, ){
++fun waveHeigth(infoStederOFViewModel: InfoStederOFViewModel) {
++    val map by infoStederOFViewModel.waveMap.collectAsState()
++    val isLoading by infoStederOFViewModel.isLoading.collectAsState()
++
++    val zoneId = ZoneId.of("Europe/Oslo")
++    val currentHour = LocalTime.now(zoneId).hour.toString()
++    val painter = painterResource(id = R.drawable.waveheight)
++
++    Card(
++        shape = RoundedCornerShape(14.dp),
++        modifier = Modifier
++            .padding(6.dp)
++            .fillMaxSize()
++    ) {
++        if(isLoading){
++            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
++                CircularProgressIndicator(modifier = Modifier)
++            }
++        } else {
++            Row(modifier = Modifier.padding(20.dp)) {
++                Column(modifier = Modifier.weight(1f)) {
++                    Text(
++                        text = "Bølgetopp",
++                        style = TextStyle(
++                            color = Color.Black,
++                            fontSize = 18.sp
++                        )
++                    )
++                    Text(
++                        text = "Nå - ${map[currentHour]} m",
++                        style = TextStyle(
++                            color = Color.Black,
++                            fontSize = 14.sp
++                        )
++                    )
++                    Text(
++                        text = "Max - ${map["max"]} m",
++                        style = TextStyle(
++                            color = Color(0xFF446097),
++                            fontSize = 12.sp
++                        )
++                    )
++                    Text(
++                        text = "(Kl.${map["tid"]})",
++                        style = TextStyle(
++                            color = Color(0xFF446097),
++                            fontSize = 10.sp
++                        )
++                    )
++
++                }
++                IconButton(
++                    onClick = { },
++                    modifier = Modifier
++                        .background(
++                            color = Color(0xFF446097),
++                            shape = RoundedCornerShape(10.dp)
++                        )
++                        .fillMaxHeight()
++                ) {
++                    Image(painter = painter, contentDescription = "Bølgehøyde", colorFilter = ColorFilter.tint(Color.White), modifier = Modifier.fillMaxSize())
++                }
++            }
++        }
++    }
++}
+ 
++@Composable
++fun uvIndex(infoStederLFViewModel: InfoStederLFViewModel) {
++    val lfUiState by infoStederLFViewModel.lFUiState.collectAsState()
++    val isLoading by infoStederLFViewModel.isLoading.collectAsState()
++    val painter = painterResource(id = R.drawable.uv)
++
++    Card(
++        shape = RoundedCornerShape(14.dp),
++        modifier = Modifier
++            .padding(6.dp)
++            .fillMaxSize()
++    ) {
++        if(isLoading){
++            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
++                CircularProgressIndicator(modifier = Modifier)
++            }
++        } else {
++            Row(modifier = Modifier.padding(20.dp)) {
++                Column(modifier = Modifier.weight(1f)) {
++                    Text(
++                        text = "UV-Index",
++                        style = TextStyle(
++                            color = Color.Black,
++                            fontSize = 18.sp
++                        )
++                    )
++                    Text(
++                        text = lfUiState.weatherData?.properties?.timeseries?.get(0)?.data?.instant?.details?.get("ultraviolet_index_clear_sky").toString(),
++                        style = TextStyle(
++                            color = Color.Black,
++                            fontSize = 16.sp
++                        )
++                    )
++                    Text(
++                        text = uvToText(lfUiState.weatherData?.properties?.timeseries?.get(0)?.data?.instant?.details?.get("ultraviolet_index_clear_sky")),
++                        style = TextStyle(
++                            color = Color.Black,
++                            fontSize = 14.sp
++                        )
++                    )
++                }
++                IconButton(
++                    onClick = { },
++                    modifier = Modifier
++                        .background(
++                            color = Color(0xFFF7EC59),
++                            shape = RoundedCornerShape(10.dp)
++                        )
++                        .fillMaxHeight()
++                ) {
++                    Image(painter = painter, contentDescription = "UV")
++                }
++            }
++        }
++    }
++}
++
++fun uvToText(uvIndex: Double?): String{
++    if(uvIndex == null){
++        return "UV-index ikke tilgjengelig"
++    }
++    return when (uvIndex) {
++        in 0.0..2.9 -> "Lavt nivå"
++        in 3.0..5.9 -> "Moderat nivå"
++        in 6.0..7.9 -> "Høyt nivå"
++        in 8.0..10.9 -> "Svært høyt nivå"
++        else -> "Ekstremt nivå"
++    }
++}
++
++
++@Composable
++fun wind(infoStederLFViewModel: InfoStederLFViewModel){
++    val locFor by infoStederLFViewModel.lFUiState.collectAsState()
++    infoStederLFViewModel.makeWeatherList(0)
++    val isLoading by infoStederLFViewModel.isLoading.collectAsState()
++    var expanded by remember { mutableStateOf (false) }
++
++    if(locFor.weatherList.isEmpty()){
++        return
++    }
++    val a = locFor.weatherList.size
++    val res = ceil(a.toDouble() / 6).toInt()
++
++    val first = when (expanded) {
++        true -> "00"
++        else -> "00-06"
++    }
++    val second = when (expanded) {
++        true -> "01"
++        else -> "06-12"
++    }
++    val third = when (expanded) {
++        true -> "02"
++        else -> "12-18"
++    }
++    val fourth = when (expanded) {
++        true -> "03"
++        else -> "18-24"
++    }
++    val t1 = when (expanded) {
++        true -> 0
++        else -> 0
++    }
++    val t2 = when (expanded) {
++        true -> 1
++        else -> 6
++    }
++    val t3 = when (expanded) {
++        true -> 2
++        else -> 12
++    }
++    val t4 = when (expanded) {
++        true -> 3
++        else -> 18
++    }
++    val indexArray = arrayOf(t1, t2, t3, t4)
++    val column1Weight = .2f
++    val column2Weight = .3f
++    val column3Weight = .25f
++    val column4Weight = .25f
++
++    val expandMoreIcon = painterResource(id = R.drawable.expand_more)
++    val expandLessIcon = painterResource(id = R.drawable.expand_less)
++    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
++
++    Card(
++        shape = RoundedCornerShape(5.dp),
++        elevation = CardDefaults.cardElevation(
++            defaultElevation = 20.dp,
++            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed
++            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused
++            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over
++        ),
++        modifier = Modifier
++            .fillMaxWidth()
++            .padding(10.dp)
++            .clickable(
++                onClick = { expanded = !expanded }
++            ),
++    ) {
++        Box(
++            modifier = Modifier
++                .fillMaxSize()
++        ) {
++            if (isLoading) {
++                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
++                    CircularProgressIndicator(modifier = Modifier)
++                }
++            } else {
++                Column() {
++                    Row(
++                        modifier = Modifier.fillMaxWidth(),
++                        horizontalArrangement = Arrangement.SpaceBetween
++                    ) {
++                        Box(contentAlignment = Alignment.CenterStart) {
++                            Text(
++                                text = "I dag",
++                                style = MaterialTheme.typography.titleLarge,
++                                fontWeight = FontWeight.Black,
++                                textAlign = TextAlign.Start
++                            )
++                        }
++                        Box(contentAlignment = Alignment.CenterEnd) {
++                            Text(
++                                text = "Vind",
++                                style = MaterialTheme.typography.titleLarge,
++                                fontWeight = FontWeight.Black
++                            )
++                        }
++                    }
++                    Row(
++                        Modifier
++                            .fillMaxWidth()
++                            .padding(8.dp),
++                        horizontalArrangement = Arrangement.SpaceBetween
++                    ) {
++                        TableCell(
++                            text = "Tid",
++                            weight = column1Weight,
++                            alignment = TextAlign.Left,
++                            title = true
++                        )
++                        TableCell(text = "Vind", weight = column2Weight, title = true)
++                        TableCell(text = "Vindkast", weight = column3Weight, title = true)
++                        TableCell(
++                            text = "Retning",
++                            weight = column4Weight,
++                            alignment = TextAlign.Right,
++                            title = true
++                        )
++                    }
++                    Divider(
++                        color = Color.LightGray, modifier = Modifier
++                            .fillMaxWidth()
++                            .height(1.dp)
++                    )
++                    var teller = 0
++                    for (i in 4-res..<4) {
++                        Row(
++                            Modifier.fillMaxWidth(),
++                            horizontalArrangement = Arrangement.SpaceBetween
++                        ){
++                            TableCell(
++                                text = when (i) {
++                                    0 -> when (expanded) {
++                                        true -> "%02d".format(teller+24-a)
++                                        else -> first
++                                    }
++                                    1 -> when (expanded) {
++                                        true -> "%02d".format(teller+24-a)
++                                        else -> second
++                                    }
++                                    2 -> when (expanded) {
++                                        true -> "%02d".format(teller+24-a)
++                                        else -> third
++                                    }
++                                    else -> when (expanded) {
++                                        true -> "%02d".format(teller+24-a)
++                                        else -> fourth
++                                    }
++                                },
++                                weight = column1Weight,
++                                alignment = TextAlign.Left
++                            )
++                            locFor.weatherList[indexArray[teller]]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
++                            locFor.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
++                            locFor.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_from_direction").toString().let {
++                                TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
++                            }
++                        }
++                        Divider(
++                            color = Color.LightGray,
++                            modifier = Modifier
++                                .height(1.dp)
++                                .fillMaxHeight()
++                                .fillMaxWidth()
++                        )
++                        teller ++
++                    }
++                    if (expanded) {
++                        repeat(a - res) { index ->
++                            Row(
++                                Modifier.fillMaxWidth(),
++                                horizontalArrangement = Arrangement.SpaceBetween
++                            ){
++                                TableCell(
++                                    text = "%02d".format(index+24+res-a),
++                                    weight = column1Weight,
++                                    alignment = TextAlign.Left
++                                )
++                                locFor.weatherList[index+res]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
++                                locFor.weatherList[index+res]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
++                                locFor.weatherList[index+res]?.data?.instant?.details?.get("wind_from_direction").toString().let {
++                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
++                                }
++                            }
++                            Divider(
++                                color = Color.LightGray,
++                                modifier = Modifier
++                                    .height(1.dp)
++                                    .fillMaxHeight()
++                                    .fillMaxWidth()
++                            )
++                        }
++                    }
++                    Row(
++                        verticalAlignment = Alignment.CenterVertically,
++                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally
++                        modifier = Modifier.fillMaxWidth()
++                    ) {
++                        Text(text = "Time for time")
++                        Image(
++                            painter = toggleIconPainter,
++                            contentDescription = "Expand",
++                            modifier = Modifier.size(30.dp),
++                            Alignment.CenterStart
++                        )
++                    }
++                }
++            }
++        }
++    }
++}
++
++fun getCurrentDateInNorwegianFormat(): String {
++    val currentDate = LocalDate.now()
++    val formatter = DateTimeFormatter.ofPattern("dd. MMMM", Locale("no"))
++    return currentDate.format(formatter)
++}
++
++@Composable
++@Preview
++fun prevsa(){
++    val navController = rememberNavController()
++    DWSscreen(navController = navController, coordinate = "59.07,10.77")
+ }
+\ No newline at end of file
+Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.WeatherForecast.LocationForecastRepository\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\n\ndata class locationForecastUiState(\n    val weatherData: WeatherData? = WeatherData()\n)\nclass InfoStederLFViewModel(coords: String): ViewModel() {\n    private val _isLoading = MutableStateFlow(false)\n    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()\n    val liste = coords.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    private val locationForecastRepo = LocationForecastRepository()\n\n    private val _lFUiState = MutableStateFlow(locationForecastUiState())\n    val lFUiState: StateFlow<locationForecastUiState> = _lFUiState.asStateFlow()\n    var startHour = 0\n    init {\n        getNewData(lat,lon)\n    }\n\n    fun getNewData(lat : String, lon : String){\n        toggleLoading()\n        viewModelScope.launch {\n            _lFUiState.update {\n                it.copy(\n                    weatherData = locationForecastRepo.getLocationForecast(lat,lon)\n                )\n            }\n            setStartHour()\n            toggleLoading()\n        }\n    }\n    fun toggleLoading() {\n        _isLoading.value = !_isLoading.value\n    }\n\n    fun setStartHour(){\n        startHour = (_lFUiState.value.weatherData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0\n    }\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt
+--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt	(date 1715349197946)
+@@ -1,17 +1,36 @@
+ package no.uio.ifi.in2000.prosjekt.ui.infoSteder
+ 
++import androidx.compose.material3.MaterialTheme
++import androidx.compose.ui.graphics.Brush
++import androidx.compose.ui.graphics.Color
++import androidx.compose.ui.unit.dp
+ import androidx.lifecycle.ViewModel
+ import androidx.lifecycle.viewModelScope
++import co.yml.charts.axis.AxisData
++import co.yml.charts.common.model.Point
++import co.yml.charts.ui.linechart.model.GridLines
++import co.yml.charts.ui.linechart.model.IntersectionPoint
++import co.yml.charts.ui.linechart.model.Line
++import co.yml.charts.ui.linechart.model.LineChartData
++import co.yml.charts.ui.linechart.model.LinePlotData
++import co.yml.charts.ui.linechart.model.LineStyle
++import co.yml.charts.ui.linechart.model.LineType
++import co.yml.charts.ui.linechart.model.SelectionHighlightPoint
++import co.yml.charts.ui.linechart.model.SelectionHighlightPopUp
++import co.yml.charts.ui.linechart.model.ShadowUnderLine
+ import kotlinx.coroutines.flow.MutableStateFlow
+ import kotlinx.coroutines.flow.StateFlow
+ import kotlinx.coroutines.flow.asStateFlow
+ import kotlinx.coroutines.flow.update
+ import kotlinx.coroutines.launch
+ import no.uio.ifi.in2000.prosjekt.Data.WeatherForecast.LocationForecastRepository
++import no.uio.ifi.in2000.prosjekt.Model.OceanTimeSeries
++import no.uio.ifi.in2000.prosjekt.Model.TimeSeries
+ import no.uio.ifi.in2000.prosjekt.Model.WeatherData
+ 
+ data class locationForecastUiState(
+-    val weatherData: WeatherData? = WeatherData()
++    val weatherData: WeatherData? = WeatherData(),
++    var weatherList: List<TimeSeries?> = emptyList()
+ )
+ class InfoStederLFViewModel(coords: String): ViewModel() {
+     private val _isLoading = MutableStateFlow(false)
+@@ -23,28 +42,73 @@
+ 
+     private val _lFUiState = MutableStateFlow(locationForecastUiState())
+     val lFUiState: StateFlow<locationForecastUiState> = _lFUiState.asStateFlow()
++
++    private val _weatherList = MutableStateFlow(mutableListOf<TimeSeries?>())
++    val weatherList: StateFlow<List<TimeSeries?>> = _weatherList.asStateFlow()
++
+     var startHour = 0
++
+     init {
+-        getNewData(lat,lon)
++        getNewData(lat, lon, 0)
+     }
+ 
+-    fun getNewData(lat : String, lon : String){
++    private fun getNewData(lat: String, lon: String, offset: Int) {
+         toggleLoading()
+         viewModelScope.launch {
+             _lFUiState.update {
+                 it.copy(
+-                    weatherData = locationForecastRepo.getLocationForecast(lat,lon)
++                    weatherData = locationForecastRepo.getLocationForecast(lat, lon)
+                 )
+             }
+             setStartHour()
++            makeWeatherList(offset)
+             toggleLoading()
+         }
+     }
++
+     fun toggleLoading() {
+         _isLoading.value = !_isLoading.value
+     }
+ 
+-    fun setStartHour(){
+-        startHour = (_lFUiState.value.weatherData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0
++    fun setStartHour() {
++        startHour =
++            (_lFUiState.value.weatherData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)
++                ?.toIntOrNull() ?: 0
++    }
++
++    fun makeWeatherList(offset: Int){
++        val list = when (offset) {
++            0 -> when(startHour) {
++                22 -> (0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+2) }
++                23 -> (0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+1) }
++                else -> (0..23-startHour).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index) }
++            }
++            else -> when(_lFUiState.value.weatherList.size){
++                24 -> (0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+offset) }
++                else -> (0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+offset-startHour) }
++            }
++        }
++        println(startHour.toString() + " " + offset.toString())
++        _lFUiState.value.weatherList = list
++    }
++
++    fun linechartMaker(offset: Int, variable: String): List<Point> {
++        val pointData = when (offset) {
++            0 -> (startHour..23).map { index ->
++                val temperature = _lFUiState.value.weatherData?.properties?.timeseries
++                    ?.get(index - startHour)?.data?.instant?.details
++                    ?.get(variable)?.toFloat()
++
++                Point(index.toFloat(), temperature ?: 0.0f) // Change is here
++            }
++            else -> (0..23).map { index ->
++                val temperature = _lFUiState.value.weatherData?.properties?.timeseries
++                    ?.get(index + offset - startHour)?.data?.instant?.details
++                    ?.get(variable)?.toFloat()
++
++                Point(index.toFloat(), temperature ?: 0.0f) // Change is here
++            }
++        }
++        return pointData
+     }
+ }
+\ No newline at end of file
+Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport android.graphics.Paint.Align\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.BorderStroke\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.IntrinsicSize\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.foundation.selection.toggleable\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Favorite\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.BottomAppBar\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.Divider\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Switch\nimport androidx.compose.material3.SwitchDefaults\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.rotate\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Popup\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.rememberNavController\nimport co.yml.charts.axis.AxisData\nimport co.yml.charts.common.model.Point\nimport co.yml.charts.ui.linechart.LineChart\nimport co.yml.charts.ui.linechart.model.GridLines\nimport co.yml.charts.ui.linechart.model.IntersectionPoint\nimport co.yml.charts.ui.linechart.model.Line\nimport co.yml.charts.ui.linechart.model.LineChartData\nimport co.yml.charts.ui.linechart.model.LinePlotData\nimport co.yml.charts.ui.linechart.model.LineStyle\nimport co.yml.charts.ui.linechart.model.LineType\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPoint\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPopUp\nimport co.yml.charts.ui.linechart.model.ShadowUnderLine\nimport coil.compose.AsyncImage\nimport coil.request.ImageRequest\nimport no.uio.ifi.in2000.prosjekt.Data.Ukedag\nimport no.uio.ifi.in2000.prosjekt.R\nimport no.uio.ifi.in2000.prosjekt.ui.Map.ExpandableCard\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MetAlersUiState\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MetAlertViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.Map.formatToNorwegianTime\nimport no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme\nimport java.util.Calendar\nimport java.util.Locale\nimport kotlin.math.ceil\nimport kotlin.math.pow\nimport kotlin.math.round\nimport kotlin.math.roundToInt\n\ndata class LfRow(val tid: String, val temp: String?, val vind: String?, val rotation: String?)\n\n@RequiresApi(Build.VERSION_CODES.O)\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalComposeUiApi::class)\n@Composable\nfun InfoStederScreen(coordinate: String, sted: String, navController: NavController, infoStederScreenViewModel : InfoStederViewModel = InfoStederViewModel(coordinate),\n                   infoStederLFViewModel: InfoStederLFViewModel = InfoStederLFViewModel(coordinate), metAlertViewModel: MetAlertViewModel = viewModel(),\n                     infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate)\n) {\n    val liste = coordinate.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    val metAlert by metAlertViewModel.MAUiState.collectAsState()\n    val antallVarsler = metAlert.MetAlertsCoordinate?.features?.size\n    val iconTint = when {\n        antallVarsler == 0 || antallVarsler == null -> Color.Transparent\n        else -> Color.Yellow\n    }\n    metAlertViewModel.getNewDataCoords(lat,lon)\n//\n//    val locFor by infoStederLFViewModel.lFUiState.collectAsState()\n//    val dateTimeString = locFor.weatherData?.properties?.timeseries?.get(0)?.time\n//    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n    val hour = infoStederLFViewModel.startHour\n    var selectedOption by remember { mutableStateOf(\"I dag\") }\n\n    var selectedOptionSwitch by remember { mutableStateOf(\"Tabell\") }\n//    val offsett = when (selectedOption) {\n//        \"I dag\" -> 0\n//        \"I morgen\" -> when(hour){\n//                22 -> 26\n//                23 -> 25\n//                else -> 24\n//            }\n//        else -> when(hour) {\n//            22 -> 50\n//            23 -> 49\n//            else -> 48\n//        }\n//    }\n    val offsett = when (selectedOption) {\n        \"I dag\" -> 0\n        \"I morgen\" -> 24\n        else -> 48\n    }\n    val calendar = Calendar.getInstance()\n    val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)\n    val toDagerFrem = Ukedag.entries[(dayOfWeek+1)%7]\n\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF1F3468),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                        Text(sted, color = Color.White)\n                        //Text(coordinate, color = Color.White)\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color.White\n                        )\n                    }\n                },\n\n                actions = {\n                    IconButton(onClick = { metAlertViewModel.togglePopupVisibility() }) {\n                        Icon(\n                            painter = painterResource(id = R.drawable.warning), // Reference your drawable here\n                            contentDescription = \"Custom Icon\", // Provide an appropriate description\n                            tint = iconTint, // Set the tint color if needed,\n                            modifier = Modifier.size(30.dp)\n                        )\n                    }\n                }\n            )\n        },\n        bottomBar = {\n            BottomAppBar(\n                containerColor = Color(0xFFCFE3F3) // Matching the top bar color\n            ){\n                Row (\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .padding(horizontal = 2.dp),\n                    horizontalArrangement = Arrangement.SpaceBetween\n                ) {\n\n                    MultiToggleButton(currentSelection = selectedOptionSwitch, toggleStates = listOf(\"Tabell\", \"Graf\")) {newSelecter ->\n                        selectedOptionSwitch = newSelecter\n                    }\n                    MultiToggleButton(currentSelection = selectedOption, toggleStates = listOf(\"I dag\", \"I morgen\",\n                        toDagerFrem.name\n                    )) { newselectedOption ->\n                        selectedOption = newselectedOption\n                    }\n                }\n            }\n        }\n    ) { innerPadding ->\n        Column() {\n            if(antallVarsler != null && antallVarsler > 0){\n                metAlerts(metAlertViewModel = metAlertViewModel, antallVarsler = antallVarsler)\n            }\n            LazyColumn(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(innerPadding)\n                    .padding(8.dp),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.spacedBy(30.dp),\n                contentPadding = PaddingValues(10.dp)\n            ) {\n                item {\n                    if(selectedOptionSwitch == \"Graf\"){\n                        waterTempCard(\n                            infoStederScreenViewModel = infoStederScreenViewModel,\n                            offsett = offsett)\n                    } else {\n                        //ExpandableWeatherCardLand2(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, dag = selectedOption)\n\n                        ExpandableWeatherCardLand(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, selectedOption)\n                    }\n                }\n                item {\n                    if(selectedOptionSwitch == \"Graf\") {\n                        landTempCard(\n                            infostederLocationForecastVM = infoStederLFViewModel,\n                            offsett = offsett\n                        )\n                    } else {\n                        ExpandableWeatherCard(infoStederOFViewModel, nr = offsett, selectedOption)\n                        //ExpandableWeatherCardSea2(infoStederOFViewModel = infoStederOFViewModel, nr = offsett, dag = selectedOption)\n                    }\n                }\n                item {\n                    if(selectedOptionSwitch == \"Graf\") {\n                        windSpeedCard(\n                            infostederLocationForecastVM = infoStederLFViewModel,\n                            offsett = offsett\n                        )\n                    } else {\n                        //ExpandableWeatherCardSea2(infoStederOFViewModel, offsett, selectedOption)\n                    }\n                }\n            }\n        }\n    }\n}\n@Composable\nfun myButton(dag : String, selectedOption: String, onSelectedOptionChanged: (String) -> Unit){\n    Button(onClick = {\n        onSelectedOptionChanged(dag)\n    },\n        shape = RectangleShape,\n        border = BorderStroke(1.dp, Color.White),\n        modifier = Modifier) {\n        Text(text = dag)\n    }\n}\n\n@Composable\nfun MultiToggleButton(\n    currentSelection: String,\n    toggleStates: List<String>,\n    onToggleChange: (String) -> Unit\n) {\n    val selectedTint = MaterialTheme.colorScheme.tertiary\n    val unselectedTint = Color.White\n\n    Row(modifier = Modifier\n        .height(IntrinsicSize.Min)\n        .border(BorderStroke(1.dp, Color.LightGray))\n        ) {\n        toggleStates.forEachIndexed { index, toggleState ->\n            val isSelected = currentSelection.lowercase() == toggleState.lowercase()\n            val backgroundTint = if (isSelected) selectedTint else unselectedTint\n            val textColor = if (isSelected) Color.White else Color.Unspecified\n\n            if (index != 0) {\n                Divider(\n                    color = Color.LightGray,\n                    modifier = Modifier\n                        .fillMaxHeight()\n                        .width(1.dp)\n                )\n            }\n\n            Row(\n                modifier = Modifier\n                    .background(backgroundTint)\n                    .padding(vertical = 6.dp, horizontal = 8.dp)\n                    .toggleable(\n                        value = isSelected,\n                        enabled = true,\n                        onValueChange = { selected ->\n                            if (selected) {\n                                onToggleChange(toggleState)\n                            }\n                        })\n            ) {\n                Text(toggleState.toCapital(), color = textColor, modifier = Modifier.padding(4.dp))\n            }\n        }\n    }\n}\n\nfun String.toCapital(): String {\n    return this.lowercase().replaceFirstChar { it.titlecase(Locale.getDefault())} }\n\n@Composable\nfun RectangleSwitch() {\n    var isChecked by remember { mutableStateOf(false) }\n    val buttonText = if (isChecked) \"ON\" else \"OFF\"\n    val buttonColor = if (isChecked) Color.Green else Color.Gray\n\n    Button(\n        onClick = { isChecked = !isChecked },\n        colors = ButtonDefaults.buttonColors(), // Set the background color based on the state\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp) // Customize padding\n    ) {\n        Text(text = buttonText, color = Color.White) // Text color is white for better contrast\n    }\n}\n\n\nfun avrund(value: Double, precision: Int): Double {\n    val scale = 10.0.pow(precision)\n    return round(value * scale) / scale\n}\n\nfun hentVerdiTemperature(infoSted: HavvarselUIState, index : Int) : Float{\n    val a = infoSted.temperatureProjection?.variables?.get(0)?.data?.get(index)?.value\n    val b = a?.toDouble()\n    val c = b?.let { avrund(it,1) }\n    return if (c != null) {\n        c.toFloat()\n    } else {\n        0f\n    }\n}\n\n@Composable\nfun ExpandableWeatherCardLand(infoStederLFViewModel: InfoStederLFViewModel, nr : Int, dag : String) {\n    val lFUiState by infoStederLFViewModel.lFUiState.collectAsState()\n    val isLoading by infoStederLFViewModel.isLoading.collectAsState()\n    var expanded by remember { mutableStateOf (false) }\n\n    if(lFUiState.weatherData?.properties?.timeseries?.size == 0){\n        return\n    }\n    val dateTimeString = lFUiState.weatherData?.properties?.timeseries?.get(0)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val first = when (expanded) {\n        true -> \"00\"\n        else -> \"00-06\"\n    }\n    val second = when (expanded) {\n        true -> \"01\"\n        else -> \"06-12\"\n    }\n    val third = when (expanded) {\n        true -> \"02\"\n        else -> \"12-18\"\n    }\n    val fourth = when (expanded) {\n        true -> \"03\"\n        else -> \"18-24\"\n    }\n    val t1 = when (expanded) {\n        true -> 0\n        else -> 0\n    }\n    val t2 = when (expanded) {\n        true -> 1\n        else -> 6\n    }\n    val t3 = when (expanded) {\n        true -> 2\n        else -> 12\n    }\n    val t4 = when (expanded) {\n        true -> 3\n        else -> 18\n    }\n    val indexArray = arrayOf(t1, t2, t3, t4)\n    val column1Weight = .2f\n    val column2Weight = .3f\n    val column3Weight = .25f\n    val column4Weight = .25f\n\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n    val lfRowList = when (nr) {\n        0 -> when(hour) {\n            22 -> (0..23).map { index -> LfRow(\"%02d\".format(index),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"air_temperature\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"wind_speed\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"wind_from_direction\").toString()) }\n            23 -> (0..23).map { index -> LfRow(\"%02d\".format(index),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"air_temperature\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"wind_speed\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"wind_from_direction\").toString()) }\n            else -> (0..23-hour).map { index -> LfRow(\"%02d\".format(hour+index),\n                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"air_temperature\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"wind_speed\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"wind_from_direction\").toString()) }\n        }\n        else -> (0..23).map { index -> LfRow(\"%02d\".format(index),\n            lFUiState.weatherData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"air_temperature\").toString(),\n            lFUiState.weatherData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"wind_speed\").toString(),\n            lFUiState.weatherData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"wind_from_direction\").toString()) }\n    }\n    val a = lfRowList.size\n    val res = ceil(a.toDouble() / 6).toInt()\n    Card(\n        shape = RoundedCornerShape(5.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 20.dp,\n            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n        ){\n            if(isLoading){\n                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                    CircularProgressIndicator(modifier = Modifier)\n                }\n            } else {\n                Column() {\n                    Text(\n                        text = dag,\n                        style = MaterialTheme.typography.titleLarge,\n                        fontWeight = FontWeight.Black\n                    )\n                    Row(\n                        Modifier\n                            .fillMaxWidth()\n                            .padding(8.dp),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        TableCell(\n                            text = \"Tid\",\n                            weight = column1Weight,\n                            alignment = TextAlign.Left,\n                            title = true\n                        )\n                        TableCell(text = \"Temp\", weight = column2Weight, title = true)\n                        TableCell(text = \"Vind\", weight = column3Weight, title = true)\n                        TableCell(\n                            text = \"Retning\",\n                            weight = column4Weight,\n                            alignment = TextAlign.Right,\n                            title = true\n                        )\n                    }\n                    Divider(color = Color.LightGray, modifier = Modifier\n                        .fillMaxWidth()\n                        .height(1.dp))\n                    if(nr == 0){\n                        var teller = 0\n                        for (i in 4-res..<4) {\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = when (i) {\n                                        0 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> first\n                                        }\n                                        1 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> second\n                                        }\n                                        2 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> third\n                                        }\n                                        else -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> fourth\n                                        }\n                                    },\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                lfRowList[indexArray[teller]].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                lfRowList[indexArray[teller]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                                lfRowList[indexArray[teller]].rotation?.let {\n                                    TableCellImage(text = it, weight = column4Weight)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                            teller ++\n                        }\n                        if (expanded) {\n                            repeat(lfRowList.size - res) { index ->\n                                Row(\n                                    Modifier.fillMaxWidth(),\n                                    horizontalArrangement = Arrangement.SpaceBetween\n                                ){\n                                    TableCell(\n                                        text = lfRowList[index+res].tid,\n                                        weight = column1Weight,\n                                        alignment = TextAlign.Left\n                                    )\n                                    lfRowList[index+res].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                    lfRowList[index+res].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                                    lfRowList[index+res].rotation?.let {\n                                        TableCellImage(text = it, weight = column4Weight)\n                                    }\n                                }\n                                Divider(\n                                    color = Color.LightGray,\n                                    modifier = Modifier\n                                        .height(1.dp)\n                                        .fillMaxHeight()\n                                        .fillMaxWidth()\n                                )\n                            }\n                        }\n                    } else {\n                        for (i in 0..3) {\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = when (i) {\n                                        0 -> first\n                                        1 -> second\n                                        2 -> third\n                                        else -> fourth\n                                    },\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                lfRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                lfRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                                lfRowList[indexArray[i]].rotation?.let {\n                                    TableCellImage(text = it, weight = column4Weight)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                        }\n                        if (expanded) {\n                            repeat(20) { index ->\n                                Row(\n                                    Modifier.fillMaxWidth(),\n                                    horizontalArrangement = Arrangement.SpaceBetween\n                                ){\n                                    TableCell(\n                                        text = lfRowList[index+4].tid,\n                                        weight = column1Weight,\n                                        alignment = TextAlign.Left\n                                    )\n                                    lfRowList[index+4].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                    lfRowList[index+4].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                                    lfRowList[index+4].rotation?.let {\n                                        TableCellImage(text = it, weight = column4Weight)\n                                    }\n                                }\n                                Divider(\n                                    color = Color.LightGray,\n                                    modifier = Modifier\n                                        .height(1.dp)\n                                        .fillMaxHeight()\n                                        .fillMaxWidth()\n                                )\n                            }\n                        }\n                    }\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically,\n                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Text(text = \"Time for time\")\n                        Image(\n                            painter = toggleIconPainter,\n                            contentDescription = \"Expand\",\n                            modifier = Modifier.size(30.dp),\n                            Alignment.CenterStart\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ExpandableWeatherCard(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {\n    val oFUiState by infoStederOFViewModel.oFUiState.collectAsState()\n    val isLoading by infoStederOFViewModel.isLoading.collectAsState()\n    var expanded by remember { mutableStateOf (false) }\n\n    if(oFUiState.oceanForecastData?.properties?.timeseries?.size == 0){\n        return\n    }\n    val dateTimeString = oFUiState.oceanForecastData?.properties?.timeseries?.get(0)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val first = when (expanded) {\n        true -> \"00\"\n        else -> \"00-06\"\n    }\n    val second = when (expanded) {\n        true -> \"01\"\n        else -> \"06-12\"\n    }\n    val third = when (expanded) {\n        true -> \"02\"\n        else -> \"12-18\"\n    }\n    val fourth = when (expanded) {\n        true -> \"03\"\n        else -> \"18-24\"\n    }\n    val t1 = when (expanded) {\n        true -> 0\n        else -> 0\n    }\n    val t2 = when (expanded) {\n        true -> 1\n        else -> 6\n    }\n    val t3 = when (expanded) {\n        true -> 2\n        else -> 12\n    }\n    val t4 = when (expanded) {\n        true -> 3\n        else -> 18\n    }\n    val indexArray = arrayOf(t1, t2, t3, t4)\n    val column1Weight = .2f\n    val column2Weight = .3f\n    val column3Weight = .25f\n    val column4Weight = .25f\n\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n    val ofRowList = when (nr) {\n        0 -> if(hour == 22){\n            (0..23).map { index -> LfRow(\"%02d\".format(index),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"sea_water_temperature\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"sea_water_speed\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"sea_water_to_direction\").toString()) }\n        } else if (hour == 23){\n            (0..23).map { index -> LfRow(\"%02d\".format(index),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"sea_water_temperature\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"sea_water_speed\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"sea_water_to_direction\").toString()) }\n        }\n        else {\n            (0..23-hour).map { index -> LfRow(\"%02d\".format(hour+index),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"sea_water_temperature\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"sea_water_speed\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"sea_water_to_direction\").toString()) }\n        }\n        else -> (0..23).map { index -> LfRow(\"%02d\".format(index),\n            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"sea_water_temperature\").toString(),\n            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"sea_water_speed\").toString(),\n            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"sea_water_to_direction\").toString()) }\n    }\n    val a = ofRowList.size\n    val res = ceil(a.toDouble() / 6).toInt()\n    Card(\n        shape = RoundedCornerShape(5.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 20.dp,\n            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n        ){\n            if(isLoading){\n                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                    CircularProgressIndicator(modifier = Modifier)\n                }\n            } else {\n                Column() {\n                    Text(\n                        text = dag,\n                        style = MaterialTheme.typography.titleLarge,\n                        fontWeight = FontWeight.Black,\n                        textAlign = TextAlign.Start\n                    )\n                    Row(\n                        Modifier\n                            .fillMaxWidth()\n                            .padding(8.dp),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        TableCell(\n                            text = \"Tid\",\n                            weight = column1Weight,\n                            alignment = TextAlign.Left,\n                            title = true\n                        )\n                        TableCell(text = \"Temp\", weight = column2Weight, title = true)\n                        TableCell(text = \"Strøm\", weight = column3Weight, title = true)\n                        TableCell(\n                            text = \"Retning\",\n                            weight = column4Weight,\n                            alignment = TextAlign.Right,\n                            title = true\n                        )\n                    }\n                    Divider(color = Color.LightGray, modifier = Modifier\n                        .fillMaxWidth()\n                        .height(1.dp))\n                    if(nr == 0){\n                        var teller = 0\n                        for (i in 4-res..<4) {\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = when (i) {\n                                        0 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> first\n                                        }\n                                        1 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> second\n                                        }\n                                        2 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> third\n                                        }\n                                        else -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> fourth\n                                        }\n                                    },\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                ofRowList[indexArray[teller]].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                ofRowList[indexArray[teller]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }\n                                ofRowList[indexArray[teller]].rotation?.let {\n                                    TableCellImage(text = it, weight = column4Weight)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                            teller ++\n                        }\n                        if (expanded) {\n                            repeat(ofRowList.size - res) { index ->\n                                Row(\n                                    Modifier.fillMaxWidth(),\n                                    horizontalArrangement = Arrangement.SpaceBetween\n                                ){\n                                    TableCell(\n                                        text = ofRowList[index+res].tid,\n                                        weight = column1Weight,\n                                        alignment = TextAlign.Left\n                                    )\n                                    ofRowList[index+res].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                    ofRowList[index+res].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }\n                                    ofRowList[index+res].rotation?.let {\n                                        TableCellImage(text = it, weight = column4Weight)\n                                    }\n                                }\n                                Divider(\n                                    color = Color.LightGray,\n                                    modifier = Modifier\n                                        .height(1.dp)\n                                        .fillMaxHeight()\n                                        .fillMaxWidth()\n                                )\n                            }\n                        }\n                    } else {\n                        for (i in 0..3) {\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = when (i) {\n                                        0 -> first\n                                        1 -> second\n                                        2 -> third\n                                        else -> fourth\n                                    },\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                ofRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                ofRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }\n                                ofRowList[indexArray[i]].rotation?.let {\n                                    TableCellImage(text = it, weight = column4Weight)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                        }\n                        if (expanded) {\n                            repeat(20) { index ->\n                                Row(\n                                    Modifier.fillMaxWidth(),\n                                    horizontalArrangement = Arrangement.SpaceBetween\n                                ){\n                                    TableCell(\n                                        text = ofRowList[index+4].tid,\n                                        weight = column1Weight,\n                                        alignment = TextAlign.Left\n                                    )\n                                    ofRowList[index+4].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                    ofRowList[index+4].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }\n                                    ofRowList[index+4].rotation?.let {\n                                        TableCellImage(text = it, weight = column4Weight)\n                                    }\n                                }\n                                Divider(\n                                    color = Color.LightGray,\n                                    modifier = Modifier\n                                        .height(1.dp)\n                                        .fillMaxHeight()\n                                        .fillMaxWidth()\n                                )\n                            }\n                        }\n                    }\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically,\n                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Text(text = \"Time for time\")\n                        Image(\n                            painter = toggleIconPainter,\n                            contentDescription = \"Expand\",\n                            modifier = Modifier.size(30.dp),\n                            Alignment.CenterStart\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n//@Composable\n//fun ExpandableWeatherCardSea2(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {\n//    val oceanForecastUiState by infoStederOFViewModel.oFUiState.collectAsState()\n//    val isLoading by infoStederOFViewModel.isLoading.collectAsState()\n//    var expanded by remember { mutableStateOf (false) }\n//\n////    val lfRowList = when (nr) {\n////        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,\"air_temperature\")) }\n////        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, \"air_temperature\")) }\n////    }\n//    val ofRowList =  (0..23).map { index -> LfRow(\"%02d\".format(index),\n//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get(\"sea_water_temperature\").toString(),\n//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get(\"sea_water_speed\").toString(),\n//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get(\"sea_water_to_direction\").toString()) }\n//\n//    val column1Weight = .2f\n//    val column2Weight = .3f\n//    val column3Weight = .25f\n//    val column4Weight = .25f\n//\n//    val first = \"00-06\"\n//    val second = \"06-12\"\n//    val third = \"12-18\"\n//    val fourth = \"18-24\"\n//    val height = when (expanded) {\n//        true -> 600\n//        false -> 300\n//    }\n//\n//    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n//    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n//    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n//    Card(\n//        Modifier\n//            .background(Color.White)\n//            .height(height.dp)\n//            .clickable { expanded = !expanded },\n//        elevation = CardDefaults.cardElevation(\n//            defaultElevation = 12.dp\n//        )){\n//        if(isLoading){\n//            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){\n//                CircularProgressIndicator()\n//            }\n//        } else {\n//            Column {\n//                // Sticky header part outside the LazyColumn\n//                Row(\n//                    Modifier\n//                        .fillMaxWidth()\n//                        .padding(8.dp),\n//                    horizontalArrangement = Arrangement.SpaceBetween\n//                ) {\n//                    TableCell(\n//                        text = \"Tid\",\n//                        weight = column1Weight,\n//                        alignment = TextAlign.Left,\n//                        title = true\n//                    )\n//                    TableCell(text = \"Temp\", weight = column2Weight, title = true)\n//                    TableCell(text = \"Vind\", weight = column3Weight, title = true)\n//                    TableCell(\n//                        text = \"Retning\",\n//                        weight = column4Weight,\n//                        alignment = TextAlign.Right,\n//                        title = true\n//                    )\n//                }\n//                Divider(color = Color.LightGray, modifier = Modifier\n//                    .fillMaxWidth()\n//                    .height(1.dp))\n//            }\n//            LazyColumn(\n//                Modifier.padding(8.dp),\n//            ) {\n//                if(expanded){\n//                    itemsIndexed(ofRowList) { _, lf ->\n//                        Row(\n//                            Modifier.fillMaxWidth(),\n//                            horizontalArrangement = Arrangement.SpaceBetween\n//                        ) {\n//                            TableCell(\n//                                text = lf.tid,\n//                                weight = column1Weight,\n//                                alignment = TextAlign.Left\n//                            )\n//                            lf.temp?.let { TableCell(text = it, weight = column2Weight) }\n//                            lf.vind?.let { StatusCell(text = it, weight = column3Weight) }\n//                            lf.rotation?.let {\n//                                TableCellImage(text = it, weight = column4Weight)\n//                            }\n//                        }\n//                        Divider(\n//                            color = Color.LightGray,\n//                            modifier = Modifier\n//                                .height(1.dp)\n//                                .fillMaxHeight()\n//                                .fillMaxWidth()\n//                        )\n//                    }\n//                } else {\n//                    for (i in 0..3) {\n//                        item {\n//                            Row(\n//                                Modifier.fillMaxWidth(),\n//                                horizontalArrangement = Arrangement.SpaceBetween\n//                            ) {\n//                                TableCell(\n//                                    text = when (i) {\n//                                        0 -> first\n//                                        1 -> second\n//                                        2 -> third\n//                                        else -> fourth\n//                                    },\n//                                    weight = column1Weight,\n//                                    alignment = TextAlign.Left\n//                                )\n//                                ofRowList[i * 6].temp?.let {\n//                                    TableCell(\n//                                        text = it,\n//                                        weight = column2Weight\n//                                    )\n//                                }\n//                                ofRowList[i * 6].vind?.let {\n//                                    StatusCell(\n//                                        text = it,\n//                                        weight = column3Weight\n//                                    )\n//                                }\n//                                ofRowList[i * 6].rotation?.let {\n//                                    TableCellImage(text = it, weight = column4Weight)\n//                                }\n//                            }\n//                            if (i != 3) {\n//                                Divider(\n//                                    color = Color.LightGray,\n//                                    modifier = Modifier\n//                                        .height(1.dp)\n//                                        .fillMaxHeight()\n//                                        .fillMaxWidth()\n//                                )\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//    }\n//}\n\n@Composable\nfun RowScope.TableCell(\n    text: String,\n    weight: Float,\n    alignment: TextAlign = TextAlign.Center,\n    title: Boolean = false\n) {\n    Text(\n        text = text,\n        Modifier\n            .weight(weight)\n            .padding(10.dp),\n        fontWeight = if (title) FontWeight.Bold else FontWeight.Normal,\n        textAlign = alignment,\n    )\n}\n\n@Composable\nfun RowScope.TableCellImage(\n    text: String,\n    weight: Float,\n) {\n    val painter = painterResource(id = R.drawable.arrow_south)\n    Image(painter = painter, contentDescription = \"Direction\", Modifier\n        .weight(weight)\n        .padding(10.dp)\n        .rotate(text.toFloat()), alignment = Alignment.Center)\n}\n\n@Composable\nfun RowScope.StatusCell(\n    text: String,\n    weight: Float,\n    alignment: TextAlign = TextAlign.Center,\n    boolVind: Int?\n) {\n\n    val color1 = when (boolVind) {\n        0 -> Color(0xfff8deb5)\n        1 -> Color(0xFFCFE5FF)\n        else -> Color(0xFF7C82FF)\n    }\n    val textColor1 = when (boolVind) {\n        0 -> Color(0xffde7a1d)\n        1 -> Color(0xFF141414)\n        else -> Color(0xFFE9E9E9)\n    }\n\n    Text(\n        text = text,\n        Modifier\n            .weight(weight)\n            .padding(12.dp)\n            .background(color1, shape = RoundedCornerShape(50.dp)),\n        textAlign = alignment,\n        color = textColor1\n    )\n}\n\n\nfun determineSteps(diff: Float): Int {\n    return when {\n        diff in 0.1..3.0 -> 10 // This will convert 0.1 to 1 step, 0.2 to 2 steps, etc.\n//        diff in 1.1..2.0 -> ((diff * 10)-10).toInt()\n//        diff in 2.1..3.0 -> ((diff * 10)-20).toInt()\n        else -> diff.toInt()  // For values 1 and above, use the integer part as the step count\n    }\n}\n\n\n\n\n@Composable\nfun metAlerts(metAlertViewModel: MetAlertViewModel, antallVarsler : Int){\n    val metAlertState by metAlertViewModel.MAUiState.collectAsState()\n    val isPopupVisible by metAlertViewModel.isPopupVisible.collectAsState()\n    if(isPopupVisible){\n        Popup(\n            alignment = Alignment.TopCenter,\n            onDismissRequest = { metAlertViewModel.togglePopupVisibility() }, // Close popup when dismissed\n        ) {\n            Column(modifier = Modifier.fillMaxWidth()) {\n                Text(text = \"Ingen farevarsler funnet for sjøen!\")\n            }\n            LazyColumn(\n                modifier = Modifier\n                    .background(Color.Black.copy(alpha = 0.7f))\n                    .padding(16.dp)\n                    .fillMaxHeight(1f)\n                    .clickable { metAlertViewModel.togglePopupVisibility() }\n            ) {\n                items(antallVarsler){ metalertNr ->\n                    MetAlertsCard(metAlertState, metalertNr)\n                }\n            }\n            IconButton(\n                onClick = { metAlertViewModel.togglePopupVisibility() },\n                modifier = Modifier\n                    .size(30.dp)  // Set the size of the IconButton to be small\n            ) {\n                Icon(\n                    imageVector = Icons.Default.Clear,\n                    contentDescription = \"Close\",\n                    tint = Color.White\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun MetAlertsCard(metAlertState: MetAlersUiState, nr : Int) {\n    var expanded by remember { mutableStateOf (false) }\n    val inputString = (metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.title).toString()\n    val parts = inputString.split(\",\")\n    val result = parts.take(3).joinToString(\",\").trim()\n\n    val warning = painterResource(id = R.drawable.warning)\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n    val imageUri = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.resources?.firstOrNull { it.mimeType?.startsWith(\"image/png\") == true }?.uri\n    val fareStart = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.timeinterval?.interval?.get(0)\n        ?.let { formatToNorwegianTime(it) }\n    val fareSlutt = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.timeinterval?.interval?.get(1)\n        ?.let { formatToNorwegianTime(it) }\n\n    val yellowGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFF9C4), // Light yellow\n            Color(0xFFFFEB3B), // Vivid yellow\n            Color(0xFFFFD726)  // Dark yellow\n        )\n    )\n    val redGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFCDD2), // Light red\n            Color(0xFFE57373), // Medium red\n            Color(0xFFD32F2F)  // Dark red\n        )\n    )\n    val orangeGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFE0B2), // Light orange\n            Color(0xFFFFB74D), // Medium orange\n            Color(0xFFFB8C00)  // Dark orange\n        )\n    )\n    val greenGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFA5D6A7), // Light green\n            Color(0xFF66BB6A), // Medium green\n            Color(0xFF2E7D32)  // Dark green\n        )\n    )\n    val matrixColor = when(\"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.riskMatrixColor}\") {\n        \"Red\" -> redGradient\n        \"Orange\" -> orangeGradient\n        \"Yellow\" -> yellowGradient\n        else -> greenGradient // Default color\n    }\n    Card(\n        shape = RoundedCornerShape(8.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n            pressedElevation = 8.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 8.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 8.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(matrixColor)){\n            Column() {\n                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()){\n                    Image(painter = warning, contentDescription = \"Warning\", modifier = Modifier.size(40.dp), Alignment.Center)\n                    Column(modifier = Modifier\n                        .weight(1f)\n                        .padding(horizontal = 16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally) {\n                        Text(\n                            text = result,\n                            style = MaterialTheme.typography.titleMedium,\n                            modifier = Modifier.padding(12.dp),\n                            textAlign = TextAlign.Center,\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\n                            text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.riskMatrixColor}\",\n                            style = MaterialTheme.typography.bodyMedium,\n                            modifier = Modifier.padding(8.dp),\n                            textAlign = TextAlign.Center\n                        )\n                    }\n                    Image(painter = toggleIconPainter, contentDescription = \"Expand\", modifier = Modifier.size(40.dp), Alignment.CenterStart)\n                }\n                if (expanded) {\n                    Text(\n                        text = \"Anbefalinger:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.instruction}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Beskrivelse:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.description}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Konsekvenser:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.consequences}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Område:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.area}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Tidsperiode:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"Fra $fareStart \\nTil $fareSlutt\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    if(imageUri != null){\n                        AsyncImage(\n                            model = ImageRequest.Builder(LocalContext.current)\n                                .data(imageUri)\n                                .crossfade(true)\n                                .build(),\n                            contentDescription = \"Loaded Image\",\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .clickable { },\n                            contentScale = ContentScale.Crop\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nfun hentVerdiLocationForecast(locForecast: locationForecastUiState, index : Int, param: String) : Float{\n    val a = locForecast.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(param)\n    val b = a?.let { avrund(it,1) }\n    return b?.roundToInt()?.toFloat() ?: 0f\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt
+--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
++++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt	(date 1715349197947)
+@@ -124,27 +124,9 @@
+         else -> Color.Yellow
+     }
+     metAlertViewModel.getNewDataCoords(lat,lon)
+-//
+-//    val locFor by infoStederLFViewModel.lFUiState.collectAsState()
+-//    val dateTimeString = locFor.weatherData?.properties?.timeseries?.get(0)?.time
+-//    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
+-    val hour = infoStederLFViewModel.startHour
+     var selectedOption by remember { mutableStateOf("I dag") }
+ 
+     var selectedOptionSwitch by remember { mutableStateOf("Tabell") }
+-//    val offsett = when (selectedOption) {
+-//        "I dag" -> 0
+-//        "I morgen" -> when(hour){
+-//                22 -> 26
+-//                23 -> 25
+-//                else -> 24
+-//            }
+-//        else -> when(hour) {
+-//            22 -> 50
+-//            23 -> 49
+-//            else -> 48
+-//        }
+-//    }
+     val offsett = when (selectedOption) {
+         "I dag" -> 0
+         "I morgen" -> 24
+@@ -228,12 +210,12 @@
+                 item {
+                     if(selectedOptionSwitch == "Graf"){
+                         waterTempCard(
+-                            infoStederScreenViewModel = infoStederScreenViewModel,
++                            infoStederOFViewModel = infoStederOFViewModel,
+                             offsett = offsett)
+                     } else {
+                         //ExpandableWeatherCardLand2(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, dag = selectedOption)
+-
+-                        ExpandableWeatherCardLand(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, selectedOption)
++                        //ExpandableWeatherCardLand(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, selectedOption)
++                        ExpandableWeatherCardLand5(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, dag = selectedOption)
+                     }
+                 }
+                 item {
+@@ -261,16 +243,14 @@
+         }
+     }
+ }
++
+ @Composable
+-fun myButton(dag : String, selectedOption: String, onSelectedOptionChanged: (String) -> Unit){
+-    Button(onClick = {
+-        onSelectedOptionChanged(dag)
+-    },
+-        shape = RectangleShape,
+-        border = BorderStroke(1.dp, Color.White),
+-        modifier = Modifier) {
+-        Text(text = dag)
+-    }
++fun VerticalDivider() {
++    Divider(
++        modifier = Modifier
++            .fillMaxHeight()
++            .width(2.dp)
++    )
+ }
+ 
+ @Composable
+@@ -322,22 +302,6 @@
+ fun String.toCapital(): String {
+     return this.lowercase().replaceFirstChar { it.titlecase(Locale.getDefault())} }
+ 
+-@Composable
+-fun RectangleSwitch() {
+-    var isChecked by remember { mutableStateOf(false) }
+-    val buttonText = if (isChecked) "ON" else "OFF"
+-    val buttonColor = if (isChecked) Color.Green else Color.Gray
+-
+-    Button(
+-        onClick = { isChecked = !isChecked },
+-        colors = ButtonDefaults.buttonColors(), // Set the background color based on the state
+-        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp) // Customize padding
+-    ) {
+-        Text(text = buttonText, color = Color.White) // Text color is white for better contrast
+-    }
+-}
+-
+-
+ fun avrund(value: Double, precision: Int): Double {
+     val scale = 10.0.pow(precision)
+     return round(value * scale) / scale
+@@ -351,6 +315,273 @@
+         c.toFloat()
+     } else {
+         0f
++    }
++}
++
++@Composable
++fun ExpandableWeatherCardLand5(infoStederLFViewModel: InfoStederLFViewModel, nr : Int, dag : String) {
++    val lfUiState by infoStederLFViewModel.lFUiState.collectAsState()
++    infoStederLFViewModel.makeWeatherList(nr)
++    val isLoading by infoStederLFViewModel.isLoading.collectAsState()
++    var expanded by remember { mutableStateOf (false) }
++
++    if(lfUiState.weatherList.isEmpty()){
++        return
++    }
++
++    val a = lfUiState.weatherList.size
++    val res = ceil(a.toDouble() / 6).toInt()
++
++    val first = when (expanded) {
++        true -> "00"
++        else -> "00-06"
++    }
++    val second = when (expanded) {
++        true -> "01"
++        else -> "06-12"
++    }
++    val third = when (expanded) {
++        true -> "02"
++        else -> "12-18"
++    }
++    val fourth = when (expanded) {
++        true -> "03"
++        else -> "18-24"
++    }
++    val t1 = when (expanded) {
++        true -> 0
++        else -> 0
++    }
++    val t2 = when (expanded) {
++        true -> 1
++        else -> 6
++    }
++    val t3 = when (expanded) {
++        true -> 2
++        else -> 12
++    }
++    val t4 = when (expanded) {
++        true -> 3
++        else -> 18
++    }
++    val indexArray = arrayOf(t1, t2, t3, t4)
++    val column1Weight = .2f
++    val column2Weight = .3f
++    val column3Weight = .25f
++    val column4Weight = .25f
++
++    val expandMoreIcon = painterResource(id = R.drawable.expand_more)
++    val expandLessIcon = painterResource(id = R.drawable.expand_less)
++    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
++
++
++    Card(
++        shape = RoundedCornerShape(5.dp),
++        elevation = CardDefaults.cardElevation(
++            defaultElevation = 20.dp,
++            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed
++            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused
++            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over
++        ),
++        modifier = Modifier
++            .fillMaxWidth()
++            .padding(10.dp)
++            .clickable(
++                onClick = { expanded = !expanded }
++            ),
++    ) {
++        Box(modifier = Modifier
++            .fillMaxSize()
++        ){
++            if(isLoading){
++                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
++                    CircularProgressIndicator(modifier = Modifier)
++                }
++            } else {
++                Column() {
++                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween){
++                        Box(contentAlignment = Alignment.CenterStart){
++                            Text(
++                                text = dag,
++                                style = MaterialTheme.typography.titleLarge,
++                                fontWeight = FontWeight.Black,
++                                textAlign = TextAlign.Start)
++                        }
++                        Box(contentAlignment = Alignment.CenterEnd){
++                            Text(
++                                text = "På land",
++                                style = MaterialTheme.typography.titleLarge,
++                                fontWeight = FontWeight.Black
++                            )
++                        }
++                    }
++                    Row(
++                        Modifier
++                            .fillMaxWidth()
++                            .padding(8.dp),
++                        horizontalArrangement = Arrangement.SpaceBetween
++                    ) {
++                        TableCell(
++                            text = "Tid",
++                            weight = column1Weight,
++                            alignment = TextAlign.Left,
++                            title = true
++                        )
++                        TableCell(text = "Temp", weight = column2Weight, title = true)
++                        TableCell(text = "Vind", weight = column3Weight, title = true)
++                        TableCell(
++                            text = "Retning",
++                            weight = column4Weight,
++                            alignment = TextAlign.Right,
++                            title = true
++                        )
++                    }
++                    Divider(color = Color.LightGray, modifier = Modifier
++                        .fillMaxWidth()
++                        .height(1.dp))
++                    if(a < 24){
++                        var teller = 0
++                        for (i in 4-res..<4) {
++                            Row(
++                                Modifier.fillMaxWidth(),
++                                horizontalArrangement = Arrangement.SpaceBetween
++                            ){
++                                TableCell(
++                                    text = when (i) {
++                                        0 -> when (expanded) {
++                                            true -> "%02d".format(teller+24-a)
++                                            else -> first
++                                        }
++                                        1 -> when (expanded) {
++                                            true -> "%02d".format(teller+24-a)
++                                            else -> second
++                                        }
++                                        2 -> when (expanded) {
++                                            true -> "%02d".format(teller+24-a)
++                                            else -> third
++                                        }
++                                        else -> when (expanded) {
++                                            true -> "%02d".format(teller+24-a)
++                                            else -> fourth
++                                        }
++                                    },
++                                    weight = column1Weight,
++                                    alignment = TextAlign.Left
++                                )
++                                lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
++                                lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
++                                lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_from_direction").toString().let {
++                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
++                                }
++                            }
++                            Divider(
++                                color = Color.LightGray,
++                                modifier = Modifier
++                                    .height(1.dp)
++                                    .fillMaxHeight()
++                                    .fillMaxWidth()
++                            )
++                            teller ++
++                        }
++                        if (expanded) {
++                            repeat(a - res) { index ->
++                                Row(
++                                    Modifier.fillMaxWidth(),
++                                    horizontalArrangement = Arrangement.SpaceBetween
++                                ){
++                                    TableCell(
++                                        text = "%02d".format(index+24+res-a),
++                                        weight = column1Weight,
++                                        alignment = TextAlign.Left
++                                    )
++                                    lfUiState.weatherList[index+res]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
++                                    lfUiState.weatherList[index+res]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
++                                    lfUiState.weatherList[index+res]?.data?.instant?.details?.get("wind_from_direction").toString().let {
++                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
++                                    }
++                                }
++                                Divider(
++                                    color = Color.LightGray,
++                                    modifier = Modifier
++                                        .height(1.dp)
++                                        .fillMaxHeight()
++                                        .fillMaxWidth()
++                                )
++                            }
++                        }
++                    } else {
++                        for (i in 0..3) {
++                            Row(
++                                Modifier.fillMaxWidth(),
++                                horizontalArrangement = Arrangement.SpaceBetween
++                            ){
++                                TableCell(
++                                    text = when (i) {
++                                        0 -> first
++                                        1 -> second
++                                        2 -> third
++                                        else -> fourth
++                                    },
++                                    weight = column1Weight,
++                                    alignment = TextAlign.Left
++                                )
++                                lfUiState.weatherList[indexArray[i]]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
++                                lfUiState.weatherList[indexArray[i]]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
++                                lfUiState.weatherList[indexArray[i]]?.data?.instant?.details?.get("wind_from_direction").toString().let {
++                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
++                                }
++                            }
++                            Divider(
++                                color = Color.LightGray,
++                                modifier = Modifier
++                                    .height(1.dp)
++                                    .fillMaxHeight()
++                                    .fillMaxWidth()
++                            )
++                        }
++                        if (expanded) {
++                            repeat(20) { index ->
++                                Row(
++                                    Modifier.fillMaxWidth(),
++                                    horizontalArrangement = Arrangement.SpaceBetween
++                                ){
++                                    TableCell(
++                                        text = "%02d".format(index+4),
++                                        weight = column1Weight,
++                                        alignment = TextAlign.Left
++                                    )
++                                    lfUiState.weatherList[index+4]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
++                                    lfUiState.weatherList[index+4]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
++                                    lfUiState.weatherList[index+4]?.data?.instant?.details?.get("wind_from_direction").toString().let {
++                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
++                                    }
++                                }
++                                Divider(
++                                    color = Color.LightGray,
++                                    modifier = Modifier
++                                        .height(1.dp)
++                                        .fillMaxHeight()
++                                        .fillMaxWidth()
++                                )
++                            }
++                        }
++                    }
++                    Row(
++                        verticalAlignment = Alignment.CenterVertically,
++                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally
++                        modifier = Modifier.fillMaxWidth()
++                    ) {
++                        Text(text = "Time for time")
++                        Image(
++                            painter = toggleIconPainter,
++                            contentDescription = "Expand",
++                            modifier = Modifier.size(30.dp),
++                            Alignment.CenterStart
++                        )
++                    }
++                }
++            }
++        }
+     }
+ }
+ 
+@@ -454,11 +685,22 @@
+                 }
+             } else {
+                 Column() {
+-                    Text(
+-                        text = dag,
+-                        style = MaterialTheme.typography.titleLarge,
+-                        fontWeight = FontWeight.Black
+-                    )
++                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween){
++                        Box(contentAlignment = Alignment.CenterStart){
++                            Text(
++                                text = dag,
++                                style = MaterialTheme.typography.titleLarge,
++                                fontWeight = FontWeight.Black,
++                                textAlign = TextAlign.Start)
++                        }
++                        Box(contentAlignment = Alignment.CenterEnd){
++                            Text(
++                                text = "På land",
++                                style = MaterialTheme.typography.titleLarge,
++                                fontWeight = FontWeight.Black
++                            )
++                        }
++                    }
+                     Row(
+                         Modifier
+                             .fillMaxWidth()
+@@ -531,7 +773,7 @@
+                                 lfRowList[indexArray[teller]].temp?.let { TableCell(text = it, weight = column2Weight) }
+                                 lfRowList[indexArray[teller]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                                 lfRowList[indexArray[teller]].rotation?.let {
+-                                    TableCellImage(text = it, weight = column4Weight)
++                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
+                                 }
+                             }
+                             Divider(
+@@ -557,7 +799,7 @@
+                                     lfRowList[index+res].temp?.let { TableCell(text = it, weight = column2Weight) }
+                                     lfRowList[index+res].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                                     lfRowList[index+res].rotation?.let {
+-                                        TableCellImage(text = it, weight = column4Weight)
++                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
+                                     }
+                                 }
+                                 Divider(
+@@ -588,7 +830,7 @@
+                                 lfRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }
+                                 lfRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                                 lfRowList[indexArray[i]].rotation?.let {
+-                                    TableCellImage(text = it, weight = column4Weight)
++                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
+                                 }
+                             }
+                             Divider(
+@@ -613,7 +855,7 @@
+                                     lfRowList[index+4].temp?.let { TableCell(text = it, weight = column2Weight) }
+                                     lfRowList[index+4].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                                     lfRowList[index+4].rotation?.let {
+-                                        TableCellImage(text = it, weight = column4Weight)
++                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
+                                     }
+                                 }
+                                 Divider(
+@@ -647,15 +889,17 @@
+ 
+ @Composable
+ fun ExpandableWeatherCard(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {
+-    val oFUiState by infoStederOFViewModel.oFUiState.collectAsState()
++    val ofUiState by infoStederOFViewModel.oFUiState.collectAsState()
++    infoStederOFViewModel.makeWeatherList(nr)
+     val isLoading by infoStederOFViewModel.isLoading.collectAsState()
+     var expanded by remember { mutableStateOf (false) }
+ 
+-    if(oFUiState.oceanForecastData?.properties?.timeseries?.size == 0){
++    if(ofUiState.oceanWeatherList.isEmpty()){
+         return
+     }
+-    val dateTimeString = oFUiState.oceanForecastData?.properties?.timeseries?.get(0)?.time
+-    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
++    val a = ofUiState.oceanWeatherList.size
++    val res = ceil(a.toDouble()/6).toInt()
++
+ 
+     val first = when (expanded) {
+         true -> "00"
+@@ -699,31 +943,6 @@
+     val expandLessIcon = painterResource(id = R.drawable.expand_less)
+     val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
+ 
+-    val ofRowList = when (nr) {
+-        0 -> if(hour == 22){
+-            (0..23).map { index -> LfRow("%02d".format(index),
+-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("sea_water_temperature").toString(),
+-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("sea_water_speed").toString(),
+-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
+-        } else if (hour == 23){
+-            (0..23).map { index -> LfRow("%02d".format(index),
+-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("sea_water_temperature").toString(),
+-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("sea_water_speed").toString(),
+-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
+-        }
+-        else {
+-            (0..23-hour).map { index -> LfRow("%02d".format(hour+index),
+-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("sea_water_temperature").toString(),
+-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("sea_water_speed").toString(),
+-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
+-        }
+-        else -> (0..23).map { index -> LfRow("%02d".format(index),
+-            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get("sea_water_temperature").toString(),
+-            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get("sea_water_speed").toString(),
+-            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
+-    }
+-    val a = ofRowList.size
+-    val res = ceil(a.toDouble() / 6).toInt()
+     Card(
+         shape = RoundedCornerShape(5.dp),
+         elevation = CardDefaults.cardElevation(
+@@ -737,7 +956,7 @@
+             .padding(10.dp)
+             .clickable(
+                 onClick = { expanded = !expanded }
+-            ),
++            )
+     ) {
+         Box(modifier = Modifier
+             .fillMaxSize()
+@@ -748,12 +967,22 @@
+                 }
+             } else {
+                 Column() {
+-                    Text(
+-                        text = dag,
+-                        style = MaterialTheme.typography.titleLarge,
+-                        fontWeight = FontWeight.Black,
+-                        textAlign = TextAlign.Start
+-                    )
++                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween){
++                        Box(contentAlignment = Alignment.CenterStart){
++                            Text(
++                                text = dag,
++                                style = MaterialTheme.typography.titleLarge,
++                                fontWeight = FontWeight.Black,
++                                textAlign = TextAlign.Start)
++                        }
++                        Box(contentAlignment = Alignment.CenterEnd){
++                            Text(
++                                text = "På havet",
++                                style = MaterialTheme.typography.titleLarge,
++                                fontWeight = FontWeight.Black
++                            )
++                        }
++                    }
+                     Row(
+                         Modifier
+                             .fillMaxWidth()
+@@ -778,7 +1007,7 @@
+                     Divider(color = Color.LightGray, modifier = Modifier
+                         .fillMaxWidth()
+                         .height(1.dp))
+-                    if(nr == 0){
++                    if(a < 24){
+                         var teller = 0
+                         for (i in 4-res..<4) {
+                             Row(
+@@ -788,45 +1017,29 @@
+                                 TableCell(
+                                     text = when (i) {
+                                         0 -> when (expanded) {
+-                                            true -> when (hour) {
+-                                                22 -> "%02d".format(teller)
+-                                                23 -> "%02d".format(teller+1)
+-                                                else -> "%02d".format(teller+hour)
+-                                            }
++                                            true -> "%02d".format(teller+24-a)
+                                             else -> first
+                                         }
+                                         1 -> when (expanded) {
+-                                            true -> when (hour) {
+-                                                22 -> "%02d".format(teller)
+-                                                23 -> "%02d".format(teller+1)
+-                                                else -> "%02d".format(teller+hour)
+-                                            }
++                                            true -> "%02d".format(teller+24-a)
+                                             else -> second
+                                         }
+                                         2 -> when (expanded) {
+-                                            true -> when (hour) {
+-                                                22 -> "%02d".format(teller)
+-                                                23 -> "%02d".format(teller+1)
+-                                                else -> "%02d".format(teller+hour)
+-                                            }
++                                            true -> "%02d".format(teller+24-a)
+                                             else -> third
+                                         }
+                                         else -> when (expanded) {
+-                                            true -> when (hour) {
+-                                                22 -> "%02d".format(teller)
+-                                                23 -> "%02d".format(teller+1)
+-                                                else -> "%02d".format(teller+hour)
+-                                            }
++                                            true -> "%02d".format(teller+24-a)
+                                             else -> fourth
+                                         }
+                                     },
+                                     weight = column1Weight,
+                                     alignment = TextAlign.Left
+                                 )
+-                                ofRowList[indexArray[teller]].temp?.let { TableCell(text = it, weight = column2Weight) }
+-                                ofRowList[indexArray[teller]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }
+-                                ofRowList[indexArray[teller]].rotation?.let {
+-                                    TableCellImage(text = it, weight = column4Weight)
++                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get("sea_water_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
++                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get("sea_water_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }
++                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get("sea_water_to_direction").toString().let {
++                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)
+                                 }
+                             }
+                             Divider(
+@@ -839,20 +1052,20 @@
+                             teller ++
+                         }
+                         if (expanded) {
+-                            repeat(ofRowList.size - res) { index ->
++                            repeat(a - res) { index ->
+                                 Row(
+                                     Modifier.fillMaxWidth(),
+                                     horizontalArrangement = Arrangement.SpaceBetween
+                                 ){
+                                     TableCell(
+-                                        text = ofRowList[index+res].tid,
++                                        text = "%02d".format(index+24+res-a),
+                                         weight = column1Weight,
+                                         alignment = TextAlign.Left
+                                     )
+-                                    ofRowList[index+res].temp?.let { TableCell(text = it, weight = column2Weight) }
+-                                    ofRowList[index+res].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }
+-                                    ofRowList[index+res].rotation?.let {
+-                                        TableCellImage(text = it, weight = column4Weight)
++                                    ofUiState.oceanWeatherList[index+res]?.data?.instant?.details?.get("sea_water_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
++                                    ofUiState.oceanWeatherList[index+res]?.data?.instant?.details?.get("sea_water_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }
++                                    ofUiState.oceanWeatherList[index+res]?.data?.instant?.details?.get("sea_water_to_direction").toString().let {
++                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)
+                                     }
+                                 }
+                                 Divider(
+@@ -880,10 +1093,10 @@
+                                     weight = column1Weight,
+                                     alignment = TextAlign.Left
+                                 )
+-                                ofRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }
+-                                ofRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }
+-                                ofRowList[indexArray[i]].rotation?.let {
+-                                    TableCellImage(text = it, weight = column4Weight)
++                                ofUiState.oceanWeatherList[indexArray[i]]?.data?.instant?.details?.get("sea_water_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
++                                ofUiState.oceanWeatherList[indexArray[i]]?.data?.instant?.details?.get("sea_water_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }
++                                ofUiState.oceanWeatherList[indexArray[i]]?.data?.instant?.details?.get("sea_water_to_direction").toString().let {
++                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)
+                                 }
+                             }
+                             Divider(
+@@ -901,14 +1114,14 @@
+                                     horizontalArrangement = Arrangement.SpaceBetween
+                                 ){
+                                     TableCell(
+-                                        text = ofRowList[index+4].tid,
++                                        text = "%02d".format(index+4),
+                                         weight = column1Weight,
+                                         alignment = TextAlign.Left
+                                     )
+-                                    ofRowList[index+4].temp?.let { TableCell(text = it, weight = column2Weight) }
+-                                    ofRowList[index+4].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }
+-                                    ofRowList[index+4].rotation?.let {
+-                                        TableCellImage(text = it, weight = column4Weight)
++                                    ofUiState.oceanWeatherList[index+4]?.data?.instant?.details?.get("sea_water_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
++                                    ofUiState.oceanWeatherList[index+4]?.data?.instant?.details?.get("sea_water_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }
++                                    ofUiState.oceanWeatherList[index+4]?.data?.instant?.details?.get("sea_water_to_direction").toString().let {
++                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)
+                                     }
+                                 }
+                                 Divider(
+@@ -940,156 +1153,6 @@
+     }
+ }
+ 
+-//@Composable
+-//fun ExpandableWeatherCardSea2(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {
+-//    val oceanForecastUiState by infoStederOFViewModel.oFUiState.collectAsState()
+-//    val isLoading by infoStederOFViewModel.isLoading.collectAsState()
+-//    var expanded by remember { mutableStateOf (false) }
+-//
+-////    val lfRowList = when (nr) {
+-////        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"air_temperature")) }
+-////        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "air_temperature")) }
+-////    }
+-//    val ofRowList =  (0..23).map { index -> LfRow("%02d".format(index),
+-//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_temperature").toString(),
+-//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_speed").toString(),
+-//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
+-//
+-//    val column1Weight = .2f
+-//    val column2Weight = .3f
+-//    val column3Weight = .25f
+-//    val column4Weight = .25f
+-//
+-//    val first = "00-06"
+-//    val second = "06-12"
+-//    val third = "12-18"
+-//    val fourth = "18-24"
+-//    val height = when (expanded) {
+-//        true -> 600
+-//        false -> 300
+-//    }
+-//
+-//    val expandMoreIcon = painterResource(id = R.drawable.expand_more)
+-//    val expandLessIcon = painterResource(id = R.drawable.expand_less)
+-//    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
+-//    Card(
+-//        Modifier
+-//            .background(Color.White)
+-//            .height(height.dp)
+-//            .clickable { expanded = !expanded },
+-//        elevation = CardDefaults.cardElevation(
+-//            defaultElevation = 12.dp
+-//        )){
+-//        if(isLoading){
+-//            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){
+-//                CircularProgressIndicator()
+-//            }
+-//        } else {
+-//            Column {
+-//                // Sticky header part outside the LazyColumn
+-//                Row(
+-//                    Modifier
+-//                        .fillMaxWidth()
+-//                        .padding(8.dp),
+-//                    horizontalArrangement = Arrangement.SpaceBetween
+-//                ) {
+-//                    TableCell(
+-//                        text = "Tid",
+-//                        weight = column1Weight,
+-//                        alignment = TextAlign.Left,
+-//                        title = true
+-//                    )
+-//                    TableCell(text = "Temp", weight = column2Weight, title = true)
+-//                    TableCell(text = "Vind", weight = column3Weight, title = true)
+-//                    TableCell(
+-//                        text = "Retning",
+-//                        weight = column4Weight,
+-//                        alignment = TextAlign.Right,
+-//                        title = true
+-//                    )
+-//                }
+-//                Divider(color = Color.LightGray, modifier = Modifier
+-//                    .fillMaxWidth()
+-//                    .height(1.dp))
+-//            }
+-//            LazyColumn(
+-//                Modifier.padding(8.dp),
+-//            ) {
+-//                if(expanded){
+-//                    itemsIndexed(ofRowList) { _, lf ->
+-//                        Row(
+-//                            Modifier.fillMaxWidth(),
+-//                            horizontalArrangement = Arrangement.SpaceBetween
+-//                        ) {
+-//                            TableCell(
+-//                                text = lf.tid,
+-//                                weight = column1Weight,
+-//                                alignment = TextAlign.Left
+-//                            )
+-//                            lf.temp?.let { TableCell(text = it, weight = column2Weight) }
+-//                            lf.vind?.let { StatusCell(text = it, weight = column3Weight) }
+-//                            lf.rotation?.let {
+-//                                TableCellImage(text = it, weight = column4Weight)
+-//                            }
+-//                        }
+-//                        Divider(
+-//                            color = Color.LightGray,
+-//                            modifier = Modifier
+-//                                .height(1.dp)
+-//                                .fillMaxHeight()
+-//                                .fillMaxWidth()
+-//                        )
+-//                    }
+-//                } else {
+-//                    for (i in 0..3) {
+-//                        item {
+-//                            Row(
+-//                                Modifier.fillMaxWidth(),
+-//                                horizontalArrangement = Arrangement.SpaceBetween
+-//                            ) {
+-//                                TableCell(
+-//                                    text = when (i) {
+-//                                        0 -> first
+-//                                        1 -> second
+-//                                        2 -> third
+-//                                        else -> fourth
+-//                                    },
+-//                                    weight = column1Weight,
+-//                                    alignment = TextAlign.Left
+-//                                )
+-//                                ofRowList[i * 6].temp?.let {
+-//                                    TableCell(
+-//                                        text = it,
+-//                                        weight = column2Weight
+-//                                    )
+-//                                }
+-//                                ofRowList[i * 6].vind?.let {
+-//                                    StatusCell(
+-//                                        text = it,
+-//                                        weight = column3Weight
+-//                                    )
+-//                                }
+-//                                ofRowList[i * 6].rotation?.let {
+-//                                    TableCellImage(text = it, weight = column4Weight)
+-//                                }
+-//                            }
+-//                            if (i != 3) {
+-//                                Divider(
+-//                                    color = Color.LightGray,
+-//                                    modifier = Modifier
+-//                                        .height(1.dp)
+-//                                        .fillMaxHeight()
+-//                                        .fillMaxWidth()
+-//                                )
+-//                            }
+-//                        }
+-//                    }
+-//                }
+-//            }
+-//        }
+-//    }
+-//}
+-
+ @Composable
+ fun RowScope.TableCell(
+     text: String,
+@@ -1111,8 +1174,9 @@
+ fun RowScope.TableCellImage(
+     text: String,
+     weight: Float,
++    imageResId: Int
+ ) {
+-    val painter = painterResource(id = R.drawable.arrow_south)
++    val painter = painterResource(id = imageResId)
+     Image(painter = painter, contentDescription = "Direction", Modifier
+         .weight(weight)
+         .padding(10.dp)
+@@ -1126,18 +1190,14 @@
+     alignment: TextAlign = TextAlign.Center,
+     boolVind: Int?
+ ) {
+-
+     val color1 = when (boolVind) {
+-        0 -> Color(0xfff8deb5)
+-        1 -> Color(0xFFCFE5FF)
+-        else -> Color(0xFF7C82FF)
++        1 -> Color(0xFFF8F7F9)
++        else -> Color(0xFF446097)
+     }
+     val textColor1 = when (boolVind) {
+-        0 -> Color(0xffde7a1d)
+         1 -> Color(0xFF141414)
+         else -> Color(0xFFE9E9E9)
+     }
+-
+     Text(
+         text = text,
+         Modifier
+@@ -1368,8 +1428,3 @@
+ }
+ 
+ 
+-fun hentVerdiLocationForecast(locForecast: locationForecastUiState, index : Int, param: String) : Float{
+-    val a = locForecast.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(param)
+-    val b = a?.let { avrund(it,1) }
+-    return b?.roundToInt()?.toFloat() ?: 0f
+-}
+\ No newline at end of file
Index: app/src/main/res/drawable-anydpi/book.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable-anydpi/book.xml b/app/src/main/res/drawable-anydpi/book.xml
new file mode 100644
--- /dev/null	(date 1715443589427)
+++ b/app/src/main/res/drawable-anydpi/book.xml	(date 1715443589427)
@@ -0,0 +1,12 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="960"
+    android:viewportHeight="960"
+    android:tint="#333333"
+    android:alpha="0.6"
+    android:autoMirrored="true">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M560,396L560,328Q593,314 627.5,307Q662,300 700,300Q726,300 751,304Q776,308 800,314L800,378Q776,369 751.5,364.5Q727,360 700,360Q662,360 627,369.5Q592,379 560,396ZM560,616L560,548Q593,534 627.5,527Q662,520 700,520Q726,520 751,524Q776,528 800,534L800,598Q776,589 751.5,584.5Q727,580 700,580Q662,580 627,589Q592,598 560,616ZM560,506L560,438Q593,424 627.5,417Q662,410 700,410Q726,410 751,414Q776,418 800,424L800,488Q776,479 751.5,474.5Q727,470 700,470Q662,470 627,479.5Q592,489 560,506ZM260,640Q307,640 351.5,650.5Q396,661 440,682L440,288Q399,264 353,252Q307,240 260,240Q224,240 188.5,247Q153,254 120,268Q120,268 120,268Q120,268 120,268L120,664Q120,664 120,664Q120,664 120,664Q155,652 189.5,646Q224,640 260,640ZM520,682Q564,661 608.5,650.5Q653,640 700,640Q736,640 770.5,646Q805,652 840,664Q840,664 840,664Q840,664 840,664L840,268Q840,268 840,268Q840,268 840,268Q807,254 771.5,247Q736,240 700,240Q653,240 607,252Q561,264 520,288L520,682ZM480,800Q432,762 376,741Q320,720 260,720Q218,720 177.5,731Q137,742 100,762Q79,773 59.5,761Q40,749 40,726L40,244Q40,233 45.5,223Q51,213 62,208Q108,184 158,172Q208,160 260,160Q318,160 373.5,175Q429,190 480,220Q531,190 586.5,175Q642,160 700,160Q752,160 802,172Q852,184 898,208Q909,213 914.5,223Q920,233 920,244L920,726Q920,749 900.5,761Q881,773 860,762Q823,742 782.5,731Q742,720 700,720Q640,720 584,741Q528,762 480,800ZM280,466Q280,466 280,466Q280,466 280,466L280,466Q280,466 280,466Q280,466 280,466Q280,466 280,466Q280,466 280,466Q280,466 280,466Q280,466 280,466L280,466Q280,466 280,466Q280,466 280,466Q280,466 280,466Q280,466 280,466Z"/>
+</vector>
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.InfoScreen\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.foundation.lazy.grid.items\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults.topAppBarColors\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavController\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport no.uio.ifi.in2000.prosjekt.Model.InfoObjects\nimport no.uio.ifi.in2000.prosjekt.R\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InfoScreen(\n    navController: NavController,\n    infoList : InfoUIState = InfoUIState()\n) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = topAppBarColors(\n                    containerColor = Color(0xFFBEDDF5)\n                ),\n                navigationIcon = {\n                    IconButton(\n                        onClick = { navController.popBackStack() }\n                    ) {\n                        Icon(\n                            imageVector = Icons.Filled.ArrowBack,\n                            contentDescription = \"Back\",\n                            tint = Color.Black\n                        )\n                    }\n                },\n                title = { Text(text = \"Lær!\") })\n        },\n\n        ) { innerPadding ->\n\n        Column(\n            modifier = Modifier\n                .background(\n                    Color(0xFF1F3468)\n\n                )\n                .padding(top = 65.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        )\n        {\n            val img = painterResource(id = R.drawable.learn)\n            Image(\n                painter = img,\n                contentDescription = \"learningHat\",\n                colorFilter = ColorFilter.tint((Color(0xFFBEDDF5)\n                        )\n                ),\n                modifier = Modifier.size(100.dp)\n            )\n            LazyVerticalGrid(\n                modifier = Modifier.fillMaxSize(),\n                columns = GridCells.Fixed(1), // Use 2 columns instead of 4\n                horizontalArrangement = Arrangement.spacedBy(16.dp), // Space between columns\n                verticalArrangement = Arrangement.spacedBy(16.dp), // Space between rows\n                contentPadding = PaddingValues(16.dp), // Padding around the grid\n                content = {\n                    items(infoList.listOfInfo) { infodata ->\n                        InfoCard(infodata, infodata.id, navController)\n                    }\n                }\n            )\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun InfoCard(info: InfoObjects, id: String, navController: NavController) {\n    Card(\n        modifier = Modifier\n            //.fillMaxWidth()\n            .padding(10.dp), // Add padding to create space around the card\n        onClick = {\n            navController.navigate(\"InfoCard/$id\")\n        }\n    ) {\n\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .size(75.dp)\n                .background(Color(0xFFBEDDF5))\n\n\n        )\n        {\n            Text(\n                text = info.name,\n                fontSize = 12.sp,\n                color = Color.Black,\n\n                    fontFamily = FontFamily.SansSerif,\n                    fontWeight = FontWeight.Bold\n                ,\n                modifier = Modifier\n                    .padding(8.dp)\n                    .align(Alignment.CenterHorizontally) // Padding inside the column for the text\n            )\n            val painter = painterResource(id = info.icon)\n            Image(modifier = Modifier\n                .align(Alignment.CenterHorizontally)\n                .size(50.dp), painter = painter, contentDescription = \"Icon\")\n\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/InfoScreen/InfoScreen.kt	(date 1715443589422)
@@ -47,7 +47,7 @@
         topBar = {
             TopAppBar(
                 colors = topAppBarColors(
-                    containerColor = Color(0xFFBEDDF5)
+                    containerColor = Color(0xFF171729)
                 ),
                 navigationIcon = {
                     IconButton(
@@ -56,11 +56,26 @@
                         Icon(
                             imageVector = Icons.Filled.ArrowBack,
                             contentDescription = "Back",
-                            tint = Color.Black
+                            tint = Color(0xFFBEDDF5)
                         )
                     }
                 },
-                title = { Text(text = "Lær!") })
+                title = {
+                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {
+                        Text(text = "Lær om havet", color = Color(0xFFBEDDF5))
+                        }},
+                actions = {
+                    IconButton(
+                        onClick = { navController.popBackStack() }
+                    ) {
+                        Icon(
+                            imageVector = Icons.Filled.ArrowBack,
+                            contentDescription = "Back",
+                            tint = Color.Transparent
+                        )
+                    }
+                }
+            )
         },
 
         ) { innerPadding ->
@@ -68,7 +83,7 @@
         Column(
             modifier = Modifier
                 .background(
-                    Color(0xFF1F3468)
+                    Color(0xFF171729)
 
                 )
                 .padding(top = 65.dp),
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport no.uio.ifi.in2000.prosjekt.Data.WeatherForecast.LocationForecastRepository\nimport no.uio.ifi.in2000.prosjekt.Model.WeatherData\n\ndata class locationForecastUiState(\n    val weatherData: WeatherData? = WeatherData()\n)\nclass InfoStederLFViewModel(coords: String): ViewModel() {\n    private val _isLoading = MutableStateFlow(false)\n    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()\n    val liste = coords.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    private val locationForecastRepo = LocationForecastRepository()\n\n    private val _lFUiState = MutableStateFlow(locationForecastUiState())\n    val lFUiState: StateFlow<locationForecastUiState> = _lFUiState.asStateFlow()\n    var startHour = 0\n    init {\n        getNewData(lat,lon)\n    }\n\n    fun getNewData(lat : String, lon : String){\n        toggleLoading()\n        viewModelScope.launch {\n            _lFUiState.update {\n                it.copy(\n                    weatherData = locationForecastRepo.getLocationForecast(lat,lon)\n                )\n            }\n            setStartHour()\n            toggleLoading()\n        }\n    }\n    fun toggleLoading() {\n        _isLoading.value = !_isLoading.value\n    }\n\n    fun setStartHour(){\n        startHour = (_lFUiState.value.weatherData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederLFViewModel.kt	(date 1715443589426)
@@ -1,17 +1,36 @@
 package no.uio.ifi.in2000.prosjekt.ui.infoSteder
 
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.ui.graphics.Brush
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.unit.dp
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
+import co.yml.charts.axis.AxisData
+import co.yml.charts.common.model.Point
+import co.yml.charts.ui.linechart.model.GridLines
+import co.yml.charts.ui.linechart.model.IntersectionPoint
+import co.yml.charts.ui.linechart.model.Line
+import co.yml.charts.ui.linechart.model.LineChartData
+import co.yml.charts.ui.linechart.model.LinePlotData
+import co.yml.charts.ui.linechart.model.LineStyle
+import co.yml.charts.ui.linechart.model.LineType
+import co.yml.charts.ui.linechart.model.SelectionHighlightPoint
+import co.yml.charts.ui.linechart.model.SelectionHighlightPopUp
+import co.yml.charts.ui.linechart.model.ShadowUnderLine
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.asStateFlow
 import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
 import no.uio.ifi.in2000.prosjekt.Data.WeatherForecast.LocationForecastRepository
+import no.uio.ifi.in2000.prosjekt.Model.OceanTimeSeries
+import no.uio.ifi.in2000.prosjekt.Model.TimeSeries
 import no.uio.ifi.in2000.prosjekt.Model.WeatherData
 
 data class locationForecastUiState(
-    val weatherData: WeatherData? = WeatherData()
+    val weatherData: WeatherData? = WeatherData(),
+    var weatherList: List<TimeSeries?> = emptyList()
 )
 class InfoStederLFViewModel(coords: String): ViewModel() {
     private val _isLoading = MutableStateFlow(false)
@@ -23,28 +42,80 @@
 
     private val _lFUiState = MutableStateFlow(locationForecastUiState())
     val lFUiState: StateFlow<locationForecastUiState> = _lFUiState.asStateFlow()
+
     var startHour = 0
+
     init {
-        getNewData(lat,lon)
+        getNewData(lat, lon, 0)
     }
 
-    fun getNewData(lat : String, lon : String){
+    private fun getNewData(lat: String, lon: String, offset: Int) {
         toggleLoading()
         viewModelScope.launch {
             _lFUiState.update {
                 it.copy(
-                    weatherData = locationForecastRepo.getLocationForecast(lat,lon)
+                    weatherData = locationForecastRepo.getLocationForecast(lat, lon)
                 )
             }
             setStartHour()
+            makeWeatherList(offset)
             toggleLoading()
         }
     }
+
     fun toggleLoading() {
         _isLoading.value = !_isLoading.value
     }
 
-    fun setStartHour(){
-        startHour = (_lFUiState.value.weatherData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)?.toIntOrNull() ?: 0
+    fun setStartHour() {
+        if(_lFUiState.value.weatherData?.properties?.timeseries?.isEmpty() == true){
+            return
+        }
+        startHour =
+            (_lFUiState.value.weatherData?.properties?.timeseries?.get(0)?.time)?.substring(11, 13)
+                ?.toIntOrNull() ?: 0
+    }
+
+    fun makeWeatherList(offset: Int){
+        if(_lFUiState.value.weatherData?.properties?.timeseries?.isEmpty() == true){
+            return
+        }
+        val list = when (offset) {
+            0 -> when(startHour) {
+                22 -> (0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+2) }
+                23 -> (0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+1) }
+                else -> (0..23-startHour).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index) }
+            }
+            else -> when(_lFUiState.value.weatherList.size){
+                24 -> (0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+offset) }
+                else -> (0..23).map { index -> _lFUiState.value.weatherData?.properties?.timeseries?.get(index+offset-startHour) }
+            }
+        }
+        println(startHour.toString() + " " + offset.toString())
+        _lFUiState.value.weatherList = list
+    }
+
+    fun linechartMaker(offset: Int, variable: String): List<Point> {
+        if(_lFUiState.value.weatherData?.properties?.timeseries?.isEmpty() == true){
+            val pointData = (0..23).map { index -> Point(index.toFloat(), 0.0f) }
+            return pointData
+        }
+        val pointData = when (offset) {
+            0 -> (startHour..23).map { index ->
+                val temperature = (_lFUiState.value.weatherData?.properties?.timeseries
+                    ?.get(index - startHour)?.data?.instant?.details
+                    ?.get(variable)?:0).toFloat()
+
+                Point(index.toFloat(), temperature ?: 0.0f) // Change is here
+            }
+            else -> (0..23).map { index ->
+                val temperature = (_lFUiState.value.weatherData?.properties?.timeseries
+                    ?.get(index + offset - startHour)?.data?.instant?.details
+                    ?.get(variable)?:0).toFloat()
+
+                Point(index.toFloat(), temperature ?: 0.0f) // Change is here
+            }
+        }
+        return pointData
     }
 }
\ No newline at end of file
Index: app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.uio.ifi.in2000.prosjekt.ui.infoSteder\n\nimport android.graphics.Paint.Align\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.BorderStroke\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.IntrinsicSize\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.foundation.selection.toggleable\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Favorite\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.BottomAppBar\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.Divider\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Switch\nimport androidx.compose.material3.SwitchDefaults\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.rotate\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Popup\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.rememberNavController\nimport co.yml.charts.axis.AxisData\nimport co.yml.charts.common.model.Point\nimport co.yml.charts.ui.linechart.LineChart\nimport co.yml.charts.ui.linechart.model.GridLines\nimport co.yml.charts.ui.linechart.model.IntersectionPoint\nimport co.yml.charts.ui.linechart.model.Line\nimport co.yml.charts.ui.linechart.model.LineChartData\nimport co.yml.charts.ui.linechart.model.LinePlotData\nimport co.yml.charts.ui.linechart.model.LineStyle\nimport co.yml.charts.ui.linechart.model.LineType\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPoint\nimport co.yml.charts.ui.linechart.model.SelectionHighlightPopUp\nimport co.yml.charts.ui.linechart.model.ShadowUnderLine\nimport coil.compose.AsyncImage\nimport coil.request.ImageRequest\nimport no.uio.ifi.in2000.prosjekt.Data.Ukedag\nimport no.uio.ifi.in2000.prosjekt.R\nimport no.uio.ifi.in2000.prosjekt.ui.Map.ExpandableCard\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MetAlersUiState\nimport no.uio.ifi.in2000.prosjekt.ui.Map.MetAlertViewModel\nimport no.uio.ifi.in2000.prosjekt.ui.Map.formatToNorwegianTime\nimport no.uio.ifi.in2000.prosjekt.ui.theme.MyApplicationTheme\nimport java.util.Calendar\nimport java.util.Locale\nimport kotlin.math.ceil\nimport kotlin.math.pow\nimport kotlin.math.round\nimport kotlin.math.roundToInt\n\ndata class LfRow(val tid: String, val temp: String?, val vind: String?, val rotation: String?)\n\n@RequiresApi(Build.VERSION_CODES.O)\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalComposeUiApi::class)\n@Composable\nfun InfoStederScreen(coordinate: String, sted: String, navController: NavController, infoStederScreenViewModel : InfoStederViewModel = InfoStederViewModel(coordinate),\n                   infoStederLFViewModel: InfoStederLFViewModel = InfoStederLFViewModel(coordinate), metAlertViewModel: MetAlertViewModel = viewModel(),\n                     infoStederOFViewModel: InfoStederOFViewModel = InfoStederOFViewModel(coordinate)\n) {\n    val liste = coordinate.split(\",\")\n    val lat = liste[0].trim()\n    val lon = liste[1].trim()\n    val metAlert by metAlertViewModel.MAUiState.collectAsState()\n    val antallVarsler = metAlert.MetAlertsCoordinate?.features?.size\n    val iconTint = when {\n        antallVarsler == 0 || antallVarsler == null -> Color.Transparent\n        else -> Color.Yellow\n    }\n    metAlertViewModel.getNewDataCoords(lat,lon)\n//\n//    val locFor by infoStederLFViewModel.lFUiState.collectAsState()\n//    val dateTimeString = locFor.weatherData?.properties?.timeseries?.get(0)?.time\n//    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n    val hour = infoStederLFViewModel.startHour\n    var selectedOption by remember { mutableStateOf(\"I dag\") }\n\n    var selectedOptionSwitch by remember { mutableStateOf(\"Tabell\") }\n//    val offsett = when (selectedOption) {\n//        \"I dag\" -> 0\n//        \"I morgen\" -> when(hour){\n//                22 -> 26\n//                23 -> 25\n//                else -> 24\n//            }\n//        else -> when(hour) {\n//            22 -> 50\n//            23 -> 49\n//            else -> 48\n//        }\n//    }\n    val offsett = when (selectedOption) {\n        \"I dag\" -> 0\n        \"I morgen\" -> 24\n        else -> 48\n    }\n    val calendar = Calendar.getInstance()\n    val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)\n    val toDagerFrem = Ukedag.entries[(dayOfWeek+1)%7]\n\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = Color(0xFF1F3468),\n                    titleContentColor = Color.Black,\n                ),\n                title = {\n                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                        Text(sted, color = Color.White)\n                        //Text(coordinate, color = Color.White)\n                    }\n                },\n                navigationIcon = {\n                    IconButton(onClick = { navController.popBackStack() }) {\n                        Icon(\n                            Icons.Default.ArrowBack,\n                            contentDescription = \"Return\",\n                            tint = Color.White\n                        )\n                    }\n                },\n\n                actions = {\n                    IconButton(onClick = { metAlertViewModel.togglePopupVisibility() }) {\n                        Icon(\n                            painter = painterResource(id = R.drawable.warning), // Reference your drawable here\n                            contentDescription = \"Custom Icon\", // Provide an appropriate description\n                            tint = iconTint, // Set the tint color if needed,\n                            modifier = Modifier.size(30.dp)\n                        )\n                    }\n                }\n            )\n        },\n        bottomBar = {\n            BottomAppBar(\n                containerColor = Color(0xFFCFE3F3) // Matching the top bar color\n            ){\n                Row (\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .padding(horizontal = 2.dp),\n                    horizontalArrangement = Arrangement.SpaceBetween\n                ) {\n\n                    MultiToggleButton(currentSelection = selectedOptionSwitch, toggleStates = listOf(\"Tabell\", \"Graf\")) {newSelecter ->\n                        selectedOptionSwitch = newSelecter\n                    }\n                    MultiToggleButton(currentSelection = selectedOption, toggleStates = listOf(\"I dag\", \"I morgen\",\n                        toDagerFrem.name\n                    )) { newselectedOption ->\n                        selectedOption = newselectedOption\n                    }\n                }\n            }\n        }\n    ) { innerPadding ->\n        Column() {\n            if(antallVarsler != null && antallVarsler > 0){\n                metAlerts(metAlertViewModel = metAlertViewModel, antallVarsler = antallVarsler)\n            }\n            LazyColumn(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(innerPadding)\n                    .padding(8.dp),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.spacedBy(30.dp),\n                contentPadding = PaddingValues(10.dp)\n            ) {\n                item {\n                    if(selectedOptionSwitch == \"Graf\"){\n                        waterTempCard(\n                            infoStederScreenViewModel = infoStederScreenViewModel,\n                            offsett = offsett)\n                    } else {\n                        //ExpandableWeatherCardLand2(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, dag = selectedOption)\n\n                        ExpandableWeatherCardLand(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, selectedOption)\n                    }\n                }\n                item {\n                    if(selectedOptionSwitch == \"Graf\") {\n                        landTempCard(\n                            infostederLocationForecastVM = infoStederLFViewModel,\n                            offsett = offsett\n                        )\n                    } else {\n                        ExpandableWeatherCard(infoStederOFViewModel, nr = offsett, selectedOption)\n                        //ExpandableWeatherCardSea2(infoStederOFViewModel = infoStederOFViewModel, nr = offsett, dag = selectedOption)\n                    }\n                }\n                item {\n                    if(selectedOptionSwitch == \"Graf\") {\n                        windSpeedCard(\n                            infostederLocationForecastVM = infoStederLFViewModel,\n                            offsett = offsett\n                        )\n                    } else {\n                        //ExpandableWeatherCardSea2(infoStederOFViewModel, offsett, selectedOption)\n                    }\n                }\n            }\n        }\n    }\n}\n@Composable\nfun myButton(dag : String, selectedOption: String, onSelectedOptionChanged: (String) -> Unit){\n    Button(onClick = {\n        onSelectedOptionChanged(dag)\n    },\n        shape = RectangleShape,\n        border = BorderStroke(1.dp, Color.White),\n        modifier = Modifier) {\n        Text(text = dag)\n    }\n}\n\n@Composable\nfun MultiToggleButton(\n    currentSelection: String,\n    toggleStates: List<String>,\n    onToggleChange: (String) -> Unit\n) {\n    val selectedTint = MaterialTheme.colorScheme.tertiary\n    val unselectedTint = Color.White\n\n    Row(modifier = Modifier\n        .height(IntrinsicSize.Min)\n        .border(BorderStroke(1.dp, Color.LightGray))\n        ) {\n        toggleStates.forEachIndexed { index, toggleState ->\n            val isSelected = currentSelection.lowercase() == toggleState.lowercase()\n            val backgroundTint = if (isSelected) selectedTint else unselectedTint\n            val textColor = if (isSelected) Color.White else Color.Unspecified\n\n            if (index != 0) {\n                Divider(\n                    color = Color.LightGray,\n                    modifier = Modifier\n                        .fillMaxHeight()\n                        .width(1.dp)\n                )\n            }\n\n            Row(\n                modifier = Modifier\n                    .background(backgroundTint)\n                    .padding(vertical = 6.dp, horizontal = 8.dp)\n                    .toggleable(\n                        value = isSelected,\n                        enabled = true,\n                        onValueChange = { selected ->\n                            if (selected) {\n                                onToggleChange(toggleState)\n                            }\n                        })\n            ) {\n                Text(toggleState.toCapital(), color = textColor, modifier = Modifier.padding(4.dp))\n            }\n        }\n    }\n}\n\nfun String.toCapital(): String {\n    return this.lowercase().replaceFirstChar { it.titlecase(Locale.getDefault())} }\n\n@Composable\nfun RectangleSwitch() {\n    var isChecked by remember { mutableStateOf(false) }\n    val buttonText = if (isChecked) \"ON\" else \"OFF\"\n    val buttonColor = if (isChecked) Color.Green else Color.Gray\n\n    Button(\n        onClick = { isChecked = !isChecked },\n        colors = ButtonDefaults.buttonColors(), // Set the background color based on the state\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp) // Customize padding\n    ) {\n        Text(text = buttonText, color = Color.White) // Text color is white for better contrast\n    }\n}\n\n\nfun avrund(value: Double, precision: Int): Double {\n    val scale = 10.0.pow(precision)\n    return round(value * scale) / scale\n}\n\nfun hentVerdiTemperature(infoSted: HavvarselUIState, index : Int) : Float{\n    val a = infoSted.temperatureProjection?.variables?.get(0)?.data?.get(index)?.value\n    val b = a?.toDouble()\n    val c = b?.let { avrund(it,1) }\n    return if (c != null) {\n        c.toFloat()\n    } else {\n        0f\n    }\n}\n\n@Composable\nfun ExpandableWeatherCardLand(infoStederLFViewModel: InfoStederLFViewModel, nr : Int, dag : String) {\n    val lFUiState by infoStederLFViewModel.lFUiState.collectAsState()\n    val isLoading by infoStederLFViewModel.isLoading.collectAsState()\n    var expanded by remember { mutableStateOf (false) }\n\n    if(lFUiState.weatherData?.properties?.timeseries?.size == 0){\n        return\n    }\n    val dateTimeString = lFUiState.weatherData?.properties?.timeseries?.get(0)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val first = when (expanded) {\n        true -> \"00\"\n        else -> \"00-06\"\n    }\n    val second = when (expanded) {\n        true -> \"01\"\n        else -> \"06-12\"\n    }\n    val third = when (expanded) {\n        true -> \"02\"\n        else -> \"12-18\"\n    }\n    val fourth = when (expanded) {\n        true -> \"03\"\n        else -> \"18-24\"\n    }\n    val t1 = when (expanded) {\n        true -> 0\n        else -> 0\n    }\n    val t2 = when (expanded) {\n        true -> 1\n        else -> 6\n    }\n    val t3 = when (expanded) {\n        true -> 2\n        else -> 12\n    }\n    val t4 = when (expanded) {\n        true -> 3\n        else -> 18\n    }\n    val indexArray = arrayOf(t1, t2, t3, t4)\n    val column1Weight = .2f\n    val column2Weight = .3f\n    val column3Weight = .25f\n    val column4Weight = .25f\n\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n    val lfRowList = when (nr) {\n        0 -> when(hour) {\n            22 -> (0..23).map { index -> LfRow(\"%02d\".format(index),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"air_temperature\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"wind_speed\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"wind_from_direction\").toString()) }\n            23 -> (0..23).map { index -> LfRow(\"%02d\".format(index),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"air_temperature\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"wind_speed\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"wind_from_direction\").toString()) }\n            else -> (0..23-hour).map { index -> LfRow(\"%02d\".format(hour+index),\n                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"air_temperature\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"wind_speed\").toString(),\n                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"wind_from_direction\").toString()) }\n        }\n        else -> (0..23).map { index -> LfRow(\"%02d\".format(index),\n            lFUiState.weatherData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"air_temperature\").toString(),\n            lFUiState.weatherData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"wind_speed\").toString(),\n            lFUiState.weatherData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"wind_from_direction\").toString()) }\n    }\n    val a = lfRowList.size\n    val res = ceil(a.toDouble() / 6).toInt()\n    Card(\n        shape = RoundedCornerShape(5.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 20.dp,\n            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n        ){\n            if(isLoading){\n                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                    CircularProgressIndicator(modifier = Modifier)\n                }\n            } else {\n                Column() {\n                    Text(\n                        text = dag,\n                        style = MaterialTheme.typography.titleLarge,\n                        fontWeight = FontWeight.Black\n                    )\n                    Row(\n                        Modifier\n                            .fillMaxWidth()\n                            .padding(8.dp),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        TableCell(\n                            text = \"Tid\",\n                            weight = column1Weight,\n                            alignment = TextAlign.Left,\n                            title = true\n                        )\n                        TableCell(text = \"Temp\", weight = column2Weight, title = true)\n                        TableCell(text = \"Vind\", weight = column3Weight, title = true)\n                        TableCell(\n                            text = \"Retning\",\n                            weight = column4Weight,\n                            alignment = TextAlign.Right,\n                            title = true\n                        )\n                    }\n                    Divider(color = Color.LightGray, modifier = Modifier\n                        .fillMaxWidth()\n                        .height(1.dp))\n                    if(nr == 0){\n                        var teller = 0\n                        for (i in 4-res..<4) {\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = when (i) {\n                                        0 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> first\n                                        }\n                                        1 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> second\n                                        }\n                                        2 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> third\n                                        }\n                                        else -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> fourth\n                                        }\n                                    },\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                lfRowList[indexArray[teller]].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                lfRowList[indexArray[teller]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                                lfRowList[indexArray[teller]].rotation?.let {\n                                    TableCellImage(text = it, weight = column4Weight)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                            teller ++\n                        }\n                        if (expanded) {\n                            repeat(lfRowList.size - res) { index ->\n                                Row(\n                                    Modifier.fillMaxWidth(),\n                                    horizontalArrangement = Arrangement.SpaceBetween\n                                ){\n                                    TableCell(\n                                        text = lfRowList[index+res].tid,\n                                        weight = column1Weight,\n                                        alignment = TextAlign.Left\n                                    )\n                                    lfRowList[index+res].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                    lfRowList[index+res].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                                    lfRowList[index+res].rotation?.let {\n                                        TableCellImage(text = it, weight = column4Weight)\n                                    }\n                                }\n                                Divider(\n                                    color = Color.LightGray,\n                                    modifier = Modifier\n                                        .height(1.dp)\n                                        .fillMaxHeight()\n                                        .fillMaxWidth()\n                                )\n                            }\n                        }\n                    } else {\n                        for (i in 0..3) {\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = when (i) {\n                                        0 -> first\n                                        1 -> second\n                                        2 -> third\n                                        else -> fourth\n                                    },\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                lfRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                lfRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                                lfRowList[indexArray[i]].rotation?.let {\n                                    TableCellImage(text = it, weight = column4Weight)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                        }\n                        if (expanded) {\n                            repeat(20) { index ->\n                                Row(\n                                    Modifier.fillMaxWidth(),\n                                    horizontalArrangement = Arrangement.SpaceBetween\n                                ){\n                                    TableCell(\n                                        text = lfRowList[index+4].tid,\n                                        weight = column1Weight,\n                                        alignment = TextAlign.Left\n                                    )\n                                    lfRowList[index+4].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                    lfRowList[index+4].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }\n                                    lfRowList[index+4].rotation?.let {\n                                        TableCellImage(text = it, weight = column4Weight)\n                                    }\n                                }\n                                Divider(\n                                    color = Color.LightGray,\n                                    modifier = Modifier\n                                        .height(1.dp)\n                                        .fillMaxHeight()\n                                        .fillMaxWidth()\n                                )\n                            }\n                        }\n                    }\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically,\n                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Text(text = \"Time for time\")\n                        Image(\n                            painter = toggleIconPainter,\n                            contentDescription = \"Expand\",\n                            modifier = Modifier.size(30.dp),\n                            Alignment.CenterStart\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun ExpandableWeatherCard(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {\n    val oFUiState by infoStederOFViewModel.oFUiState.collectAsState()\n    val isLoading by infoStederOFViewModel.isLoading.collectAsState()\n    var expanded by remember { mutableStateOf (false) }\n\n    if(oFUiState.oceanForecastData?.properties?.timeseries?.size == 0){\n        return\n    }\n    val dateTimeString = oFUiState.oceanForecastData?.properties?.timeseries?.get(0)?.time\n    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0\n\n    val first = when (expanded) {\n        true -> \"00\"\n        else -> \"00-06\"\n    }\n    val second = when (expanded) {\n        true -> \"01\"\n        else -> \"06-12\"\n    }\n    val third = when (expanded) {\n        true -> \"02\"\n        else -> \"12-18\"\n    }\n    val fourth = when (expanded) {\n        true -> \"03\"\n        else -> \"18-24\"\n    }\n    val t1 = when (expanded) {\n        true -> 0\n        else -> 0\n    }\n    val t2 = when (expanded) {\n        true -> 1\n        else -> 6\n    }\n    val t3 = when (expanded) {\n        true -> 2\n        else -> 12\n    }\n    val t4 = when (expanded) {\n        true -> 3\n        else -> 18\n    }\n    val indexArray = arrayOf(t1, t2, t3, t4)\n    val column1Weight = .2f\n    val column2Weight = .3f\n    val column3Weight = .25f\n    val column4Weight = .25f\n\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n\n    val ofRowList = when (nr) {\n        0 -> if(hour == 22){\n            (0..23).map { index -> LfRow(\"%02d\".format(index),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"sea_water_temperature\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"sea_water_speed\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get(\"sea_water_to_direction\").toString()) }\n        } else if (hour == 23){\n            (0..23).map { index -> LfRow(\"%02d\".format(index),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"sea_water_temperature\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"sea_water_speed\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get(\"sea_water_to_direction\").toString()) }\n        }\n        else {\n            (0..23-hour).map { index -> LfRow(\"%02d\".format(hour+index),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"sea_water_temperature\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"sea_water_speed\").toString(),\n                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(\"sea_water_to_direction\").toString()) }\n        }\n        else -> (0..23).map { index -> LfRow(\"%02d\".format(index),\n            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"sea_water_temperature\").toString(),\n            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"sea_water_speed\").toString(),\n            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get(\"sea_water_to_direction\").toString()) }\n    }\n    val a = ofRowList.size\n    val res = ceil(a.toDouble() / 6).toInt()\n    Card(\n        shape = RoundedCornerShape(5.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 20.dp,\n            pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 12.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 12.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n        ){\n            if(isLoading){\n                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                    CircularProgressIndicator(modifier = Modifier)\n                }\n            } else {\n                Column() {\n                    Text(\n                        text = dag,\n                        style = MaterialTheme.typography.titleLarge,\n                        fontWeight = FontWeight.Black,\n                        textAlign = TextAlign.Start\n                    )\n                    Row(\n                        Modifier\n                            .fillMaxWidth()\n                            .padding(8.dp),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        TableCell(\n                            text = \"Tid\",\n                            weight = column1Weight,\n                            alignment = TextAlign.Left,\n                            title = true\n                        )\n                        TableCell(text = \"Temp\", weight = column2Weight, title = true)\n                        TableCell(text = \"Strøm\", weight = column3Weight, title = true)\n                        TableCell(\n                            text = \"Retning\",\n                            weight = column4Weight,\n                            alignment = TextAlign.Right,\n                            title = true\n                        )\n                    }\n                    Divider(color = Color.LightGray, modifier = Modifier\n                        .fillMaxWidth()\n                        .height(1.dp))\n                    if(nr == 0){\n                        var teller = 0\n                        for (i in 4-res..<4) {\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = when (i) {\n                                        0 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> first\n                                        }\n                                        1 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> second\n                                        }\n                                        2 -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> third\n                                        }\n                                        else -> when (expanded) {\n                                            true -> when (hour) {\n                                                22 -> \"%02d\".format(teller)\n                                                23 -> \"%02d\".format(teller+1)\n                                                else -> \"%02d\".format(teller+hour)\n                                            }\n                                            else -> fourth\n                                        }\n                                    },\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                ofRowList[indexArray[teller]].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                ofRowList[indexArray[teller]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }\n                                ofRowList[indexArray[teller]].rotation?.let {\n                                    TableCellImage(text = it, weight = column4Weight)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                            teller ++\n                        }\n                        if (expanded) {\n                            repeat(ofRowList.size - res) { index ->\n                                Row(\n                                    Modifier.fillMaxWidth(),\n                                    horizontalArrangement = Arrangement.SpaceBetween\n                                ){\n                                    TableCell(\n                                        text = ofRowList[index+res].tid,\n                                        weight = column1Weight,\n                                        alignment = TextAlign.Left\n                                    )\n                                    ofRowList[index+res].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                    ofRowList[index+res].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }\n                                    ofRowList[index+res].rotation?.let {\n                                        TableCellImage(text = it, weight = column4Weight)\n                                    }\n                                }\n                                Divider(\n                                    color = Color.LightGray,\n                                    modifier = Modifier\n                                        .height(1.dp)\n                                        .fillMaxHeight()\n                                        .fillMaxWidth()\n                                )\n                            }\n                        }\n                    } else {\n                        for (i in 0..3) {\n                            Row(\n                                Modifier.fillMaxWidth(),\n                                horizontalArrangement = Arrangement.SpaceBetween\n                            ){\n                                TableCell(\n                                    text = when (i) {\n                                        0 -> first\n                                        1 -> second\n                                        2 -> third\n                                        else -> fourth\n                                    },\n                                    weight = column1Weight,\n                                    alignment = TextAlign.Left\n                                )\n                                ofRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                ofRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }\n                                ofRowList[indexArray[i]].rotation?.let {\n                                    TableCellImage(text = it, weight = column4Weight)\n                                }\n                            }\n                            Divider(\n                                color = Color.LightGray,\n                                modifier = Modifier\n                                    .height(1.dp)\n                                    .fillMaxHeight()\n                                    .fillMaxWidth()\n                            )\n                        }\n                        if (expanded) {\n                            repeat(20) { index ->\n                                Row(\n                                    Modifier.fillMaxWidth(),\n                                    horizontalArrangement = Arrangement.SpaceBetween\n                                ){\n                                    TableCell(\n                                        text = ofRowList[index+4].tid,\n                                        weight = column1Weight,\n                                        alignment = TextAlign.Left\n                                    )\n                                    ofRowList[index+4].temp?.let { TableCell(text = it, weight = column2Weight) }\n                                    ofRowList[index+4].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }\n                                    ofRowList[index+4].rotation?.let {\n                                        TableCellImage(text = it, weight = column4Weight)\n                                    }\n                                }\n                                Divider(\n                                    color = Color.LightGray,\n                                    modifier = Modifier\n                                        .height(1.dp)\n                                        .fillMaxHeight()\n                                        .fillMaxWidth()\n                                )\n                            }\n                        }\n                    }\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically,\n                        horizontalArrangement = Arrangement.Center, // This arranges the children to be centered horizontally\n                        modifier = Modifier.fillMaxWidth()\n                    ) {\n                        Text(text = \"Time for time\")\n                        Image(\n                            painter = toggleIconPainter,\n                            contentDescription = \"Expand\",\n                            modifier = Modifier.size(30.dp),\n                            Alignment.CenterStart\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n//@Composable\n//fun ExpandableWeatherCardSea2(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {\n//    val oceanForecastUiState by infoStederOFViewModel.oFUiState.collectAsState()\n//    val isLoading by infoStederOFViewModel.isLoading.collectAsState()\n//    var expanded by remember { mutableStateOf (false) }\n//\n////    val lfRowList = when (nr) {\n////        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,\"air_temperature\")) }\n////        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, \"air_temperature\")) }\n////    }\n//    val ofRowList =  (0..23).map { index -> LfRow(\"%02d\".format(index),\n//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get(\"sea_water_temperature\").toString(),\n//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get(\"sea_water_speed\").toString(),\n//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get(\"sea_water_to_direction\").toString()) }\n//\n//    val column1Weight = .2f\n//    val column2Weight = .3f\n//    val column3Weight = .25f\n//    val column4Weight = .25f\n//\n//    val first = \"00-06\"\n//    val second = \"06-12\"\n//    val third = \"12-18\"\n//    val fourth = \"18-24\"\n//    val height = when (expanded) {\n//        true -> 600\n//        false -> 300\n//    }\n//\n//    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n//    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n//    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n//    Card(\n//        Modifier\n//            .background(Color.White)\n//            .height(height.dp)\n//            .clickable { expanded = !expanded },\n//        elevation = CardDefaults.cardElevation(\n//            defaultElevation = 12.dp\n//        )){\n//        if(isLoading){\n//            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){\n//                CircularProgressIndicator()\n//            }\n//        } else {\n//            Column {\n//                // Sticky header part outside the LazyColumn\n//                Row(\n//                    Modifier\n//                        .fillMaxWidth()\n//                        .padding(8.dp),\n//                    horizontalArrangement = Arrangement.SpaceBetween\n//                ) {\n//                    TableCell(\n//                        text = \"Tid\",\n//                        weight = column1Weight,\n//                        alignment = TextAlign.Left,\n//                        title = true\n//                    )\n//                    TableCell(text = \"Temp\", weight = column2Weight, title = true)\n//                    TableCell(text = \"Vind\", weight = column3Weight, title = true)\n//                    TableCell(\n//                        text = \"Retning\",\n//                        weight = column4Weight,\n//                        alignment = TextAlign.Right,\n//                        title = true\n//                    )\n//                }\n//                Divider(color = Color.LightGray, modifier = Modifier\n//                    .fillMaxWidth()\n//                    .height(1.dp))\n//            }\n//            LazyColumn(\n//                Modifier.padding(8.dp),\n//            ) {\n//                if(expanded){\n//                    itemsIndexed(ofRowList) { _, lf ->\n//                        Row(\n//                            Modifier.fillMaxWidth(),\n//                            horizontalArrangement = Arrangement.SpaceBetween\n//                        ) {\n//                            TableCell(\n//                                text = lf.tid,\n//                                weight = column1Weight,\n//                                alignment = TextAlign.Left\n//                            )\n//                            lf.temp?.let { TableCell(text = it, weight = column2Weight) }\n//                            lf.vind?.let { StatusCell(text = it, weight = column3Weight) }\n//                            lf.rotation?.let {\n//                                TableCellImage(text = it, weight = column4Weight)\n//                            }\n//                        }\n//                        Divider(\n//                            color = Color.LightGray,\n//                            modifier = Modifier\n//                                .height(1.dp)\n//                                .fillMaxHeight()\n//                                .fillMaxWidth()\n//                        )\n//                    }\n//                } else {\n//                    for (i in 0..3) {\n//                        item {\n//                            Row(\n//                                Modifier.fillMaxWidth(),\n//                                horizontalArrangement = Arrangement.SpaceBetween\n//                            ) {\n//                                TableCell(\n//                                    text = when (i) {\n//                                        0 -> first\n//                                        1 -> second\n//                                        2 -> third\n//                                        else -> fourth\n//                                    },\n//                                    weight = column1Weight,\n//                                    alignment = TextAlign.Left\n//                                )\n//                                ofRowList[i * 6].temp?.let {\n//                                    TableCell(\n//                                        text = it,\n//                                        weight = column2Weight\n//                                    )\n//                                }\n//                                ofRowList[i * 6].vind?.let {\n//                                    StatusCell(\n//                                        text = it,\n//                                        weight = column3Weight\n//                                    )\n//                                }\n//                                ofRowList[i * 6].rotation?.let {\n//                                    TableCellImage(text = it, weight = column4Weight)\n//                                }\n//                            }\n//                            if (i != 3) {\n//                                Divider(\n//                                    color = Color.LightGray,\n//                                    modifier = Modifier\n//                                        .height(1.dp)\n//                                        .fillMaxHeight()\n//                                        .fillMaxWidth()\n//                                )\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//    }\n//}\n\n@Composable\nfun RowScope.TableCell(\n    text: String,\n    weight: Float,\n    alignment: TextAlign = TextAlign.Center,\n    title: Boolean = false\n) {\n    Text(\n        text = text,\n        Modifier\n            .weight(weight)\n            .padding(10.dp),\n        fontWeight = if (title) FontWeight.Bold else FontWeight.Normal,\n        textAlign = alignment,\n    )\n}\n\n@Composable\nfun RowScope.TableCellImage(\n    text: String,\n    weight: Float,\n) {\n    val painter = painterResource(id = R.drawable.arrow_south)\n    Image(painter = painter, contentDescription = \"Direction\", Modifier\n        .weight(weight)\n        .padding(10.dp)\n        .rotate(text.toFloat()), alignment = Alignment.Center)\n}\n\n@Composable\nfun RowScope.StatusCell(\n    text: String,\n    weight: Float,\n    alignment: TextAlign = TextAlign.Center,\n    boolVind: Int?\n) {\n\n    val color1 = when (boolVind) {\n        0 -> Color(0xfff8deb5)\n        1 -> Color(0xFFCFE5FF)\n        else -> Color(0xFF7C82FF)\n    }\n    val textColor1 = when (boolVind) {\n        0 -> Color(0xffde7a1d)\n        1 -> Color(0xFF141414)\n        else -> Color(0xFFE9E9E9)\n    }\n\n    Text(\n        text = text,\n        Modifier\n            .weight(weight)\n            .padding(12.dp)\n            .background(color1, shape = RoundedCornerShape(50.dp)),\n        textAlign = alignment,\n        color = textColor1\n    )\n}\n\n\nfun determineSteps(diff: Float): Int {\n    return when {\n        diff in 0.1..3.0 -> 10 // This will convert 0.1 to 1 step, 0.2 to 2 steps, etc.\n//        diff in 1.1..2.0 -> ((diff * 10)-10).toInt()\n//        diff in 2.1..3.0 -> ((diff * 10)-20).toInt()\n        else -> diff.toInt()  // For values 1 and above, use the integer part as the step count\n    }\n}\n\n\n\n\n@Composable\nfun metAlerts(metAlertViewModel: MetAlertViewModel, antallVarsler : Int){\n    val metAlertState by metAlertViewModel.MAUiState.collectAsState()\n    val isPopupVisible by metAlertViewModel.isPopupVisible.collectAsState()\n    if(isPopupVisible){\n        Popup(\n            alignment = Alignment.TopCenter,\n            onDismissRequest = { metAlertViewModel.togglePopupVisibility() }, // Close popup when dismissed\n        ) {\n            Column(modifier = Modifier.fillMaxWidth()) {\n                Text(text = \"Ingen farevarsler funnet for sjøen!\")\n            }\n            LazyColumn(\n                modifier = Modifier\n                    .background(Color.Black.copy(alpha = 0.7f))\n                    .padding(16.dp)\n                    .fillMaxHeight(1f)\n                    .clickable { metAlertViewModel.togglePopupVisibility() }\n            ) {\n                items(antallVarsler){ metalertNr ->\n                    MetAlertsCard(metAlertState, metalertNr)\n                }\n            }\n            IconButton(\n                onClick = { metAlertViewModel.togglePopupVisibility() },\n                modifier = Modifier\n                    .size(30.dp)  // Set the size of the IconButton to be small\n            ) {\n                Icon(\n                    imageVector = Icons.Default.Clear,\n                    contentDescription = \"Close\",\n                    tint = Color.White\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun MetAlertsCard(metAlertState: MetAlersUiState, nr : Int) {\n    var expanded by remember { mutableStateOf (false) }\n    val inputString = (metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.title).toString()\n    val parts = inputString.split(\",\")\n    val result = parts.take(3).joinToString(\",\").trim()\n\n    val warning = painterResource(id = R.drawable.warning)\n    val expandMoreIcon = painterResource(id = R.drawable.expand_more)\n    val expandLessIcon = painterResource(id = R.drawable.expand_less)\n    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon\n    val imageUri = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.resources?.firstOrNull { it.mimeType?.startsWith(\"image/png\") == true }?.uri\n    val fareStart = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.timeinterval?.interval?.get(0)\n        ?.let { formatToNorwegianTime(it) }\n    val fareSlutt = metAlertState.MetAlertsCoordinate?.features?.get(nr)?.timeinterval?.interval?.get(1)\n        ?.let { formatToNorwegianTime(it) }\n\n    val yellowGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFF9C4), // Light yellow\n            Color(0xFFFFEB3B), // Vivid yellow\n            Color(0xFFFFD726)  // Dark yellow\n        )\n    )\n    val redGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFCDD2), // Light red\n            Color(0xFFE57373), // Medium red\n            Color(0xFFD32F2F)  // Dark red\n        )\n    )\n    val orangeGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFFFE0B2), // Light orange\n            Color(0xFFFFB74D), // Medium orange\n            Color(0xFFFB8C00)  // Dark orange\n        )\n    )\n    val greenGradient = Brush.linearGradient(\n        colors = listOf(\n            Color(0xFFA5D6A7), // Light green\n            Color(0xFF66BB6A), // Medium green\n            Color(0xFF2E7D32)  // Dark green\n        )\n    )\n    val matrixColor = when(\"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.riskMatrixColor}\") {\n        \"Red\" -> redGradient\n        \"Orange\" -> orangeGradient\n        \"Yellow\" -> yellowGradient\n        else -> greenGradient // Default color\n    }\n    Card(\n        shape = RoundedCornerShape(8.dp),\n        elevation = CardDefaults.cardElevation(\n            defaultElevation = 8.dp,\n            pressedElevation = 8.dp, // Optional: custom elevation when the card is pressed\n            focusedElevation = 8.dp, // Optional: custom elevation when the card is focused\n            hoveredElevation = 8.dp  // Optional: custom elevation when the card is hovered over\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(10.dp)\n            .clickable(\n                onClick = { expanded = !expanded }\n            ),\n    ) {\n        Box(modifier = Modifier\n            .fillMaxSize()\n            .background(matrixColor)){\n            Column() {\n                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()){\n                    Image(painter = warning, contentDescription = \"Warning\", modifier = Modifier.size(40.dp), Alignment.Center)\n                    Column(modifier = Modifier\n                        .weight(1f)\n                        .padding(horizontal = 16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally) {\n                        Text(\n                            text = result,\n                            style = MaterialTheme.typography.titleMedium,\n                            modifier = Modifier.padding(12.dp),\n                            textAlign = TextAlign.Center,\n                            fontWeight = FontWeight.Bold\n                        )\n                        Text(\n                            text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.riskMatrixColor}\",\n                            style = MaterialTheme.typography.bodyMedium,\n                            modifier = Modifier.padding(8.dp),\n                            textAlign = TextAlign.Center\n                        )\n                    }\n                    Image(painter = toggleIconPainter, contentDescription = \"Expand\", modifier = Modifier.size(40.dp), Alignment.CenterStart)\n                }\n                if (expanded) {\n                    Text(\n                        text = \"Anbefalinger:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.instruction}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Beskrivelse:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.description}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Konsekvenser:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.consequences}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Område:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"${metAlertState.MetAlertsCoordinate?.features?.get(nr)?.properties?.area}\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    Text(\n                        text = \"Tidsperiode:\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp),\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = \"Fra $fareStart \\nTil $fareSlutt\",\n                        style = MaterialTheme.typography.bodyMedium,\n                        modifier = Modifier.padding(8.dp)\n                    )\n                    if(imageUri != null){\n                        AsyncImage(\n                            model = ImageRequest.Builder(LocalContext.current)\n                                .data(imageUri)\n                                .crossfade(true)\n                                .build(),\n                            contentDescription = \"Loaded Image\",\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .clickable { },\n                            contentScale = ContentScale.Crop\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nfun hentVerdiLocationForecast(locForecast: locationForecastUiState, index : Int, param: String) : Float{\n    val a = locForecast.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(param)\n    val b = a?.let { avrund(it,1) }\n    return b?.roundToInt()?.toFloat() ?: 0f\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt
--- a/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt	(revision 4eadb9eea0fef208c0877e13967acbf8aefbcdd9)
+++ b/app/src/main/java/no/uio/ifi/in2000/prosjekt/ui/infoSteder/InfoStederScreen.kt	(date 1715443589427)
@@ -124,27 +124,9 @@
         else -> Color.Yellow
     }
     metAlertViewModel.getNewDataCoords(lat,lon)
-//
-//    val locFor by infoStederLFViewModel.lFUiState.collectAsState()
-//    val dateTimeString = locFor.weatherData?.properties?.timeseries?.get(0)?.time
-//    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
-    val hour = infoStederLFViewModel.startHour
     var selectedOption by remember { mutableStateOf("I dag") }
 
     var selectedOptionSwitch by remember { mutableStateOf("Tabell") }
-//    val offsett = when (selectedOption) {
-//        "I dag" -> 0
-//        "I morgen" -> when(hour){
-//                22 -> 26
-//                23 -> 25
-//                else -> 24
-//            }
-//        else -> when(hour) {
-//            22 -> 50
-//            23 -> 49
-//            else -> 48
-//        }
-//    }
     val offsett = when (selectedOption) {
         "I dag" -> 0
         "I morgen" -> 24
@@ -228,12 +210,12 @@
                 item {
                     if(selectedOptionSwitch == "Graf"){
                         waterTempCard(
-                            infoStederScreenViewModel = infoStederScreenViewModel,
+                            infoStederOFViewModel = infoStederOFViewModel,
                             offsett = offsett)
                     } else {
                         //ExpandableWeatherCardLand2(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, dag = selectedOption)
-
-                        ExpandableWeatherCardLand(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, selectedOption)
+                        //ExpandableWeatherCardLand(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, selectedOption)
+                        ExpandableWeatherCardLand5(infoStederLFViewModel = infoStederLFViewModel, nr = offsett, dag = selectedOption)
                     }
                 }
                 item {
@@ -261,17 +243,6 @@
         }
     }
 }
-@Composable
-fun myButton(dag : String, selectedOption: String, onSelectedOptionChanged: (String) -> Unit){
-    Button(onClick = {
-        onSelectedOptionChanged(dag)
-    },
-        shape = RectangleShape,
-        border = BorderStroke(1.dp, Color.White),
-        modifier = Modifier) {
-        Text(text = dag)
-    }
-}
 
 @Composable
 fun MultiToggleButton(
@@ -322,49 +293,24 @@
 fun String.toCapital(): String {
     return this.lowercase().replaceFirstChar { it.titlecase(Locale.getDefault())} }
 
-@Composable
-fun RectangleSwitch() {
-    var isChecked by remember { mutableStateOf(false) }
-    val buttonText = if (isChecked) "ON" else "OFF"
-    val buttonColor = if (isChecked) Color.Green else Color.Gray
-
-    Button(
-        onClick = { isChecked = !isChecked },
-        colors = ButtonDefaults.buttonColors(), // Set the background color based on the state
-        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp) // Customize padding
-    ) {
-        Text(text = buttonText, color = Color.White) // Text color is white for better contrast
-    }
-}
-
-
 fun avrund(value: Double, precision: Int): Double {
     val scale = 10.0.pow(precision)
     return round(value * scale) / scale
 }
 
-fun hentVerdiTemperature(infoSted: HavvarselUIState, index : Int) : Float{
-    val a = infoSted.temperatureProjection?.variables?.get(0)?.data?.get(index)?.value
-    val b = a?.toDouble()
-    val c = b?.let { avrund(it,1) }
-    return if (c != null) {
-        c.toFloat()
-    } else {
-        0f
-    }
-}
-
 @Composable
-fun ExpandableWeatherCardLand(infoStederLFViewModel: InfoStederLFViewModel, nr : Int, dag : String) {
-    val lFUiState by infoStederLFViewModel.lFUiState.collectAsState()
+fun ExpandableWeatherCardLand5(infoStederLFViewModel: InfoStederLFViewModel, nr : Int, dag : String) {
+    val lfUiState by infoStederLFViewModel.lFUiState.collectAsState()
+    infoStederLFViewModel.makeWeatherList(nr)
     val isLoading by infoStederLFViewModel.isLoading.collectAsState()
     var expanded by remember { mutableStateOf (false) }
 
-    if(lFUiState.weatherData?.properties?.timeseries?.size == 0){
+    if(lfUiState.weatherList.isEmpty()){
         return
     }
-    val dateTimeString = lFUiState.weatherData?.properties?.timeseries?.get(0)?.time
-    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
+
+    val a = lfUiState.weatherList.size
+    val res = ceil(a.toDouble() / 6).toInt()
 
     val first = when (expanded) {
         true -> "00"
@@ -408,28 +354,7 @@
     val expandLessIcon = painterResource(id = R.drawable.expand_less)
     val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
 
-    val lfRowList = when (nr) {
-        0 -> when(hour) {
-            22 -> (0..23).map { index -> LfRow("%02d".format(index),
-                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("air_temperature").toString(),
-                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("wind_speed").toString(),
-                lFUiState.weatherData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("wind_from_direction").toString()) }
-            23 -> (0..23).map { index -> LfRow("%02d".format(index),
-                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("air_temperature").toString(),
-                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("wind_speed").toString(),
-                lFUiState.weatherData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("wind_from_direction").toString()) }
-            else -> (0..23-hour).map { index -> LfRow("%02d".format(hour+index),
-                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("air_temperature").toString(),
-                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("wind_speed").toString(),
-                lFUiState.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("wind_from_direction").toString()) }
-        }
-        else -> (0..23).map { index -> LfRow("%02d".format(index),
-            lFUiState.weatherData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get("air_temperature").toString(),
-            lFUiState.weatherData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get("wind_speed").toString(),
-            lFUiState.weatherData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get("wind_from_direction").toString()) }
-    }
-    val a = lfRowList.size
-    val res = ceil(a.toDouble() / 6).toInt()
+
     Card(
         shape = RoundedCornerShape(5.dp),
         elevation = CardDefaults.cardElevation(
@@ -454,11 +379,22 @@
                 }
             } else {
                 Column() {
-                    Text(
-                        text = dag,
-                        style = MaterialTheme.typography.titleLarge,
-                        fontWeight = FontWeight.Black
-                    )
+                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween){
+                        Box(contentAlignment = Alignment.CenterStart){
+                            Text(
+                                text = dag,
+                                style = MaterialTheme.typography.titleLarge,
+                                fontWeight = FontWeight.Black,
+                                textAlign = TextAlign.Start)
+                        }
+                        Box(contentAlignment = Alignment.CenterEnd){
+                            Text(
+                                text = "På land",
+                                style = MaterialTheme.typography.titleLarge,
+                                fontWeight = FontWeight.Black
+                            )
+                        }
+                    }
                     Row(
                         Modifier
                             .fillMaxWidth()
@@ -483,7 +419,7 @@
                     Divider(color = Color.LightGray, modifier = Modifier
                         .fillMaxWidth()
                         .height(1.dp))
-                    if(nr == 0){
+                    if(a < 24){
                         var teller = 0
                         for (i in 4-res..<4) {
                             Row(
@@ -493,45 +429,29 @@
                                 TableCell(
                                     text = when (i) {
                                         0 -> when (expanded) {
-                                            true -> when (hour) {
-                                                22 -> "%02d".format(teller)
-                                                23 -> "%02d".format(teller+1)
-                                                else -> "%02d".format(teller+hour)
-                                            }
+                                            true -> "%02d".format(teller+24-a)
                                             else -> first
                                         }
                                         1 -> when (expanded) {
-                                            true -> when (hour) {
-                                                22 -> "%02d".format(teller)
-                                                23 -> "%02d".format(teller+1)
-                                                else -> "%02d".format(teller+hour)
-                                            }
+                                            true -> "%02d".format(teller+24-a)
                                             else -> second
                                         }
                                         2 -> when (expanded) {
-                                            true -> when (hour) {
-                                                22 -> "%02d".format(teller)
-                                                23 -> "%02d".format(teller+1)
-                                                else -> "%02d".format(teller+hour)
-                                            }
+                                            true -> "%02d".format(teller+24-a)
                                             else -> third
                                         }
                                         else -> when (expanded) {
-                                            true -> when (hour) {
-                                                22 -> "%02d".format(teller)
-                                                23 -> "%02d".format(teller+1)
-                                                else -> "%02d".format(teller+hour)
-                                            }
+                                            true -> "%02d".format(teller+24-a)
                                             else -> fourth
                                         }
                                     },
                                     weight = column1Weight,
                                     alignment = TextAlign.Left
                                 )
-                                lfRowList[indexArray[teller]].temp?.let { TableCell(text = it, weight = column2Weight) }
-                                lfRowList[indexArray[teller]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
-                                lfRowList[indexArray[teller]].rotation?.let {
-                                    TableCellImage(text = it, weight = column4Weight)
+                                lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
+                                lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                                lfUiState.weatherList[indexArray[teller]]?.data?.instant?.details?.get("wind_from_direction").toString().let {
+                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
                                 }
                             }
                             Divider(
@@ -544,20 +464,20 @@
                             teller ++
                         }
                         if (expanded) {
-                            repeat(lfRowList.size - res) { index ->
+                            repeat(a - res) { index ->
                                 Row(
                                     Modifier.fillMaxWidth(),
                                     horizontalArrangement = Arrangement.SpaceBetween
                                 ){
                                     TableCell(
-                                        text = lfRowList[index+res].tid,
+                                        text = "%02d".format(index+24+res-a),
                                         weight = column1Weight,
                                         alignment = TextAlign.Left
                                     )
-                                    lfRowList[index+res].temp?.let { TableCell(text = it, weight = column2Weight) }
-                                    lfRowList[index+res].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
-                                    lfRowList[index+res].rotation?.let {
-                                        TableCellImage(text = it, weight = column4Weight)
+                                    lfUiState.weatherList[index+res]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
+                                    lfUiState.weatherList[index+res]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                                    lfUiState.weatherList[index+res]?.data?.instant?.details?.get("wind_from_direction").toString().let {
+                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
                                     }
                                 }
                                 Divider(
@@ -585,10 +505,10 @@
                                     weight = column1Weight,
                                     alignment = TextAlign.Left
                                 )
-                                lfRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }
-                                lfRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
-                                lfRowList[indexArray[i]].rotation?.let {
-                                    TableCellImage(text = it, weight = column4Weight)
+                                lfUiState.weatherList[indexArray[i]]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
+                                lfUiState.weatherList[indexArray[i]]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                                lfUiState.weatherList[indexArray[i]]?.data?.instant?.details?.get("wind_from_direction").toString().let {
+                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
                                 }
                             }
                             Divider(
@@ -606,14 +526,14 @@
                                     horizontalArrangement = Arrangement.SpaceBetween
                                 ){
                                     TableCell(
-                                        text = lfRowList[index+4].tid,
+                                        text = "%02d".format(index+4),
                                         weight = column1Weight,
                                         alignment = TextAlign.Left
                                     )
-                                    lfRowList[index+4].temp?.let { TableCell(text = it, weight = column2Weight) }
-                                    lfRowList[index+4].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
-                                    lfRowList[index+4].rotation?.let {
-                                        TableCellImage(text = it, weight = column4Weight)
+                                    lfUiState.weatherList[index+4]?.data?.instant?.details?.get("air_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
+                                    lfUiState.weatherList[index+4]?.data?.instant?.details?.get("wind_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 1) }
+                                    lfUiState.weatherList[index+4]?.data?.instant?.details?.get("wind_from_direction").toString().let {
+                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_south)
                                     }
                                 }
                                 Divider(
@@ -647,15 +567,17 @@
 
 @Composable
 fun ExpandableWeatherCard(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {
-    val oFUiState by infoStederOFViewModel.oFUiState.collectAsState()
+    val ofUiState by infoStederOFViewModel.oFUiState.collectAsState()
+    infoStederOFViewModel.makeWeatherList(nr)
     val isLoading by infoStederOFViewModel.isLoading.collectAsState()
     var expanded by remember { mutableStateOf (false) }
 
-    if(oFUiState.oceanForecastData?.properties?.timeseries?.size == 0){
+    if(ofUiState.oceanWeatherList.isEmpty()){
         return
     }
-    val dateTimeString = oFUiState.oceanForecastData?.properties?.timeseries?.get(0)?.time
-    val hour = dateTimeString?.substring(11, 13)?.toIntOrNull() ?: 0
+    val a = ofUiState.oceanWeatherList.size
+    val res = ceil(a.toDouble()/6).toInt()
+
 
     val first = when (expanded) {
         true -> "00"
@@ -699,33 +621,8 @@
     val expandLessIcon = painterResource(id = R.drawable.expand_less)
     val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
 
-    val ofRowList = when (nr) {
-        0 -> if(hour == 22){
-            (0..23).map { index -> LfRow("%02d".format(index),
-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("sea_water_temperature").toString(),
-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("sea_water_speed").toString(),
-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+2)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
-        } else if (hour == 23){
-            (0..23).map { index -> LfRow("%02d".format(index),
-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("sea_water_temperature").toString(),
-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("sea_water_speed").toString(),
-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index+1)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
-        }
-        else {
-            (0..23-hour).map { index -> LfRow("%02d".format(hour+index),
-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("sea_water_temperature").toString(),
-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("sea_water_speed").toString(),
-                oFUiState.oceanForecastData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
-        }
-        else -> (0..23).map { index -> LfRow("%02d".format(index),
-            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get("sea_water_temperature").toString(),
-            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get("sea_water_speed").toString(),
-            oFUiState.oceanForecastData?.properties?.timeseries?.get(index+nr-hour)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
-    }
-    val a = ofRowList.size
-    val res = ceil(a.toDouble() / 6).toInt()
     Card(
-        shape = RoundedCornerShape(5.dp),
+        shape = RoundedCornerShape(10.dp),
         elevation = CardDefaults.cardElevation(
             defaultElevation = 20.dp,
             pressedElevation = 12.dp, // Optional: custom elevation when the card is pressed
@@ -737,7 +634,7 @@
             .padding(10.dp)
             .clickable(
                 onClick = { expanded = !expanded }
-            ),
+            )
     ) {
         Box(modifier = Modifier
             .fillMaxSize()
@@ -748,12 +645,24 @@
                 }
             } else {
                 Column() {
-                    Text(
-                        text = dag,
-                        style = MaterialTheme.typography.titleLarge,
-                        fontWeight = FontWeight.Black,
-                        textAlign = TextAlign.Start
-                    )
+                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween){
+                        Box(contentAlignment = Alignment.CenterStart){
+                            Text(
+                                text = dag,
+                                modifier = Modifier.padding(end = 10.dp) .padding(top = 10.dp),
+                                style = MaterialTheme.typography.titleLarge,
+                                fontWeight = FontWeight.Black,
+                                textAlign = TextAlign.Start)
+                        }
+                        Box(contentAlignment = Alignment.CenterEnd){
+                            Text(
+                                text = "På havet",
+                                modifier = Modifier.padding(end = 10.dp) .padding(top = 10.dp),
+                                style = MaterialTheme.typography.titleLarge,
+                                fontWeight = FontWeight.Black
+                            )
+                        }
+                    }
                     Row(
                         Modifier
                             .fillMaxWidth()
@@ -778,7 +687,7 @@
                     Divider(color = Color.LightGray, modifier = Modifier
                         .fillMaxWidth()
                         .height(1.dp))
-                    if(nr == 0){
+                    if(a < 24){
                         var teller = 0
                         for (i in 4-res..<4) {
                             Row(
@@ -788,45 +697,29 @@
                                 TableCell(
                                     text = when (i) {
                                         0 -> when (expanded) {
-                                            true -> when (hour) {
-                                                22 -> "%02d".format(teller)
-                                                23 -> "%02d".format(teller+1)
-                                                else -> "%02d".format(teller+hour)
-                                            }
+                                            true -> "%02d".format(teller+24-a)
                                             else -> first
                                         }
                                         1 -> when (expanded) {
-                                            true -> when (hour) {
-                                                22 -> "%02d".format(teller)
-                                                23 -> "%02d".format(teller+1)
-                                                else -> "%02d".format(teller+hour)
-                                            }
+                                            true -> "%02d".format(teller+24-a)
                                             else -> second
                                         }
                                         2 -> when (expanded) {
-                                            true -> when (hour) {
-                                                22 -> "%02d".format(teller)
-                                                23 -> "%02d".format(teller+1)
-                                                else -> "%02d".format(teller+hour)
-                                            }
+                                            true -> "%02d".format(teller+24-a)
                                             else -> third
                                         }
                                         else -> when (expanded) {
-                                            true -> when (hour) {
-                                                22 -> "%02d".format(teller)
-                                                23 -> "%02d".format(teller+1)
-                                                else -> "%02d".format(teller+hour)
-                                            }
+                                            true -> "%02d".format(teller+24-a)
                                             else -> fourth
                                         }
                                     },
                                     weight = column1Weight,
                                     alignment = TextAlign.Left
                                 )
-                                ofRowList[indexArray[teller]].temp?.let { TableCell(text = it, weight = column2Weight) }
-                                ofRowList[indexArray[teller]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }
-                                ofRowList[indexArray[teller]].rotation?.let {
-                                    TableCellImage(text = it, weight = column4Weight)
+                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get("sea_water_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
+                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get("sea_water_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }
+                                ofUiState.oceanWeatherList[indexArray[teller]]?.data?.instant?.details?.get("sea_water_to_direction").toString().let {
+                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)
                                 }
                             }
                             Divider(
@@ -839,20 +732,20 @@
                             teller ++
                         }
                         if (expanded) {
-                            repeat(ofRowList.size - res) { index ->
+                            repeat(a - res) { index ->
                                 Row(
                                     Modifier.fillMaxWidth(),
                                     horizontalArrangement = Arrangement.SpaceBetween
                                 ){
                                     TableCell(
-                                        text = ofRowList[index+res].tid,
+                                        text = "%02d".format(index+24+res-a),
                                         weight = column1Weight,
                                         alignment = TextAlign.Left
                                     )
-                                    ofRowList[index+res].temp?.let { TableCell(text = it, weight = column2Weight) }
-                                    ofRowList[index+res].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }
-                                    ofRowList[index+res].rotation?.let {
-                                        TableCellImage(text = it, weight = column4Weight)
+                                    ofUiState.oceanWeatherList[index+res]?.data?.instant?.details?.get("sea_water_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
+                                    ofUiState.oceanWeatherList[index+res]?.data?.instant?.details?.get("sea_water_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }
+                                    ofUiState.oceanWeatherList[index+res]?.data?.instant?.details?.get("sea_water_to_direction").toString().let {
+                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)
                                     }
                                 }
                                 Divider(
@@ -880,10 +773,10 @@
                                     weight = column1Weight,
                                     alignment = TextAlign.Left
                                 )
-                                ofRowList[indexArray[i]].temp?.let { TableCell(text = it, weight = column2Weight) }
-                                ofRowList[indexArray[i]].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }
-                                ofRowList[indexArray[i]].rotation?.let {
-                                    TableCellImage(text = it, weight = column4Weight)
+                                ofUiState.oceanWeatherList[indexArray[i]]?.data?.instant?.details?.get("sea_water_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
+                                ofUiState.oceanWeatherList[indexArray[i]]?.data?.instant?.details?.get("sea_water_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }
+                                ofUiState.oceanWeatherList[indexArray[i]]?.data?.instant?.details?.get("sea_water_to_direction").toString().let {
+                                    TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)
                                 }
                             }
                             Divider(
@@ -901,14 +794,14 @@
                                     horizontalArrangement = Arrangement.SpaceBetween
                                 ){
                                     TableCell(
-                                        text = ofRowList[index+4].tid,
+                                        text = "%02d".format(index+4),
                                         weight = column1Weight,
                                         alignment = TextAlign.Left
                                     )
-                                    ofRowList[index+4].temp?.let { TableCell(text = it, weight = column2Weight) }
-                                    ofRowList[index+4].vind?.let { StatusCell(text = it, weight = column3Weight, boolVind = 2) }
-                                    ofRowList[index+4].rotation?.let {
-                                        TableCellImage(text = it, weight = column4Weight)
+                                    ofUiState.oceanWeatherList[index+4]?.data?.instant?.details?.get("sea_water_temperature").toString().let { TableCell(text = it, weight = column2Weight) }
+                                    ofUiState.oceanWeatherList[index+4]?.data?.instant?.details?.get("sea_water_speed").toString().let { StatusCell(text = it, weight = column3Weight, boolVind = 0) }
+                                    ofUiState.oceanWeatherList[index+4]?.data?.instant?.details?.get("sea_water_to_direction").toString().let {
+                                        TableCellImage(text = it, weight = column4Weight, R.drawable.arrow_north)
                                     }
                                 }
                                 Divider(
@@ -940,156 +833,6 @@
     }
 }
 
-//@Composable
-//fun ExpandableWeatherCardSea2(infoStederOFViewModel: InfoStederOFViewModel, nr : Int, dag : String) {
-//    val oceanForecastUiState by infoStederOFViewModel.oFUiState.collectAsState()
-//    val isLoading by infoStederOFViewModel.isLoading.collectAsState()
-//    var expanded by remember { mutableStateOf (false) }
-//
-////    val lfRowList = when (nr) {
-////        0 -> (hour..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, index-hour,"air_temperature")) }
-////        else -> (0..23).map { index -> Point(index.toFloat(), hentVerdiLocationForecast(locationForecastUiState, (index+offsett)-hour, "air_temperature")) }
-////    }
-//    val ofRowList =  (0..23).map { index -> LfRow("%02d".format(index),
-//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_temperature").toString(),
-//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_speed").toString(),
-//        oceanForecastUiState.oceanForecastData?.properties?.timeseries?.get(index+nr)?.data?.instant?.details?.get("sea_water_to_direction").toString()) }
-//
-//    val column1Weight = .2f
-//    val column2Weight = .3f
-//    val column3Weight = .25f
-//    val column4Weight = .25f
-//
-//    val first = "00-06"
-//    val second = "06-12"
-//    val third = "12-18"
-//    val fourth = "18-24"
-//    val height = when (expanded) {
-//        true -> 600
-//        false -> 300
-//    }
-//
-//    val expandMoreIcon = painterResource(id = R.drawable.expand_more)
-//    val expandLessIcon = painterResource(id = R.drawable.expand_less)
-//    val toggleIconPainter = if (expanded) expandLessIcon else expandMoreIcon
-//    Card(
-//        Modifier
-//            .background(Color.White)
-//            .height(height.dp)
-//            .clickable { expanded = !expanded },
-//        elevation = CardDefaults.cardElevation(
-//            defaultElevation = 12.dp
-//        )){
-//        if(isLoading){
-//            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){
-//                CircularProgressIndicator()
-//            }
-//        } else {
-//            Column {
-//                // Sticky header part outside the LazyColumn
-//                Row(
-//                    Modifier
-//                        .fillMaxWidth()
-//                        .padding(8.dp),
-//                    horizontalArrangement = Arrangement.SpaceBetween
-//                ) {
-//                    TableCell(
-//                        text = "Tid",
-//                        weight = column1Weight,
-//                        alignment = TextAlign.Left,
-//                        title = true
-//                    )
-//                    TableCell(text = "Temp", weight = column2Weight, title = true)
-//                    TableCell(text = "Vind", weight = column3Weight, title = true)
-//                    TableCell(
-//                        text = "Retning",
-//                        weight = column4Weight,
-//                        alignment = TextAlign.Right,
-//                        title = true
-//                    )
-//                }
-//                Divider(color = Color.LightGray, modifier = Modifier
-//                    .fillMaxWidth()
-//                    .height(1.dp))
-//            }
-//            LazyColumn(
-//                Modifier.padding(8.dp),
-//            ) {
-//                if(expanded){
-//                    itemsIndexed(ofRowList) { _, lf ->
-//                        Row(
-//                            Modifier.fillMaxWidth(),
-//                            horizontalArrangement = Arrangement.SpaceBetween
-//                        ) {
-//                            TableCell(
-//                                text = lf.tid,
-//                                weight = column1Weight,
-//                                alignment = TextAlign.Left
-//                            )
-//                            lf.temp?.let { TableCell(text = it, weight = column2Weight) }
-//                            lf.vind?.let { StatusCell(text = it, weight = column3Weight) }
-//                            lf.rotation?.let {
-//                                TableCellImage(text = it, weight = column4Weight)
-//                            }
-//                        }
-//                        Divider(
-//                            color = Color.LightGray,
-//                            modifier = Modifier
-//                                .height(1.dp)
-//                                .fillMaxHeight()
-//                                .fillMaxWidth()
-//                        )
-//                    }
-//                } else {
-//                    for (i in 0..3) {
-//                        item {
-//                            Row(
-//                                Modifier.fillMaxWidth(),
-//                                horizontalArrangement = Arrangement.SpaceBetween
-//                            ) {
-//                                TableCell(
-//                                    text = when (i) {
-//                                        0 -> first
-//                                        1 -> second
-//                                        2 -> third
-//                                        else -> fourth
-//                                    },
-//                                    weight = column1Weight,
-//                                    alignment = TextAlign.Left
-//                                )
-//                                ofRowList[i * 6].temp?.let {
-//                                    TableCell(
-//                                        text = it,
-//                                        weight = column2Weight
-//                                    )
-//                                }
-//                                ofRowList[i * 6].vind?.let {
-//                                    StatusCell(
-//                                        text = it,
-//                                        weight = column3Weight
-//                                    )
-//                                }
-//                                ofRowList[i * 6].rotation?.let {
-//                                    TableCellImage(text = it, weight = column4Weight)
-//                                }
-//                            }
-//                            if (i != 3) {
-//                                Divider(
-//                                    color = Color.LightGray,
-//                                    modifier = Modifier
-//                                        .height(1.dp)
-//                                        .fillMaxHeight()
-//                                        .fillMaxWidth()
-//                                )
-//                            }
-//                        }
-//                    }
-//                }
-//            }
-//        }
-//    }
-//}
-
 @Composable
 fun RowScope.TableCell(
     text: String,
@@ -1111,12 +854,14 @@
 fun RowScope.TableCellImage(
     text: String,
     weight: Float,
+    imageResId: Int
 ) {
-    val painter = painterResource(id = R.drawable.arrow_south)
+    val floatValue: Float? = text.toFloatOrNull()
+    val painter = painterResource(id = imageResId)
     Image(painter = painter, contentDescription = "Direction", Modifier
         .weight(weight)
         .padding(10.dp)
-        .rotate(text.toFloat()), alignment = Alignment.Center)
+        .rotate(floatValue ?: 0f), alignment = Alignment.Center)
 }
 
 @Composable
@@ -1126,18 +871,14 @@
     alignment: TextAlign = TextAlign.Center,
     boolVind: Int?
 ) {
-
     val color1 = when (boolVind) {
-        0 -> Color(0xfff8deb5)
-        1 -> Color(0xFFCFE5FF)
-        else -> Color(0xFF7C82FF)
+        1 -> Color(0xFFF8F7F9)
+        else -> Color(0xFF446097)
     }
     val textColor1 = when (boolVind) {
-        0 -> Color(0xffde7a1d)
         1 -> Color(0xFF141414)
         else -> Color(0xFFE9E9E9)
     }
-
     Text(
         text = text,
         Modifier
@@ -1368,8 +1109,3 @@
 }
 
 
-fun hentVerdiLocationForecast(locForecast: locationForecastUiState, index : Int, param: String) : Float{
-    val a = locForecast.weatherData?.properties?.timeseries?.get(index)?.data?.instant?.details?.get(param)
-    val b = a?.let { avrund(it,1) }
-    return b?.roundToInt()?.toFloat() ?: 0f
-}
\ No newline at end of file
